--- Unit tests for validation utilities
--- Tests all validation functions for correct behavior and error messages

local lust = require('test.framework.lust')
local describe, it, expect = lust.describe, lust.it, lust.expect

local validate = require('utils.validate')

describe('Validation Utilities', function()
    
    describe('require_fields', function()
        it('should pass when all fields present', function()
            local obj = {id = 1, name = "test", health = 100}
            expect(function()
                validate.require_fields(obj, {'id', 'name', 'health'})
            end).to_not.fail()
        end)
        
        it('should fail when field missing', function()
            local obj = {id = 1, name = "test"}
            expect(function()
                validate.require_fields(obj, {'id', 'name', 'health'})
            end).to.fail()
        end)
        
        it('should fail when not a table', function()
            expect(function()
                validate.require_fields("not a table", {'id'})
            end).to.fail()
        end)
    end)
    
    describe('require_type', function()
        it('should pass when type matches', function()
            expect(function()
                validate.require_type(42, "number")
                validate.require_type("hello", "string")
                validate.require_type({}, "table")
                validate.require_type(function() end, "function")
            end).to_not.fail()
        end)
        
        it('should fail when type does not match', function()
            expect(function()
                validate.require_type(42, "string")
            end).to.fail()
        end)
    end)
    
    describe('require_range', function()
        it('should pass when value in range', function()
            expect(function()
                validate.require_range(50, 0, 100)
                validate.require_range(0, 0, 100)
                validate.require_range(100, 0, 100)
            end).to_not.fail()
        end)
        
        it('should fail when value below range', function()
            expect(function()
                validate.require_range(-1, 0, 100)
            end).to.fail()
        end)
        
        it('should fail when value above range', function()
            expect(function()
                validate.require_range(101, 0, 100)
            end).to.fail()
        end)
        
        it('should fail when not a number', function()
            expect(function()
                validate.require_range("50", 0, 100)
            end).to.fail()
        end)
    end)
    
    describe('require_enum', function()
        it('should pass when value in enum', function()
            expect(function()
                validate.require_enum("soldier", {'soldier', 'engineer', 'medic'})
            end).to_not.fail()
        end)
        
        it('should fail when value not in enum', function()
            expect(function()
                validate.require_enum("invalid", {'soldier', 'engineer', 'medic'})
            end).to.fail()
        end)
    end)
    
    describe('require_not_nil', function()
        it('should pass when value not nil', function()
            expect(function()
                validate.require_not_nil(0)
                validate.require_not_nil("")
                validate.require_not_nil(false)
            end).to_not.fail()
        end)
        
        it('should fail when value is nil', function()
            expect(function()
                validate.require_not_nil(nil)
            end).to.fail()
        end)
    end)
    
    describe('require_non_empty_string', function()
        it('should pass when string not empty', function()
            expect(function()
                validate.require_non_empty_string("hello")
            end).to_not.fail()
        end)
        
        it('should fail when string empty', function()
            expect(function()
                validate.require_non_empty_string("")
            end).to.fail()
        end)
        
        it('should fail when not a string', function()
            expect(function()
                validate.require_non_empty_string(42)
            end).to.fail()
        end)
    end)
    
    describe('require_non_empty_table', function()
        it('should pass when table not empty', function()
            expect(function()
                validate.require_non_empty_table({1, 2, 3})
                validate.require_non_empty_table({key = "value"})
            end).to_not.fail()
        end)
        
        it('should fail when table empty', function()
            expect(function()
                validate.require_non_empty_table({})
            end).to.fail()
        end)
        
        it('should fail when not a table', function()
            expect(function()
                validate.require_non_empty_table("not a table")
            end).to.fail()
        end)
    end)
    
    describe('require_positive', function()
        it('should pass when value positive', function()
            expect(function()
                validate.require_positive(1)
                validate.require_positive(0.1)
                validate.require_positive(1000)
            end).to_not.fail()
        end)
        
        it('should fail when value zero or negative', function()
            expect(function()
                validate.require_positive(0)
            end).to.fail()
            
            expect(function()
                validate.require_positive(-1)
            end).to.fail()
        end)
    end)
    
    describe('require_non_negative', function()
        it('should pass when value non-negative', function()
            expect(function()
                validate.require_non_negative(0)
                validate.require_non_negative(1)
                validate.require_non_negative(1000)
            end).to_not.fail()
        end)
        
        it('should fail when value negative', function()
            expect(function()
                validate.require_non_negative(-1)
            end).to.fail()
        end)
    end)
    
    describe('require_integer', function()
        it('should pass when value is integer', function()
            expect(function()
                validate.require_integer(0)
                validate.require_integer(42)
                validate.require_integer(-10)
            end).to_not.fail()
        end)
        
        it('should fail when value is float', function()
            expect(function()
                validate.require_integer(3.14)
            end).to.fail()
        end)
    end)
    
    describe('require_valid_coordinates', function()
        it('should pass when coordinates in bounds', function()
            expect(function()
                validate.require_valid_coordinates(5, 10, 0, 0, 50, 50)
                validate.require_valid_coordinates(0, 0, 0, 0, 50, 50)
                validate.require_valid_coordinates(50, 50, 0, 0, 50, 50)
            end).to_not.fail()
        end)
        
        it('should fail when x out of bounds', function()
            expect(function()
                validate.require_valid_coordinates(-1, 10, 0, 0, 50, 50)
            end).to.fail()
            
            expect(function()
                validate.require_valid_coordinates(51, 10, 0, 0, 50, 50)
            end).to.fail()
        end)
        
        it('should fail when y out of bounds', function()
            expect(function()
                validate.require_valid_coordinates(10, -1, 0, 0, 50, 50)
            end).to.fail()
            
            expect(function()
                validate.require_valid_coordinates(10, 51, 0, 0, 50, 50)
            end).to.fail()
        end)
    end)
    
    describe('require_callable', function()
        it('should pass when value is function', function()
            expect(function()
                validate.require_callable(function() end)
            end).to_not.fail()
        end)
        
        it('should pass when value is callable table', function()
            local callable_table = setmetatable({}, {
                __call = function() end
            })
            expect(function()
                validate.require_callable(callable_table)
            end).to_not.fail()
        end)
        
        it('should fail when value not callable', function()
            expect(function()
                validate.require_callable(42)
            end).to.fail()
            
            expect(function()
                validate.require_callable({})
            end).to.fail()
        end)
    end)
    
end)

return lust
