local lust = require 'test.lust'
local Unit = require 'src.units.Unit'
local UnitClass = require 'src.units.UnitClass'
local UnitStats = require 'src.units.UnitStats'
local UnitSystem = require 'src.units.UnitSystem'
local UnitManager = require 'src.units.UnitManager'
local UnitService = require 'src.services.UnitService'

local test = lust.describe

test('Unit Entity Tests', function()
  test('Unit creation with valid class', function()
    local unitClass = {
      id = "scout",
      name = "Scout",
      base_stats = {
        health = 75,
        stamina = 90,
        accuracy = 60,
        reflexes = 70,
        strength = 35,
        mind = 55
      }
    }

    local unit = Unit:new("TestUnit", unitClass)
    lust.assert(unit, "Unit should be created")
    lust.assert(unit.name == "TestUnit", "Unit name should match")
    lust.assert(unit.class.id == "scout", "Unit class should match")
    lust.assert(unit.stats.health == 75, "Unit health should match class base stats")
  end)

  test('Unit stat calculation', function()
    local unitClass = {
      id = "assault",
      name = "Assault",
      base_stats = {
        health = 90,
        strength = 60
      }
    }

    local unit = Unit:new("TestUnit", unitClass)
    unit.level = 5
    unit.experience = 500

    local effectiveStats = unit:calculateEffectiveStats()
    lust.assert(effectiveStats.health > 90, "Level bonuses should increase health")
  end)

  test('Unit damage and healing', function()
    local unitClass = {
      id = "medic",
      name = "Medic",
      base_stats = { health = 85 }
    }

    local unit = Unit:new("TestUnit", unitClass)
    local initialHealth = unit.stats.health

    unit:takeDamage(20)
    lust.assert(unit.stats.health < initialHealth, "Health should decrease after damage")

    unit:heal(10)
    lust.assert(unit.stats.health > unit.stats.health - 10, "Health should increase after healing")
  end)

  test('Unit experience gain and leveling', function()
    local unitClass = {
      id = "recruit",
      name = "Recruit",
      base_stats = { health = 80 }
    }

    local unit = Unit:new("TestUnit", unitClass)
    local initialLevel = unit.level

    unit:gainExperience(150)
    lust.assert(unit.experience >= 150, "Experience should increase")
    lust.assert(unit.level > initialLevel, "Unit should level up")
  end)

  test('Unit equipment management', function()
    local unitClass = {
      id = "heavy",
      name = "Heavy",
      base_stats = { health = 110 }
    }

    local unit = Unit:new("TestUnit", unitClass)

    local weapon = { id = "rifle", type = "primary", weight = 5 }
    unit:equipItem(weapon, "primary_weapon")

    lust.assert(unit.equipment.primary_weapon.id == "rifle", "Weapon should be equipped")
    lust.assert(unit.encumbrance > 0, "Encumbrance should increase with equipment")
  end)

  test('Unit trait application', function()
    local unitClass = {
      id = "scout",
      name = "Scout",
      base_stats = { health = 75, reflexes = 70 }
    }

    local unit = Unit:new("TestUnit", unitClass)

    local trait = {
      id = "stealthy",
      effects = { stealth_modifier = 1.4 }
    }

    unit:addTrait(trait)
    lust.assert(unit:hasTrait("stealthy"), "Unit should have the trait")
    lust.assert(unit.traits.stealthy, "Trait should be stored")
  end)

  test('Unit operational status', function()
    local unitClass = {
      id = "assault",
      name = "Assault",
      base_stats = { health = 90, stamina = 85 }
    }

    local unit = Unit:new("TestUnit", unitClass)

    lust.assert(unit:isOperational(), "Unit should be operational initially")

    unit:takeDamage(100)
    lust.assert(not unit:isOperational(), "Unit should not be operational when critically wounded")

    unit:heal(50)
    lust.assert(unit:isOperational(), "Unit should be operational after healing")
  end)
end)

test('UnitClass Tests', function()
  test('UnitClass creation and validation', function()
    local classData = {
      id = "sniper",
      name = "Sniper",
      category = "infantry",
      base_stats = {
        health = 75,
        accuracy = 75,
        sight = 20
      },
      abilities = { "precision_shooting", "camouflage_techniques" },
      stat_growth = {
        accuracy = 1.5,
        sight = 1.4
      }
    }

    local unitClass = UnitClass:new(classData)
    lust.assert(unitClass, "UnitClass should be created")
    lust.assert(unitClass.id == "sniper", "Class ID should match")
    lust.assert(unitClass:getBaseStats().accuracy == 75, "Base stats should be accessible")
  end)

  test('UnitClass stat growth calculation', function()
    local classData = {
      id = "medic",
      name = "Medic",
      base_stats = { health = 85, mind = 75 },
      stat_growth = { health = 1.0, mind = 1.5 }
    }

    local unitClass = UnitClass:new(classData)
    local growthStats = unitClass:calculateStatGrowth(5)

    lust.assert(growthStats.mind > growthStats.health, "Mind should grow faster than health")
  end)

  test('UnitClass ability unlocking', function()
    local classData = {
      id = "engineer",
      name = "Engineer",
      abilities = {
        [0] = { "basic_training" },
        [3] = { "combat_engineering", "explosives_handling" }
      }
    }

    local unitClass = UnitClass:new(classData)
    local abilitiesAt3 = unitClass:getAbilitiesForRank(3)

    lust.assert(#abilitiesAt3 >= 2, "Should have abilities unlocked at rank 3")
  end)

  test('UnitClass promotion validation', function()
    local classData = {
      id = "scout",
      name = "Scout",
      promotion_paths = { sniper = true, ranger = true }
    }

    local unitClass = UnitClass:new(classData)
    lust.assert(unitClass:canPromoteTo("sniper"), "Should be able to promote to sniper")
    lust.assert(not unitClass:canPromoteTo("assault"), "Should not be able to promote to assault")
  end)
end)

test('UnitStats Tests', function()
  test('Stat calculation with modifiers', function()
    local baseStats = {
      health = 80,
      strength = 50,
      accuracy = 60
    }

    local modifiers = {
      strength_modifier = 1.2,
      accuracy_modifier = 0.9
    }

    local calculatedStats = UnitStats.calculateEffectiveStats(baseStats, modifiers)
    lust.assert(calculatedStats.strength == 60, "Strength should be modified correctly")
    lust.assert(calculatedStats.accuracy == 54, "Accuracy should be modified correctly")
    lust.assert(calculatedStats.health == 80, "Health should remain unchanged")
  end)

  test('Combat modifier calculation', function()
    local unitStats = {
      accuracy = 70,
      reflexes = 65,
      strength = 55
    }

    local combatMods = UnitStats.calculateCombatModifiers(unitStats)
    lust.assert(combatMods.hit_chance > 0, "Should calculate hit chance")
    lust.assert(combatMods.damage > 0, "Should calculate damage")
    lust.assert(combatMods.critical_chance >= 0, "Should calculate critical chance")
  end)

  test('Movement cost calculation', function()
    local unitStats = {
      stamina = 80,
      strength = 60,
      encumbrance = 10
    }

    local moveCost = UnitStats.calculateMovementCost(unitStats, 5)
    lust.assert(moveCost > 0, "Movement should have a cost")
    lust.assert(moveCost < 50, "Movement cost should be reasonable")
  end)

  test('Stat clamping and validation', function()
    local invalidStats = {
      health = -10,
      accuracy = 150,
      reflexes = 30
    }

    local clampedStats = UnitStats.clampStats(invalidStats)
    lust.assert(clampedStats.health >= 0, "Health should be clamped to minimum")
    lust.assert(clampedStats.accuracy <= 100, "Accuracy should be clamped to maximum")
  end)
end)

test('UnitSystem Integration Tests', function()
  test('Unit creation through system', function()
    local unitSystem = UnitSystem:new()

    -- Mock data loading
    unitSystem.unitClasses = {
      scout = {
        id = "scout",
        name = "Scout",
        base_stats = { health = 75, stamina = 90 }
      }
    }

    local unit = unitSystem:createUnit("TestSoldier", "scout")
    lust.assert(unit, "Unit should be created through system")
    lust.assert(unit.name == "TestSoldier", "Unit name should be set")
    lust.assert(unit.class.id == "scout", "Unit class should be assigned")
  end)

  test('Unit promotion system', function()
    local unitSystem = UnitSystem:new()

    local unit = {
      class = { id = "scout" },
      rank = 1,
      experience = 1000
    }

    unitSystem.unitClasses = {
      scout = {
        id = "scout",
        promotion_paths = { sniper = true }
      },
      sniper = {
        id = "sniper",
        name = "Sniper"
      }
    }

    local promoted = unitSystem:promoteUnit(unit, "sniper")
    lust.assert(promoted, "Unit should be promoted")
    lust.assert(unit.class.id == "sniper", "Unit class should change")
  end)

  test('Medal awarding system', function()
    local unitSystem = UnitSystem:new()

    local unit = {
      stats = { kills = 15, missions = 8 },
      medals = {}
    }

    unitSystem.medals = {
      combat_infantry_badge = {
        id = "combat_infantry_badge",
        requirements = { missions = 5, kills = 10 }
      }
    }

    unitSystem:checkAndAwardMedals(unit)
    lust.assert(unit.medals.combat_infantry_badge, "Unit should receive combat infantry badge")
  end)
end)

test('UnitManager Tests', function()
  test('Base assignment and capacity', function()
    local unitManager = UnitManager:new()

    local base = { id = "base1", capacity = 10, units = {} }
    local unit = { id = "unit1", name = "TestUnit" }

    local assigned = unitManager:assignToBase(unit, base)
    lust.assert(assigned, "Unit should be assigned to base")
    lust.assert(base.units[unit.id], "Unit should be in base units list")
  end)

  test('Unit transfer logistics', function()
    local unitManager = UnitManager:new()

    local fromBase = { id = "base1", units = { unit1 = { id = "unit1" } } }
    local toBase = { id = "base2", capacity = 5, units = {} }
    local unit = { id = "unit1" }

    unitManager:transferUnit(unit, fromBase, toBase)
    lust.assert(not fromBase.units.unit1, "Unit should be removed from source base")
    lust.assert(toBase.units.unit1, "Unit should be added to destination base")
  end)

  test('Mission availability filtering', function()
    local unitManager = UnitManager:new()

    local units = {
      { id = "u1", stats = { health = 80 }, isOperational = function() return true end },
      { id = "u2", stats = { health = 20 }, isOperational = function() return false end },
      { id = "u3", stats = { health = 90 }, isOperational = function() return true end }
    }

    local available = unitManager:getAvailableUnitsForMission(units)
    lust.assert(#available == 2, "Should return only operational units")
  end)
end)

test('UnitService Integration Tests', function()
  test('Service initialization and registration', function()
    local unitService = UnitService:new()

    lust.assert(unitService.unitSystem, "Unit system should be initialized")
    lust.assert(unitService.unitManager, "Unit manager should be initialized")
  end)

  test('Complete unit lifecycle through service', function()
    local unitService = UnitService:new()

    -- Mock data
    unitService.unitSystem.unitClasses = {
      assault = {
        id = "assault",
        name = "Assault",
        base_stats = { health = 90, strength = 60 }
      }
    }

    local unit = unitService:createUnit("TestSoldier", "assault")
    lust.assert(unit, "Unit should be created through service")

    local status = unitService:getUnitStatus(unit.id)
    lust.assert(status, "Should be able to get unit status")

    local effectiveStats = unitService:calculateEffectiveStats(unit)
    lust.assert(effectiveStats.health, "Should calculate effective stats")
  end)

  test('Mission assignment workflow', function()
    local unitService = UnitService:new()

    local unit = {
      id = "test_unit",
      stats = { health = 80 },
      isOperational = function() return true end,
      assignToMission = function(self, mission) self.currentMission = mission end
    }

    local mission = { id = "test_mission", type = "recon" }

    local assigned = unitService:assignUnitToMission(unit.id, mission)
    lust.assert(assigned, "Unit should be assigned to mission")
    lust.assert(unit.currentMission.id == "test_mission", "Unit should have mission assigned")
  end)
end)

lust.run()