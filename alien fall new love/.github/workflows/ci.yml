name: Alien Fall CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        love-version: ['11.5']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Love2D (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository ppa:bartbes/love-stable -y
          sudo apt-get update
          sudo apt-get install love -y
          love --version
      
      - name: Setup Love2D (Windows)
        if: runner.os == 'Windows'
        run: |
          # Download Love2D for Windows
          Invoke-WebRequest -Uri "https://github.com/love2d/love/releases/download/11.5/love-11.5-win64.zip" -OutFile "love.zip"
          Expand-Archive -Path "love.zip" -DestinationPath "love2d"
          echo "$env:GITHUB_WORKSPACE\love2d\love-11.5-win64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Setup Love2D (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install love
          love --version
      
      - name: Run Lua Tests (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          love . --test
        continue-on-error: false
      
      - name: Run Lua Tests (Windows)
        if: runner.os == 'Windows'
        run: |
          .\love2d\love-11.5-win64\lovec.exe . --test
        continue-on-error: false
      
      - name: Generate Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Test Results (${{ matrix.os }})
          path: 'test-results/*.xml'
          reporter: java-junit
          fail-on-error: true
        continue-on-error: true
  
  lint:
    name: Lua Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"
      
      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4
      
      - name: Install luacheck
        run: |
          luarocks install luacheck
      
      - name: Run luacheck
        run: |
          luacheck src/ --std max --globals love --no-unused-args
        continue-on-error: true
  
  style-check:
    name: Code Style Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -r "TODO\|FIXME" src/ || echo "No TODO/FIXME found"
      
      - name: Check line endings
        run: |
          echo "Checking for CRLF line endings..."
          find src/ -type f -name "*.lua" -exec file {} \; | grep CRLF && exit 1 || echo "All files use LF"
        continue-on-error: true
      
      - name: Check file structure
        run: |
          echo "Validating file structure..."
          test -d src/core && echo "✓ src/core exists"
          test -d src/systems && echo "✓ src/systems exists"
          test -d src/widgets && echo "✓ src/widgets exists"
          test -d test && echo "✓ test directory exists"
  
  build:
    name: Build Love Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create .love package
        run: |
          zip -r AlienFall.love . -x "*.git*" "test/*" "docs/*" ".github/*" "*.md"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: AlienFall-${{ github.sha }}
          path: AlienFall.love
          retention-days: 30
  
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"
      
      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4
      
      - name: Install LuaCov
        run: |
          luarocks install luacov
      
      - name: Generate coverage report
        run: |
          # This would run tests with coverage enabled
          echo "Coverage analysis placeholder"
          # luacov would generate luacov.report.out
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./luacov.report.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential secrets..."
          grep -r "password\|secret\|api_key" src/ --exclude-dir=test || echo "No obvious secrets found"
        continue-on-error: true
      
      - name: Dependency audit
        run: |
          echo "Checking dependencies..."
          test -f "src/lib/middleclass.lua" && echo "✓ Middleclass present"
        continue-on-error: true
