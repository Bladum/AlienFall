# AlienFall Game API Schema
# Comprehensive TOML schema defining all game APIs, data structures, and configuration types
# This file serves as the authoritative specification for modding and game configuration

# =============================================================================
# CORE GAME CONFIGURATION
# =============================================================================

[engine]
version = "string"                    # Love2D version requirement, e.g. "11.5"

[engine.resolution]
width = "integer"                     # Internal width, e.g. 800
height = "integer"                    # Internal height, e.g. 600

[engine.window]
resizable = "boolean"                 # Window resizable, e.g. true
fullscreen = "boolean"                # Fullscreen mode, e.g. false

[engine.graphics]
vsync = "boolean"                     # Vertical sync, e.g. true
msaa = "integer"                      # MSAA level, e.g. 0

[engine.modules]
audio = "boolean"                     # Audio module, e.g. true
joystick = "boolean"                  # Joystick module, e.g. true
physics = "boolean"                   # Physics module, e.g. false

[game]
title = "string"                      # Game title, e.g. "AlienFall"
version = "string"                    # Game version, e.g. "0.1.0"
author = "string"                     # Game author
description = "string"                # Game description

[game.content]
units = "table"                       # Loaded unit definitions, e.g. {soldier = {...}}
items = "table"                       # Loaded item definitions, e.g. {rifle = {...}}
missions = "table"                    # Loaded mission templates, e.g. {recon = {...}}
world = "table"                       # World state data
player = "table"                      # Player state data

[game.mods]
loaded = "array[table]"               # Currently loaded mods, e.g. [{id = "mod1", version = "1.0"}]
available = "array[table]"            # Available mods from scan, e.g. [{id = "mod2", name = "Mod Two"}]
scan_paths = "array[string]"          # Mod scan directories, e.g. ["mods/"]

[game.state]
difficulty = "enum[easy,normal,hard]" # Current game difficulty
campaign_id = "string"                # Campaign identifier
save_slots = "integer"                # Available save slots

[mods]
enabled = "boolean"                   # Enable mod loading
path = "string"                       # Mods directory path, e.g. "mods"
auto_discovery = "boolean"            # Auto-scan for mods
dependency_resolution = "boolean"     # Resolve mod dependencies

[performance]
target_fps = "integer"                # Target frame rate, e.g. 60
max_particles = "integer"             # Maximum particle effects, e.g. 1000
texture_memory_limit = "integer"      # MB texture memory limit, e.g. 256

# =============================================================================
# GAME BALANCE - XCOM/5 SCALING SYSTEM
# =============================================================================

[balance]
scaling_system = "XCOM/5"             # All values derived from original XCOM divided by 5

[balance.stat_ranges]
human_min = 6                         # Minimum human stat value (junior/recruit level)
human_max = 12                        # Maximum human stat value (master/elite level)
other_min = 4                         # Minimum for weak creatures/species
other_max = 20                        # Maximum for superhuman/alien entities
morale_start = 10                     # Starting morale for all units
bravery_min = 6                       # Minimum bravery (determines morale test success)
bravery_max = 12                      # Maximum bravery

[balance.energy_pools]
base_min = 6                          # Minimum base energy pool
base_max = 12                         # Maximum base energy pool
regen_min = 2                         # Minimum energy regeneration per turn
regen_max = 4                         # Maximum energy regeneration per turn
regen_formula = "base_energy / 3"     # Regen calculation: base ÷ 3
no_ammo_system = true                 # No ammunition clips - unified energy pool

[balance.weapon_stats]
damage_pistol = 5                     # Pistol damage (XCOM 25 ÷ 5)
damage_rifle = 6                      # Rifle damage (XCOM 30 ÷ 5)
damage_grenade = 10                   # Grenade damage (XCOM 50 ÷ 5)
damage_heavy = 11                     # Heavy weapon damage (XCOM 55 ÷ 5)
range_short = 15                      # Short range in tiles (1 map block)
range_medium = 30                     # Medium range in tiles (2 map blocks)
range_long = 45                       # Long range in tiles (3 map blocks)
map_block_size = 15                   # 15 tiles = 1 map block for range calculations
ap_pistol = 1                         # Pistol action point cost
ap_rifle = 2                          # Rifle action point cost
ap_heavy = 3                          # Heavy weapon action point cost
ep_pistol = 1                         # Pistol energy point cost
ep_rifle = 2                          # Rifle energy point cost
ep_grenade = 4                        # Grenade energy point cost

[balance.armor_values]
coveralls = 1                         # Basic coveralls armor (XCOM 5 ÷ 5)
shield = 4                            # Shield armor bonus (weapon slot item)
light = 4                             # Light armor (XCOM 20 ÷ 5)
medium = 8                            # Medium armor (XCOM 40 ÷ 5)
heavy = 18                            # Heavy armor (XCOM 90 ÷ 5)
tank = 24                             # Tank/vehicle armor (XCOM 120 ÷ 5)

[balance.equipment_slots]
unit_weapon_slots = 2                 # Units have exactly 2 weapon slots
unit_armor_slots = 1                  # Units have exactly 1 armor slot
craft_weapon_slots = 2                # Crafts have up to 2 weapon slots
craft_addon_slots = 1                 # Crafts have up to 1 addon slot

[balance.physics]
explosion_bullets = 60                # Explosions fire 60 radial bullets
explosion_damage = 10                 # Base explosion damage (XCOM 50 ÷ 5)
explosion_dropoff = 2                 # Damage reduction per tile
explosion_radius = 5                  # Maximum explosion radius in tiles
use_box2d = true                      # Use Box2D physics engine
bullet_physics = true                 # Bullets as independent physics objects
beam_raytrace = true                  # Beam weapons use ray-trace

[balance.movement]
mp_rotation_90 = 1                    # Movement points for 90° rotation
mp_tile_normal = 2                    # Movement points for normal tile
mp_tile_diagonal = 3                  # Movement points for diagonal movement
mp_tile_rough = 4                     # Movement points for rough terrain
mp_tile_very_rough = 6                # Movement points for very rough terrain
mp_crouch_toggle = 4                  # Movement points to crouch/stand
ap_multiplier = 4                     # Speed × 4 = AP per turn (typical 24-48 AP)

[balance.ui_grid]
grid_size = 20                        # UI grid unit size in pixels
resolution_width = 800                # Internal resolution width (40 grid units)
resolution_height = 600               # Internal resolution height (30 grid units)
grid_alignment_required = true        # All UI elements must align to 20px grid

[balance.country_relations]
relation_min = 0                      # Minimum country relation score
relation_max = 10                     # Maximum country relation score
relation_change_monthly = 1           # Monthly change magnitude (±1)
funding_formula = "relation × economy × 1000"  # Monthly funding calculation

# =============================================================================
# MOD SYSTEM API
# =============================================================================

[mod]
id = "string"                         # Unique mod identifier, e.g. "example_mod"
name = "string"                       # Display name, e.g. "Example Mod"
version = "string"                    # Semantic version, e.g. "1.0.0"
author = "string"                     # Author name
description = "string"                # Short description
compatibility = "string"              # Compatible game versions, e.g. "0.1.0 - 0.1.99"
url = "string"                        # Mod homepage URL (optional)
license = "string"                    # License type (optional)
tags = "array[string]"                # Categorization tags, e.g. ["weapons", "units", "ui"]
load_priority = "integer"             # Loading order (higher = later), e.g. 100
enabled = "boolean"                   # Mod enabled by default, e.g. true

[dependencies]
required = "table[string]string"      # Required mods with version constraints, e.g. {core = ">= 0.1.0"}
optional = "table[string]string"      # Optional mods with version constraints, e.g. {ui_mod = ">= 1.0.0"}

[content]
unit_class = "array[string]"          # Unit class template files, e.g. ["data/units/unit_class.toml"]
unit_levels = "array[string]"         # Unit level progression files, e.g. ["data/units/unit_levels.toml"]
craft_class = "array[string]"         # Craft class template files, e.g. ["data/crafts/craft_class.toml"]
craft_levels = "array[string]"        # Craft level progression files, e.g. ["data/crafts/craft_levels.toml"]
items = "array[string]"               # Generic item definition files, e.g. ["data/items/items.toml"]
item_unit = "array[string]"           # Unit equipment item files, e.g. ["data/items/item_unit.toml"]
item_craft = "array[string]"          # Craft equipment item files, e.g. ["data/items/item_craft.toml"]
item_lore = "array[string]"           # Lore/story item files, e.g. ["data/items/item_lore.toml"]
item_resource = "array[string]"       # Resource/material item files, e.g. ["data/items/item_resource.toml"]
purchase_entries = "array[string]"    # Marketplace purchase entries, e.g. ["data/marketplace/purchase_entries.toml"]
suppliers = "array[string]"           # Supplier definitions, e.g. ["data/marketplace/suppliers.toml"]
missions = "array[string]"            # Mission template files, e.g. ["data/missions/missions.toml"]
mission_ufo = "array[string]"         # UFO mission template files, e.g. ["data/missions/ufo.toml"]
mission_site = "array[string]"        # Site mission template files, e.g. ["data/missions/site.toml"]
mission_alien_base = "array[string]"  # Alien base mission template files, e.g. ["data/missions/alien_base.toml"]
facilities = "array[string]"          # Base facility files, e.g. ["data/facilities/facilities.toml"]
base_services = "array[string]"       # Base service definition files, e.g. ["data/services/base_services.toml"]
research = "array[string]"            # Research project files, e.g. ["data/research/research.toml"]
recipes = "array[string]"             # Manufacturing recipe files, e.g. ["config/recipes.toml"]
world = "array[string]"               # World/geography data files, e.g. ["config/world.toml"]
regions = "array[string]"             # Region definition files, e.g. ["data/world/regions.toml"]
provinces = "array[string]"           # Province definition files, e.g. ["data/world/provinces.toml"]
countries = "array[string]"           # Country definition files, e.g. ["data/world/countries.toml"]
biomes = "array[string]"              # Biome definition files, e.g. ["data/world/biomes.toml"]
terrains = "array[string]"            # Terrain definition files, e.g. ["data/world/terrains.toml"]
map_blocks = "array[string]"          # Map block definition files, e.g. ["data/world/map_blocks.toml"]
map_script = "array[string]"          # Map script definition files, e.g. ["data/world/map_script.toml"]
factions = "array[string]"            # Faction definition files, e.g. ["data/factions/factions.toml"]
campaigns = "array[string]"           # Campaign definition files, e.g. ["data/campaigns/campaigns.toml"]
races = "array[string]"               # Race definition files, e.g. ["data/races/race.toml"]
events = "array[string]"              # Event definition files, e.g. ["config/events.toml"]
ui_config = "array[string]"           # UI configuration files, e.g. ["config/ui_config.toml"]
assets = "array[string]"              # Asset definition files, e.g. ["config/assets.toml"]
logging = "array[string]"             # Logging configuration files, e.g. ["config/logging.toml"]
save_config = "array[string]"         # Save/load configuration files, e.g. ["config/save_config.toml"]
audio = "array[string]"               # Audio asset directories, e.g. ["assets/audio/"]
graphics = "array[string]"            # Graphic asset directories, e.g. ["assets/graphics/"]
scripts = "array[string]"             # Lua script directories, e.g. ["scripts/"]
localization = "array[string]"        # Translation directories, e.g. ["locale/"]

[catalogs]
missions = "table"                    # Mission definitions, e.g. {tutorial = {...}}
facilities = "table"                  # Facility definitions, e.g. {command_center = {...}}

[hooks]
init = "function"                     # Initialization hook, called when mod loads
pre_load = "function"                 # Pre-load hook, called before mod content loads
post_load = "function"                # Post-load hook, called after mod content loads

[mod_structure]
required = "array[string]"            # Required files, e.g. ["mod.toml"]
data = "array[string]"                # Game data directories, e.g. ["data/"]
assets = "array[string]"              # Media asset directories, e.g. ["assets/"]
scripts = "array[string]"             # Lua script directories, e.g. ["scripts/"]
locale = "array[string]"              # Localization directories, e.g. ["locale/"]
docs = "array[string]"                # Documentation directories, e.g. ["docs/"]

[mod_system.catalog_merger]
enabled = "boolean"                   # Enable catalog merging, e.g. true
deep_merge = "boolean"                # Use deep merge strategy, e.g. true

[mod_system.hook_runner]
enabled = "boolean"                   # Enable hook execution, e.g. true
error_handling = "boolean"            # Handle hook errors, e.g. true

[mod_system.validator]
enabled = "boolean"                   # Enable mod validation, e.g. true
strict_mode = "boolean"               # Use strict validation, e.g. false

[mod_system.hooks]
pre_load = "array[string]"              # Pre-load hooks, e.g. ["validate_dependencies", "check_compatibility"]
post_load = "array[string]"             # Post-load hooks, e.g. ["register_content", "apply_patches"]
game_start = "array[string]"            # Game start hooks, e.g. ["initialize_mod_data", "setup_event_handlers"]
game_shutdown = "array[string]"         # Game shutdown hooks, e.g. ["cleanup_resources", "save_mod_state"]

[mod_system.validation]
required_fields = "array[string]"       # Required mod.toml fields, e.g. ["id", "name", "version"]
version_format = "string"               # Version format pattern, e.g. "^\\d+\\.\\d+\\.\\d+$"
dependency_resolution = "enum[strict,lax,ignore]"  # Dependency handling, e.g. "strict"

[mod_system.catalog_merge]
array_strategy = "enum[append,replace,merge]"     # Array merging strategy, e.g. "append"
table_strategy = "enum[deep_merge,shallow_merge,replace]"  # Table merging strategy, e.g. "deep_merge"
conflict_resolution = "enum[mod_wins,base_wins,error]"    # Merge conflict handling, e.g. "mod_wins"

# =============================================================================
# DATA CATALOGS API
# =============================================================================

# Unit Definitions
[[units]]
id = "string"                         # Unique unit identifier, e.g. "soldier"
name = "string"                       # Display name, e.g. "Soldier"
class = "enum[scout,assault,support,heavy,psi]"  # Unit class
race = "string"                       # Unit race/origin, e.g. "human"

[units.stats]
health = "integer"                    # Maximum health, e.g. 100
stamina = "integer"                   # Stamina pool, e.g. 80
accuracy = "integer"                  # Base accuracy percentage, e.g. 65
reflexes = "integer"                  # Reaction speed, e.g. 60
strength = "integer"                  # Physical strength, e.g. 50
mind = "integer"                      # Mental resilience, e.g. 45
morale = "integer"                    # Morale level (0-100), e.g. 75

[units.combat]
ap_max = "integer"                    # Maximum action points, e.g. 12
ep_max = "integer"                    # Maximum energy points, e.g. 6
energy_max = "integer"                # Energy pool (psi units), e.g. 0
armor = "integer"                     # Base armor value, e.g. 0
mobility = "integer"                  # Movement speed, e.g. 15

[units.progression]
experience = "integer"                # Current experience, e.g. 0
rank = "string"                       # Current rank, e.g. "rookie"
level = "integer"                     # Unit level, e.g. 1

[units.equipment]
primary_weapon = "string"             # Primary weapon slot, e.g. ""
secondary_weapon = "string"          # Secondary weapon slot, e.g. ""
armor = "string"                     # Armor slot, e.g. ""
utility = "array[string]"            # Utility item slots, e.g. ["", "", ""]

[units.traits]
positive = "array[string]"            # Positive traits, e.g. ["tough"]
negative = "array[string]"            # Negative traits, e.g. []

[units.abilities]
combat = "array[string]"              # Combat abilities, e.g. ["shoot", "hunker"]
passive = "array[string]"             # Passive abilities, e.g. ["armor_mitigation"]

[units.metadata]
cost = "integer"                      # Recruitment cost, e.g. 20000
salary = "integer"                    # Monthly salary, e.g. 1200
training_time = "integer"             # Training days, e.g. 30
tags = "array[string]"                # Categorization tags, e.g. ["human", "military"]

# Unit Profiles (from ideas file)
# Standard Unit: 6 Health, 6 Energy / 2 Energy Regen per turn
# Elite Unit: 12 Health, 12 Energy / 4 Energy Regen per turn

# Item Definitions - Weapons
[[weapons]]
id = "string"                         # Unique weapon identifier, e.g. "rifle"
name = "string"                       # Display name, e.g. "Assault Rifle"
class = "string"                      # Weapon class, e.g. "rifle"
type = "enum[kinetic,energy,plasma,chemical,psionic]"  # Damage type

[weapons.stats]
damage = "integer"                    # Base damage, e.g. 35
accuracy = "integer"                  # Base accuracy, e.g. 75
ap_cost = "integer"                   # Action point cost, e.g. 4
ep_cost = "integer"                   # Energy point cost, e.g. 2

[weapons.stats.range]
min = "integer"                       # Minimum range, e.g. 4
max = "integer"                       # Maximum range, e.g. 24

ammo_capacity = "integer"             # Magazine size, e.g. 30
weight = "integer"                    # Encumbrance weight, e.g. 3

[weapons.damage]
base_damage = "integer"               # Base damage value, e.g. 35
damage_spread = "integer"             # Damage variance, e.g. 5
critical_multiplier = "float"         # Critical hit multiplier, e.g. 1.5
armor_pierce = "integer"              # Armor piercing value, e.g. 0

[weapons.range_bands.close]
range = "string"                      # Range description, e.g. "4-8"
modifier = "float"                    # Accuracy modifier, e.g. 1.0

[weapons.range_bands.medium]
range = "string"                      # Range description, e.g. "9-16"
modifier = "float"                    # Accuracy modifier, e.g. 0.9

[weapons.range_bands.long]
range = "string"                      # Range description, e.g. "17-24"
modifier = "float"                    # Accuracy modifier, e.g. 0.7

[weapons.properties]
two_handed = "boolean"                # Requires both hands, e.g. true
burst_fire = "boolean"                # Supports burst fire, e.g. true
suppressive = "boolean"               # Can suppress enemies, e.g. true

[weapons.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 1500
research_required = "string"          # Required research, e.g. "rifle_tech"
tags = "array[string]"                # Categorization tags, e.g. ["rifle", "kinetic", "military"]

# Example Weapons (from ideas file)
# Light Weapons
# Pistol: 1 AP / 1 EP / 5 DMG / 60% ACC / 15 RNG / +5 EP / SNAP FIRE
# Rifle: 2 AP / 2 EP / 6 DMG / 80% ACC / 30 RNG / +15 EP / SNAP AUTO AIM

# Melee Weapons  
# Knife: 1 AP / 0 EP / 4 DMG / 50% ACC / 1 RNG / 0 EP / SNAP
# Sword: 2 AP / 0 EP / 8 DMG / 40% ACC / 1 RNG / 0 EP / SNAP

# Heavy Weapons
# Sniper Rifle: 3 AP / 2 EP / 7 DMG / 90% ACC / 40 RNG / +10 EP / SNAP AIM
# Shotgun: 2 AP / 3 EP / 5x3 DMG / 30% ACC / 10 RNG / +10 EP / SNAP
# Auto Cannon: 3 AP / 4 EP / 8 DMG / 50% ACC / 25 RNG / +20 EP / SNAP AUTO

# Throwable Weapons
# Grenade: 2 AP / 2 EP / Cooldown 4 / 10 DMG / 50% ACC / 15 RNG / +0 EP / SNAP

# Item Definitions - Armor
[[armor]]
id = "string"                         # Unique armor identifier, e.g. "combat_armor"
name = "string"                       # Display name, e.g. "Combat Armor"
class = "enum[light,medium,heavy,hazard,naval,underwater]"  # Armor class
type = "string"                       # Protection type, e.g. "ballistic"

[armor.stats]
defense = "integer"                   # Base defense value, e.g. 15
mobility_penalty = "integer"          # AP cost penalty, e.g. 2
weight = "integer"                    # Encumbrance weight, e.g. 8

[armor.resistance]
kinetic = "float"                     # Kinetic damage reduction, e.g. 0.3
energy = "float"                      # Energy damage reduction, e.g. 0.2
explosive = "float"                   # Explosive damage reduction, e.g. 0.1

[armor.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 2500
research_required = "string"          # Required research, e.g. "armor_tech"
tags = "array[string]"                # Categorization tags, e.g. ["armor", "medium", "military"]

# Mission Templates
[[missions]]
id = "string"                         # Unique mission identifier, e.g. "recon_mission"
name = "string"                       # Display name, e.g. "Reconnaissance"
type = "string"                       # Mission type, e.g. "recon"
difficulty = "enum[easy,medium,hard]" # Difficulty level

[missions.parameters]
duration = "integer"                  # Mission duration (hours), e.g. 24
max_squad_size = "integer"            # Maximum squad size, e.g. 4
objective = "string"                  # Primary objective, e.g. "gather_intel"

[missions.spawn]
elite_chance = "float"                # Elite enemy chance, e.g. 0.1
reinforcement_waves = "integer"       # Reinforcement waves, e.g. 1

[missions.spawn.enemy_count]
min = "integer"                       # Minimum enemies, e.g. 2
max = "integer"                       # Maximum enemies, e.g. 6

[missions.rewards]
experience = "integer"                # XP reward per soldier, e.g. 50
credits = "integer"                   # Credit reward, e.g. 15000
resources = "table[string]integer"    # Resource rewards, e.g. {alloys = 5}

[missions.map]
biomes = "array[string]"              # Compatible biomes, e.g. ["urban", "suburban"]
size = "enum[small,medium,large]"     # Map size preference
tags = "array[string]"                # Map tags, e.g. ["outdoor", "daytime"]

[missions.metadata]
weight = "integer"                    # Spawn weight, e.g. 100
tags = "array[string]"                # Categorization tags, e.g. ["recon", "easy", "urban"]
unlock_requirements = "array[string]" # Research requirements, e.g. []

# Base Facilities
[[facilities]]
id = "string"                         # Unique facility identifier, e.g. "barracks"
name = "string"                       # Display name, e.g. "Barracks"
type = "string"                       # Facility type, e.g. "housing"

[facilities.size]
width = "integer"                     # Grid width, e.g. 2
height = "integer"                    # Grid height, e.g. 2

[facilities.construction]
cost = "integer"                      # Construction cost, e.g. 1000
build_time = "integer"                # Build time (days), e.g. 7
power_consumption = "integer"         # Power requirement, e.g. 2

[facilities.function]
capacity = "integer"                  # Soldier capacity, e.g. 20
maintenance_cost = "integer"          # Monthly maintenance, e.g. 500
efficiency = "float"                  # Operational efficiency, e.g. 1.0

[facilities.effects]
recruitment_bonus = "float"           # Recruitment speed bonus, e.g. 0.1
training_bonus = "float"              # Training speed bonus, e.g. 0.05

[facilities.requirements]
research = "array[string]"            # Required research, e.g. ["barracks_tech"]
prerequisites = "array[string]"       # Required facilities, e.g. []

[facilities.metadata]
category = "string"                   # Facility category, e.g. "infrastructure"
tags = "array[string]"                # Categorization tags, e.g. ["housing", "military", "infrastructure"]

# Research Entries
[[research]]
id = "string"                         # Unique research identifier, e.g. "rifle_tech"
name = "string"                       # Display name, e.g. "Rifle Technology"
category = "string"                   # Research category, e.g. "unit_items"

[research.parameters]
cost = "integer"                      # Research point cost, e.g. 100
time_days = "integer"                 # Research time (days), e.g. 5
required_lab_level = "integer"        # Minimum lab level, e.g. 1

[research.prerequisites]
research = "array[string]"            # Required research, e.g. ["basic_ballistics"]
facilities = "array[string]"          # Required facilities, e.g. ["lab"]

[research.unlocks]
items = "array[string]"               # Unlocked items, e.g. ["rifle", "rifle_ammo"]
facilities = "array[string]"          # Unlocked facilities, e.g. []
technologies = "array[string]"        # Unlocked technologies, e.g. ["rifle_manufacture"]

[research.metadata]
tier = "integer"                      # Research tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["weapons", "kinetic", "military"]

# Battle System - Damage Types
[[damage_type]]
id = "string"                         # Unique damage type identifier, e.g. "kinetic"
name = "string"                       # Display name, e.g. "Kinetic"
description = "string"                # Description of the damage type
category = "enum[physical,energy,chemical,psionic]"  # Damage category

[damage_type.characteristics]
armor_interaction = "enum[strong,moderate,weak,bypass]"  # How damage interacts with armor
area_effect = "boolean"                # Whether damage affects an area, e.g. true
secondary_effects = "array[string]"    # Secondary effects, e.g. ["blast_radius", "shrapnel"]
bypass_armor = "boolean"               # Whether damage bypasses armor, e.g. false

[damage_type.default_multipliers]
health = "integer"                    # Health damage multiplier (percentage), e.g. 100
stun = "integer"                      # Stun damage multiplier (percentage), e.g. 0
morale = "integer"                    # Morale damage multiplier (percentage), e.g. 0
energy = "integer"                    # Energy damage multiplier (percentage), e.g. 0
action_points = "integer"             # Action point damage multiplier (percentage), e.g. 0

# Battle System - Damage Models
[[damage_model]]
id = "string"                         # Unique damage model identifier, e.g. "direct_damage"
name = "string"                       # Display name, e.g. "Direct Damage"
description = "string"                # Description of the damage model
distribution_type = "enum[direct,balanced,lethal,disabling,energy_drain,psychological,armor_piercing,area_effect,critical,status_effect,overflow]"  # Distribution method

[damage_model.parameters]
health_weight = "float"               # Weight for health distribution, e.g. 1.0
stun_weight = "float"                 # Weight for stun distribution, e.g. 0.0
morale_weight = "float"               # Weight for morale distribution, e.g. 0.0
energy_weight = "float"               # Weight for energy distribution, e.g. 0.0
action_weight = "float"               # Weight for action point distribution, e.g. 0.0
overflow_handling = "enum[cap,redistribute,carry_over]"  # How to handle stat overflow

[damage_model.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["combat", "damage"]

# Battle System - Weapon Modes
[[weapon_mode]]
id = "string"                         # Unique weapon mode identifier, e.g. "snap_shot"
name = "string"                       # Display name, e.g. "Snap Shot"
description = "string"                # Description of the firing mode
category = "enum[single_shot,burst,auto,precision,suppressive,overwatch,called_shot,rapid,charged]"  # Mode category

[weapon_mode.multipliers]
ap_cost = "integer"                   # Action point cost multiplier (percentage), e.g. 100
energy_cost = "integer"               # Energy cost multiplier (percentage), e.g. 100
range = "integer"                     # Range multiplier (percentage), e.g. 100
accuracy = "integer"                  # Accuracy multiplier (percentage), e.g. 100
damage = "integer"                    # Damage multiplier (percentage), e.g. 100
shots = "integer"                     # Number of shots fired, e.g. 1

[weapon_mode.requirements]
research = "array[string]"            # Required research, e.g. ["rifle_tech"]
equipment = "array[string]"           # Required equipment, e.g. []
class_restrictions = "array[string]"  # Restricted to specific classes, e.g. []
weapon_tags = "array[string]"         # Required weapon tags, e.g. ["rifle"]

[weapon_mode.energy_model]
type = "enum[per_shot,total,burst]"   # Energy consumption type
preview_total = "boolean"             # Whether to preview total energy cost, e.g. true

# Battle System - Map Blocks
[[map_blocks]]
id = "string"                         # Unique map block identifier, e.g. "urban_block"
name = "string"                       # Display name, e.g. "Urban Block"
type = "enum[building,street,open,forest,hill,water]"  # Block type
size = "array[integer]"               # Block dimensions [width, height], e.g. [3, 3]

[map_blocks.terrain]
movement_cost = "integer"             # AP cost to move through, e.g. 4
cover_type = "enum[none,low,high,full]"  # Cover provided, e.g. "high"
elevation = "integer"                 # Height level, e.g. 0
blocks_los = "boolean"                # Blocks line of sight, e.g. true

[map_blocks.properties]
destructible = "boolean"              # Can be destroyed, e.g. true
flammable = "boolean"                 # Can catch fire, e.g. true
interactive = "boolean"               # Can be interacted with, e.g. false

[map_blocks.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["urban", "cover"]

# Battle System - Battle Tiles
[[battle_tile]]
id = "string"                         # Unique tile identifier, e.g. "floor_tile"
name = "string"                       # Display name, e.g. "Floor Tile"
type = "enum[floor,wall,door,window,object]"  # Tile type

[battle_tile.properties]
walkable = "boolean"                  # Can be walked on, e.g. true
blocks_movement = "boolean"           # Blocks movement, e.g. false
blocks_sight = "boolean"              # Blocks line of sight, e.g. false
cover_bonus = "integer"               # Cover bonus provided, e.g. 0
elevation = "integer"                 # Height level, e.g. 0

[battle_tile.interaction]
destructible = "boolean"              # Can be destroyed, e.g. false
interactive = "boolean"               # Can be interacted with, e.g. false
special_effects = "array[string]"     # Special effects, e.g. []

[battle_tile.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["indoor", "floor"]

# Battle System - Map Scripts
[[map_script]]
id = "string"                         # Unique script identifier, e.g. "ambush_script"
name = "string"                       # Display name, e.g. "Ambush Setup"
type = "enum[placement,objective,trigger,event]"  # Script type

[map_script.parameters]
trigger_condition = "string"          # When the script activates, e.g. "turn_start"
execution_phase = "enum[setup,combat,cleanup]"  # When script executes
priority = "integer"                  # Execution priority, e.g. 100

[map_script.actions]
type = "string"                       # Action type, e.g. "spawn_unit"
target = "string"                     # Target location/entity, e.g. "enemy_spawn"
parameters = "table"                  # Action parameters, e.g. {unit_id = "sectoid", count = 3}

[map_script.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["combat", "ai"]

# Battle System - Objectives
[[objectives]]
id = "string"                         # Unique objective identifier, e.g. "eliminate_hostiles"
name = "string"                       # Display name, e.g. "Eliminate Hostiles"
type = "enum[primary,secondary,bonus,hidden]"  # Objective type

[objectives.parameters]
description = "string"                # Objective description
completion_condition = "string"       # How to complete, e.g. "kill_all_enemies"
time_limit = "integer"                # Time limit in turns, e.g. 20
failure_condition = "string"          # Failure condition, e.g. "civilian_casualties > 0"

[objectives.rewards]
experience = "integer"                # XP reward, e.g. 100
credits = "integer"                   # Credit reward, e.g. 5000
items = "array[string]"               # Item rewards, e.g. ["alien_alloy"]
research = "array[string]"            # Research unlocks, e.g. ["sectoid_autopsy"]

[objectives.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["combat", "mission"]

# Battle System - Terrains
[[terrains]]
id = "string"                         # Unique terrain identifier, e.g. "grass"
name = "string"                       # Display name, e.g. "Grass"
type = "enum[ground,water,obstacle,building]"  # Terrain type

[terrains.properties]
movement_cost = "integer"             # AP cost to move through, e.g. 4
cover_bonus = "integer"               # Cover bonus provided, e.g. 10
elevation = "integer"                 # Height level, e.g. 0
blocks_sight = "boolean"              # Blocks line of sight, e.g. false

[terrains.effects]
on_enter = "array[string]"            # Effects when entering, e.g. ["slow_movement"]
on_exit = "array[string]"             # Effects when exiting, e.g. []
continuous = "array[string]"          # Continuous effects, e.g. ["camouflage"]

[terrains.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["outdoor", "cover"]

# Craft System - Craft Classes
[[craft_class]]
id = "string"                         # Unique craft identifier, e.g. "interceptor"
name = "string"                       # Display name, e.g. "Interceptor"
type = "enum[fighter,bomber,transport,scout]"  # Craft type

[craft_class.stats]
hull = "integer"                      # Maximum hull points, e.g. 100
speed = "integer"                     # Movement speed, e.g. 15
range = "integer"                     # Operational range, e.g. 800
fuel_capacity = "integer"             # Fuel capacity, e.g. 100

[craft_class.capacity]
weapon_slots = "integer"              # Number of weapon slots, e.g. 2
addon_slots = "integer"               # Number of addon slots, e.g. 1
unit_capacity = "integer"             # Unit transport capacity, e.g. 0

[craft_class.requirements]
research = "array[string]"            # Required research, e.g. ["aerospace_tech"]
facilities = "array[string]"          # Required facilities, e.g. ["hangar"]

[craft_class.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 15000
tags = "array[string]"                # Categorization tags, e.g. ["aircraft", "fighter"]

# Craft System - Craft Levels
[[craft_levels]]
id = "string"                         # Unique level identifier, e.g. "interceptor_mk1"
name = "string"                       # Display name, e.g. "Interceptor Mk I"
craft_class = "string"                # Parent craft class, e.g. "interceptor"
level = "integer"                     # Level number, e.g. 1

[craft_levels.stats]
hull_bonus = "integer"                # Hull bonus, e.g. 20
speed_bonus = "integer"               # Speed bonus, e.g. 2
range_bonus = "integer"               # Range bonus, e.g. 100

[craft_levels.abilities]
unlocks = "array[string]"             # Unlocked abilities, e.g. ["afterburner"]
enhancements = "array[string]"        # Enhanced systems, e.g. ["targeting_computer"]

[craft_levels.requirements]
research = "array[string]"            # Required research, e.g. ["advanced_aerospace"]
experience = "integer"                # Required experience, e.g. 1000

[craft_levels.metadata]
cost = "integer"                      # Upgrade cost, e.g. 8000
tags = "array[string]"                # Categorization tags, e.g. ["upgrade", "fighter"]

# Economy System - Purchase Entries
[[purchase_entry]]
id = "string"                         # Unique purchase identifier, e.g. "rifle_basic"
name = "string"                       # Display name, e.g. "Basic Rifle"
type = "enum[weapon,armor,equipment,craft,unit]"  # Item type
category = "string"                   # Item category, e.g. "small_arms"

[purchase_entry.cost]
credits = "integer"                   # Credit cost, e.g. 500
resources = "table[string]integer"    # Resource requirements, e.g. {alloys = 2}

[purchase_entry.requirements]
suppliers = "array[string]"           # Required suppliers, e.g. ["arms_dealer"]
tech_level = "integer"                # Required tech level, e.g. 1

[purchase_entry.stats]
damage = "integer"                    # Damage value (weapons), e.g. 25
accuracy = "integer"                  # Accuracy value (weapons), e.g. 70
defense = "integer"                   # Defense value (armor), e.g. 15
capacity = "integer"                  # Capacity value (craft), e.g. 4

[purchase_entry.description]
short = "string"                      # Short description, e.g. "Standard issue assault rifle"
long = "string"                       # Detailed description

# Economy System - Suppliers
[[suppliers]]
id = "string"                         # Unique supplier identifier, e.g. "arms_dealer"
name = "string"                       # Display name, e.g. "Black Market Arms Dealer"
type = "enum[black_market,military,corporate,research,medical]"  # Supplier type

[suppliers.inventory]
categories = "array[string]"          # Product categories, e.g. ["weapons", "armor"]
stock_limit = "integer"               # Maximum stock items, e.g. 50
restock_rate = "integer"              # Items restocked per day, e.g. 5

[suppliers.relations]
initial_standing = "integer"          # Starting relationship, e.g. 0
max_standing = "integer"              # Maximum relationship, e.g. 100
decay_rate = "float"                  # Relationship decay per day, e.g. 0.1

[suppliers.requirements]
access_level = "integer"              # Required access level, e.g. 1
reputation_threshold = "integer"      # Required reputation, e.g. 10

[suppliers.metadata]
location = "string"                   # Supplier location, e.g. "underground"
tags = "array[string]"                # Categorization tags, e.g. ["black_market", "weapons"]

# Economy System - Base Facilities
[[base_facilities]]
id = "string"                         # Unique facility identifier, e.g. "hangar"
name = "string"                       # Display name, e.g. "Hangar"
category = "enum[aircraft,infrastructure,research,production,living,defense]"  # Facility category

[base_facilities.stats]
size = "array[integer]"               # Facility dimensions [width, height], e.g. [2, 2]
power_consumption = "integer"         # Power usage, e.g. 10
maintenance_cost = "integer"          # Monthly maintenance, e.g. 500
build_time = "integer"                # Construction time (days), e.g. 7

[base_facilities.capacity]
personnel = "integer"                 # Personnel capacity, e.g. 4
equipment = "integer"                 # Equipment capacity, e.g. 2
production = "integer"                # Production capacity, e.g. 1

[base_facilities.services]
provides = "array[string]"            # Services provided, e.g. ["aircraft_storage"]
requires = "array[string]"            # Services required, e.g. ["power"]

[base_facilities.requirements]
research = "array[string]"            # Required research, e.g. ["aerospace_tech"]
prerequisites = "array[string]"       # Required facilities, e.g. []

[base_facilities.metadata]
cost = "integer"                      # Construction cost, e.g. 15000
tags = "array[string]"                # Categorization tags, e.g. ["aircraft", "infrastructure"]

# Economy System - Base Services
[[base_services]]
id = "string"                         # Unique service identifier, e.g. "power_generator"
name = "string"                       # Display name, e.g. "Power Generator"
type = "enum[power,life_support,security,research,production,medical]"  # Service type

[base_services.stats]
capacity = "integer"                  # Service capacity, e.g. 100
efficiency = "float"                  # Service efficiency, e.g. 1.0
maintenance_cost = "integer"          # Monthly maintenance, e.g. 200
power_consumption = "integer"         # Power usage (if applicable), e.g. 0

[base_services.effects]
global = "table[string]float"         # Global effects, e.g. {research_speed = 1.1}
local = "table[string]float"          # Local effects, e.g. {production_efficiency = 1.2}

[base_services.requirements]
facilities = "array[string]"          # Required facilities, e.g. ["power_plant"]
personnel = "integer"                 # Required personnel, e.g. 2

[base_services.metadata]
tier = "integer"                      # Service tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["infrastructure", "power"]

# Economy System - Manufacturing Recipes
[[manufacturing_entry]]
id = "string"                         # Unique manufacturing identifier, e.g. "rifle_production"
name = "string"                       # Display name, e.g. "Rifle Production"
category = "enum[weapons,armor,craft,equipment]"  # Manufacturing category

[manufacturing_entry.inputs]
materials = "table[string]integer"    # Required materials, e.g. {alloys = 5, electronics = 2}
time = "integer"                      # Production time (hours), e.g. 24
facility = "string"                   # Required facility, e.g. "workshop"

[manufacturing_entry.outputs]
item = "string"                       # Produced item, e.g. "rifle_basic"
quantity = "integer"                  # Quantity produced, e.g. 1
quality = "integer"                   # Item quality modifier, e.g. 0

[manufacturing_entry.requirements]
research = "array[string]"            # Required research, e.g. ["rifle_tech"]
tech_level = "integer"                # Required tech level, e.g. 1

[manufacturing_entry.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 1000
tags = "array[string]"                # Categorization tags, e.g. ["weapons", "production"]

# Economy System - Research Entries
[[research_entry]]
id = "string"                         # Unique research identifier, e.g. "rifle_tech"
name = "string"                       # Display name, e.g. "Rifle Technology"
category = "enum[weapons,armor,biology,engineering,psionics]"  # Research category

[research_entry.requirements]
prerequisites = "array[string]"       # Required research, e.g. ["basic_ballistics"]
scientists = "integer"                # Required scientists, e.g. 2
time = "integer"                      # Research time (hours), e.g. 48

[research_entry.costs]
credits = "integer"                   # Credit cost, e.g. 5000
resources = "table[string]integer"    # Resource costs, e.g. {alloys = 10}

[research_entry.unlocks]
items = "array[string]"               # Unlocked items, e.g. ["rifle_basic"]
facilities = "array[string]"          # Unlocked facilities, e.g. ["armory"]
abilities = "array[string]"           # Unlocked abilities, e.g. ["rifle_training"]

[research_entry.metadata]
tier = "integer"                      # Research tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["weapons", "technology"]

# Geography System - Universe
[[universe]]
id = "string"                         # Unique universe identifier, e.g. "earth_universe"
name = "string"                       # Display name, e.g. "Earth Universe"
description = "string"                # Universe description

[universe.properties]
scale = "float"                       # Universe scale multiplier, e.g. 1.0
time_acceleration = "float"           # Time acceleration factor, e.g. 1.0
difficulty_modifier = "float"         # Global difficulty modifier, e.g. 1.0

[universe.worlds]
primary = "string"                    # Primary world, e.g. "earth"
secondary = "array[string]"           # Secondary worlds, e.g. ["moon"]

[universe.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["earth", "modern"]

# Geography System - World
[[world]]
id = "string"                         # Unique world identifier, e.g. "earth"
name = "string"                       # Display name, e.g. "Earth"
type = "enum[planet,moon,asteroid,space_station]"  # World type

[world.physical]
radius = "integer"                    # World radius (km), e.g. 6371
gravity = "float"                     # Surface gravity, e.g. 1.0
atmosphere = "boolean"                # Has atmosphere, e.g. true

[world.political]
population = "integer"                # Total population, e.g. 8000000000
nations = "integer"                   # Number of nations, e.g. 195
stability = "integer"                 # Global stability 0-100, e.g. 70

[world.alien_presence]
invasion_level = "integer"            # Current invasion level 0-100, e.g. 15
portal_count = "integer"              # Active portals, e.g. 3

[world.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["earth", "habitable"]

# Item System - Craft Items
[[item_craft]]
id = "string"                         # Unique item identifier, e.g. "interceptor"
name = "string"                       # Display name, e.g. "Interceptor"
type = "enum[fighter,bomber,transport]"  # Craft type

[item_craft.stats]
hull = "integer"                      # Maximum hull, e.g. 100
speed = "integer"                     # Movement speed, e.g. 15
weapons = "integer"                   # Weapon slots, e.g. 2
cargo = "integer"                     # Cargo capacity, e.g. 4

[item_craft.requirements]
research = "array[string]"            # Required research, e.g. ["aerospace"]
facility = "string"                   # Required facility, e.g. "hangar"

[item_craft.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 15000
tags = "array[string]"                # Categorization tags, e.g. ["aircraft", "fighter"]

# Item System - Lore Items
[[item_lore]]
id = "string"                         # Unique item identifier, e.g. "alien_artifact"
name = "string"                       # Display name, e.g. "Alien Artifact"
description = "string"                # Item description

[item_lore.properties]
rarity = "enum[common,uncommon,rare,epic,legendary]"  # Item rarity
value = "integer"                     # Research value, e.g. 1000
weight = "float"                      # Item weight, e.g. 2.5

[item_lore.effects]
research_bonus = "integer"            # Research speed bonus, e.g. 20
morale_bonus = "integer"              # Morale bonus, e.g. 5

[item_lore.metadata]
origin = "string"                     # Item origin, e.g. "sectoid_relic"
tags = "array[string]"                # Categorization tags, e.g. ["artifact", "alien"]

# Item System - Prisoner Items
[[item_prisoner]]
id = "string"                         # Unique prisoner identifier, e.g. "sectoid_leader"
name = "string"                       # Display name, e.g. "Sectoid Leader"
race = "string"                       # Prisoner race, e.g. "sectoid"

[item_prisoner.stats]
health = "integer"                    # Prisoner health, e.g. 3
will = "integer"                      # Prisoner willpower, e.g. 60
intelligence = "integer"              # Intelligence value, e.g. 80

[item_prisoner.interrogation]
difficulty = "integer"                # Interrogation difficulty, e.g. 3
information = "array[string]"         # Available information, e.g. ["alien_tech", "portal_locations"]

[item_prisoner.metadata]
value = "integer"                     # Prisoner value, e.g. 2000
tags = "array[string]"                # Categorization tags, e.g. ["prisoner", "alien"]

# Item System - Resource Items
[[item_resource]]
id = "string"                         # Unique resource identifier, e.g. "alien_alloy"
name = "string"                       # Display name, e.g. "Alien Alloy"
type = "enum[mineral,chemical,biological,energy]"  # Resource type

[item_resource.properties]
weight = "float"                      # Resource weight per unit, e.g. 1.0
value = "integer"                     # Base value per unit, e.g. 500
rarity = "float"                      # Rarity multiplier, e.g. 2.0

[item_resource.uses]
manufacturing = "array[string]"        # Manufacturing uses, e.g. ["weapons", "armor"]
research = "array[string]"            # Research uses, e.g. ["materials_science"]

[item_resource.metadata]
origin = "string"                     # Resource origin, e.g. "alien_technology"
tags = "array[string]"                # Categorization tags, e.g. ["resource", "alien"]

# Item System - Unit Armor
[[item_unit_armour]]
id = "string"                         # Unique armor identifier, e.g. "kevlar_vest"
name = "string"                       # Display name, e.g. "Kevlar Vest"
type = "enum[light,medium,heavy,powered]"  # Armor type

[item_unit_armour.stats]
defense = "integer"                   # Defense value, e.g. 15
mobility_penalty = "integer"          # Mobility penalty, e.g. -1
weight = "float"                      # Armor weight, e.g. 3.0

[item_unit_armour.resistances]
physical = "integer"                  # Physical resistance (percentage), e.g. 20
energy = "integer"                    # Energy resistance (percentage), e.g. 10
chemical = "integer"                  # Chemical resistance (percentage), e.g. 5

[item_unit_armour.requirements]
research = "array[string]"            # Required research, e.g. ["body_armor"]

[item_unit_armour.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 800
tags = "array[string]"                # Categorization tags, e.g. ["armor", "defensive"]

# Item System - Unit Weapons
[[item_unit_weapon]]
id = "string"                         # Unique weapon identifier, e.g. "rifle_basic"
name = "string"                       # Display name, e.g. "Basic Rifle"
type = "enum[rifle,pistol,shotgun,sniper,heavy,melee]"  # Weapon type

[item_unit_weapon.stats]
damage = "integer"                    # Base damage, e.g. 25
accuracy = "integer"                  # Base accuracy, e.g. 70
range = "integer"                     # Weapon range, e.g. 16
ap_cost = "integer"                   # Action point cost, e.g. 4
ep_cost = "integer"                   # Energy point cost, e.g. 2

[item_unit_weapon.damage_type]
primary = "string"                    # Primary damage type, e.g. "kinetic"
secondary = "string"                  # Secondary damage type, e.g. "none"

[item_unit_weapon.ammo]
type = "string"                       # Ammo type, e.g. "5.56mm"
capacity = "integer"                  # Magazine capacity, e.g. 30

[item_unit_weapon.requirements]
research = "array[string]"            # Required research, e.g. ["rifle_tech"]

[item_unit_weapon.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 500
tags = "array[string]"                # Categorization tags, e.g. ["weapon", "rifle"]

# Equipment Upgrades (from ideas file)
# Ammo Clip: +10 EP Capacity / +1 EP Regen
# Ammo Rack: +20 EP Capacity / +2 EP Regen  
# Medikit: Provides healing; high EP consumption; requires Medic specialization

[[item_unit_equipment]]
id = "string"                         # Unique equipment identifier, e.g. "ammo_clip"
name = "string"                       # Display name, e.g. "Ammo Clip"
type = "enum[ammo_clip,ammo_rack,medikit]"  # Equipment type

[item_unit_equipment.stats]
ep_capacity_bonus = "integer"         # EP capacity increase, e.g. 10
ep_regen_bonus = "integer"            # EP regeneration bonus, e.g. 1

[item_unit_equipment.effects]
healing = "boolean"                   # Provides healing ability, e.g. false
ep_cost = "integer"                   # EP cost for effects, e.g. 0

[item_unit_equipment.requirements]
specialization = "string"             # Required specialization, e.g. "medic"

[item_unit_equipment.metadata]
cost = "integer"                      # Manufacturing cost, e.g. 200
tags = "array[string]"                # Categorization tags, e.g. ["equipment", "ammo"]

# Time System - Calendar
[[calendar]]
id = "string"                         # Unique calendar identifier, e.g. "gregorian"
name = "string"                       # Display name, e.g. "Gregorian Calendar"
type = "enum[gregorian,julian,custom]"  # Calendar type

[calendar.properties]
days_per_year = "integer"             # Days per year, e.g. 365
months_per_year = "integer"           # Months per year, e.g. 12
days_per_month = "array[integer]"     # Days per month, e.g. [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
leap_year_frequency = "integer"       # Leap year frequency, e.g. 4

[calendar.events]
holidays = "array[string]"            # Holiday dates, e.g. ["01-01", "12-25"]
seasons = "table[string]array[string]" # Seasonal events, e.g. {winter = ["12-21", "03-20"]}

[calendar.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["earth", "standard"]

# Mission System - Alien Bases
[[alien_base]]
id = "string"                         # Unique base identifier, e.g. "sectoid_outpost"
name = "string"                       # Display name, e.g. "Sectoid Outpost"
type = "enum[outpost,command_center,research_facility,breeding_ground]"  # Base type

[alien_base.properties]
size = "integer"                      # Base size (rooms), e.g. 8
defenses = "integer"                  # Defense strength, e.g. 15
power_source = "string"               # Power source type, e.g. "alien_tech"

[alien_base.occupants]
race = "string"                       # Primary race, e.g. "sectoid"
count = "integer"                     # Number of occupants, e.g. 12
reinforcements = "integer"            # Reinforcements available, e.g. 6

[alien_base.objectives]
primary = "string"                    # Primary objective, e.g. "destroy_power_core"
secondary = "array[string]"           # Secondary objectives, e.g. ["rescue_scientists"]

[alien_base.metadata]
difficulty = "integer"                # Mission difficulty 1-5, e.g. 3
tags = "array[string]"                # Categorization tags, e.g. ["alien", "base"]

# Mission System - Enemy Deployments
[[enemy_deployments]]
id = "string"                         # Unique deployment identifier, e.g. "sectoid_patrol"
name = "string"                       # Display name, e.g. "Sectoid Patrol"
type = "enum[patrol,guard,ambush,reinforcement]"  # Deployment type

[enemy_deployments.units]
primary = "table[string]integer"      # Primary units, e.g. {sectoid_warrior = 4}
secondary = "table[string]integer"    # Secondary units, e.g. {sectoid_leader = 1}
reinforcements = "table[string]integer" # Reinforcement units, e.g. {sectoid_scout = 2}

[enemy_deployments.behavior]
aggression = "integer"                # Aggression level 0-100, e.g. 70
caution = "integer"                   # Caution level 0-100, e.g. 30
reinforce_threshold = "integer"       # Health threshold for reinforcements, e.g. 50

[enemy_deployments.metadata]
difficulty = "integer"                # Deployment difficulty, e.g. 2
tags = "array[string]"                # Categorization tags, e.g. ["sectoid", "patrol"]

# Mission System - Sites
[[site]]
id = "string"                         # Unique site identifier, e.g. "crashed_ufo"
name = "string"                       # Display name, e.g. "Crashed UFO"
type = "enum[ufo_crash,portal,abduction_site,research_lab]"  # Site type

[site.location]
province = "string"                   # Province location, e.g. "california"
coordinates = "array[float]"          # Exact coordinates [lat, lon], e.g. [36.7783, -119.4179]
terrain = "string"                    # Terrain type, e.g. "desert"

[site.properties]
size = "integer"                      # Site size, e.g. 3
visibility = "integer"                # Detection visibility 0-100, e.g. 80
time_limit = "integer"                # Time limit (hours), e.g. 48

[site.contents]
items = "array[string]"               # Items at site, e.g. ["alien_alloy", "plasma_rifle"]
prisoners = "array[string]"           # Prisoners at site, e.g. ["sectoid_scientist"]
data = "array[string]"                # Data/research at site, e.g. ["ufo_tech"]

[site.metadata]
difficulty = "integer"                # Investigation difficulty, e.g. 3
tags = "array[string]"                # Categorization tags, e.g. ["ufo", "crash"]

# Mission System - UFOs
[[ufo]]
id = "string"                         # Unique UFO identifier, e.g. "scout_ship"
name = "string"                       # Display name, e.g. "Scout Ship"
class = "enum[scout,fighter,bomber,transport,mothership]"  # UFO class

[ufo.stats]
hull = "integer"                      # Maximum hull, e.g. 50
speed = "integer"                     # Movement speed, e.g. 25
weapons = "integer"                   # Number of weapons, e.g. 2
crew_capacity = "integer"             # Crew capacity, e.g. 4

[ufo.behavior]
aggression = "integer"                # Combat aggression 0-100, e.g. 60
evasion = "integer"                   # Evasion tendency 0-100, e.g. 80
detection_range = "integer"           # Detection range (km), e.g. 200

[ufo.mission]
type = "enum[reconnaissance,attack,abduction,transport]"  # Mission type
duration = "integer"                 # Mission duration (hours), e.g. 24
priority = "integer"                  # Mission priority, e.g. 3

[ufo.metadata]
tier = "integer"                      # UFO tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["ufo", "scout"]

# Quest System - Quests
[[quests]]
id = "string"                         # Unique quest identifier, e.g. "first_contact"
name = "string"                       # Display name, e.g. "First Contact"
type = "enum[main,side,hidden,event]"  # Quest type

[quests.objectives]
primary = "array[string]"             # Primary objectives, e.g. ["investigate_ufo_crash"]
secondary = "array[string]"           # Secondary objectives, e.g. ["recover_technology"]
bonus = "array[string]"               # Bonus objectives, e.g. ["no_casualties"]

[quests.rewards]
experience = "integer"                # XP reward, e.g. 500
credits = "integer"                   # Credit reward, e.g. 10000
items = "array[string]"               # Item rewards, e.g. ["alien_artifact"]
research = "array[string]"            # Research unlocks, e.g. ["ufo_insight"]

[quests.requirements]
prerequisites = "array[string]"       # Required quests, e.g. ["tutorial_complete"]
level = "integer"                     # Required level, e.g. 1

[quests.metadata]
difficulty = "enum[easy,normal,hard,legendary]"  # Quest difficulty
tags = "array[string]"                # Categorization tags, e.g. ["story", "introduction"]

# Psionic System - Psionic Effects
[[psionic_effects]]
id = "string"                         # Unique effect identifier, e.g. "mind_control"
name = "string"                       # Display name, e.g. "Mind Control"
type = "enum[control,damage,utility,defensive]"  # Effect type

[psionic_effects.parameters]
range = "integer"                     # Effect range, e.g. 8
duration = "integer"                  # Effect duration (turns), e.g. 3
power_cost = "integer"                # Psi power cost, e.g. 50

[psionic_effects.effects]
stat_modifiers = "table[string]integer" # Stat changes, e.g. {will = -20}
behavior_changes = "array[string]"    # Behavior modifications, e.g. ["controlled"]
damage_over_time = "integer"          # Damage per turn, e.g. 5

[psionic_effects.requirements]
psi_skill = "integer"                 # Required psi skill, e.g. 3
research = "array[string]"            # Required research, e.g. ["psionic_theory"]

[psionic_effects.metadata]
tier = "integer"                      # Effect tier, e.g. 2
tags = "array[string]"                # Categorization tags, e.g. ["psionic", "control"]

# Unit System - Unit Actions
[[unit_actions]]
id = "string"                         # Unique action identifier, e.g. "overwatch"
name = "string"                       # Display name, e.g. "Overwatch"
type = "enum[movement,combat,utility,special]"  # Action type

[unit_actions.costs]
action_points = "integer"             # AP cost, e.g. 2
energy = "integer"                    # Energy cost, e.g. 0
cooldown = "integer"                  # Cooldown (turns), e.g. 1

[unit_actions.effects]
range = "integer"                     # Action range, e.g. 16
area = "enum[single,line,cone,burst]" # Area of effect
damage = "integer"                    # Damage dealt, e.g. 0
healing = "integer"                   # Healing provided, e.g. 0

[unit_actions.requirements]
level = "integer"                     # Required level, e.g. 2
class = "array[string]"               # Required classes, e.g. ["sniper"]
research = "array[string]"            # Required research, e.g. ["advanced_training"]

[unit_actions.metadata]
tier = "integer"                      # Action tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["combat", "defensive"]

# Unit System - Unit Levels
[[unit_levels]]
id = "string"                         # Unique level identifier, e.g. "squaddie"
name = "string"                       # Display name, e.g. "Squaddie"
level = "integer"                     # Level number, e.g. 1

[unit_levels.bonuses]
health = "integer"                    # Health bonus, e.g. 1
aim = "integer"                       # Aim bonus, e.g. 5
will = "integer"                      # Will bonus, e.g. 5
mobility = "integer"                  # Mobility bonus, e.g. 1

[unit_levels.unlocks]
abilities = "array[string]"           # Unlocked abilities, e.g. ["hunker_down"]
perks = "array[string]"               # Unlocked perks, e.g. ["fit"]

[unit_levels.requirements]
experience = "integer"                # Required experience, e.g. 0
missions = "integer"                  # Required missions, e.g. 0

[unit_levels.metadata]
rank = "string"                       # Rank name, e.g. "Rookie"
tags = "array[string]"                # Categorization tags, e.g. ["rank", "basic"]

# =============================================================================
# GEOSCAPE API
# =============================================================================

# Unit System - Unit Classes
[[unit_classes]]
id = "string"                         # Unique class identifier, e.g. "sniper"
name = "string"                       # Display name, e.g. "Sniper"
category = "enum[infantry,heavy,support,specialist]"  # Class category

[unit_classes.stats]
health = "integer"                    # Base health, e.g. 5
aim = "integer"                       # Base aim accuracy, e.g. 70
will = "integer"                      # Base willpower, e.g. 50
mobility = "integer"                  # Base mobility, e.g. 13
reactions = "integer"                 # Base reactions, e.g. 50

[unit_classes.abilities]
starting = "array[string]"            # Starting abilities, e.g. ["sniper_rifle_training"]
learnable = "array[string]"           # Learnable abilities, e.g. ["in_the_zone"]
special = "array[string]"             # Special abilities, e.g. ["headshot"]

[unit_classes.requirements]
research = "array[string]"            # Required research, e.g. ["rifle_tech"]
rank = "integer"                      # Minimum rank, e.g. 1

[unit_classes.metadata]
cost = "integer"                      # Recruitment cost, e.g. 2000
tags = "array[string]"                # Categorization tags, e.g. ["ranged", "precision"]

# Unit System - Unit Traits
[[unit_traits]]
id = "string"                         # Unique trait identifier, e.g. "tough"
name = "string"                       # Display name, e.g. "Tough"
description = "string"                # Trait description
category = "enum[physical,mental,combat,special]"  # Trait category

[unit_traits.effects]
stat_modifiers = "table[string]integer"  # Stat modifiers, e.g. {health = 2, will = 1}
ability_modifiers = "table[string]float"  # Ability modifiers, e.g. {damage_resistance = 1.2}
special_effects = "array[string]"     # Special effects, e.g. ["regeneration"]

[unit_traits.requirements]
min_rank = "integer"                  # Minimum rank required, e.g. 2
prerequisites = "array[string]"       # Required traits, e.g. ["fit"]

[unit_traits.metadata]
rarity = "enum[common,uncommon,rare,epic,legendary]"  # Trait rarity
tags = "array[string]"                # Categorization tags, e.g. ["physical", "defensive"]

# Unit System - Unit Transformations
[[unit_transformations]]
id = "string"                         # Unique transformation identifier, e.g. "berserker_rage"
name = "string"                       # Display name, e.g. "Berserker Rage"
description = "string"                # Transformation description
trigger = "enum[health_threshold,ability_use,damage_taken,turn_start]"  # Trigger condition

[unit_transformations.effects]
stat_changes = "table[string]integer" # Stat changes, e.g. {aim = 20, mobility = -2}
ability_grants = "array[string]"      # Granted abilities, e.g. ["extra_action"]
duration = "integer"                  # Duration in turns, e.g. 3

[unit_transformations.requirements]
traits = "array[string]"              # Required traits, e.g. ["aggressive"]
research = "array[string]"            # Required research, e.g. ["combat_stims"]

[unit_transformations.metadata]
tier = "integer"                      # Transformation tier, e.g. 2
tags = "array[string]"                # Categorization tags, e.g. ["combat", "temporary"]

# Unit System - Unit Sizes
[[unit_sizes]]
id = "string"                         # Unique size identifier, e.g. "large"
name = "string"                       # Display name, e.g. "Large"
description = "string"                # Size description

[unit_sizes.modifiers]
health_multiplier = "float"           # Health multiplier, e.g. 1.5
mobility_penalty = "integer"          # Mobility penalty, e.g. -2
cover_penalty = "integer"             # Cover penalty, e.g. -20
stealth_penalty = "integer"           # Stealth penalty, e.g. -30

[unit_sizes.requirements]
research = "array[string]"            # Required research, e.g. ["genetic_engineering"]
traits = "array[string]"              # Required traits, e.g. ["mutated"]

[unit_sizes.metadata]
tier = "integer"                      # Size tier, e.g. 3
tags = "array[string]"                # Categorization tags, e.g. ["physical", "mutation"]

# Unit System - Unit Medals
[[unit_medals]]
id = "string"                         # Unique medal identifier, e.g. "combat_hero"
name = "string"                       # Display name, e.g. "Combat Hero"
description = "string"                # Medal description
category = "enum[combat,service,achievement,special]"  # Medal category

[unit_medals.requirements]
missions_completed = "integer"        # Missions required, e.g. 10
kills = "integer"                     # Kills required, e.g. 50
rank = "integer"                      # Minimum rank, e.g. 3

[unit_medals.bonuses]
stat_bonuses = "table[string]integer" # Stat bonuses, e.g. {aim = 5, will = 10}
ability_unlocks = "array[string]"     # Unlocked abilities, e.g. ["inspire"]
salary_bonus = "integer"              # Salary bonus, e.g. 200

[unit_medals.metadata]
rarity = "enum[common,uncommon,rare,epic,legendary]"  # Medal rarity
tags = "array[string]"                # Categorization tags, e.g. ["combat", "achievement"]

# Unit System - Unit Abilities
[[unit_abilities]]
id = "string"                         # Unique ability identifier, e.g. "sprint"
name = "string"                       # Display name, e.g. "Sprint"
description = "string"                # Ability description
type = "enum[active,passive,reaction]"  # Ability type

[unit_abilities.effects]
action_cost = "integer"               # AP cost, e.g. 2
cooldown = "integer"                  # Cooldown in turns, e.g. 3
range = "integer"                     # Ability range, e.g. 8
area = "enum[single,target,cone,line,burst]"  # Area of effect

[unit_abilities.requirements]
level = "integer"                     # Required level, e.g. 3
traits = "array[string]"              # Required traits, e.g. ["fit"]
research = "array[string]"            # Required research, e.g. ["mobility_training"]

[unit_abilities.metadata]
tier = "integer"                      # Ability tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["movement", "utility"]

# Geography System - Biomes
[[biomes]]
id = "string"                         # Unique biome identifier, e.g. "temperate_forest"
name = "string"                       # Display name, e.g. "Temperate Forest"
type = "enum[forest,desert,tundra,urban,rural,mountain,water]"  # Biome type

[biomes.properties]
temperature = "integer"               # Average temperature, e.g. 15
precipitation = "integer"             # Annual precipitation (cm), e.g. 100
vegetation_density = "float"          # Vegetation density 0-1, e.g. 0.8
urbanization = "float"                # Urbanization level 0-1, e.g. 0.2

[biomes.mission_modifiers]
detection_risk = "float"              # Detection risk multiplier, e.g. 1.2
alien_activity = "float"              # Alien activity multiplier, e.g. 0.8
resource_availability = "float"       # Resource availability, e.g. 1.1

[biomes.terrain_types]
primary = "array[string]"             # Primary terrain types, e.g. ["forest", "hills"]
secondary = "array[string]"           # Secondary terrain types, e.g. ["clearing"]

[biomes.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["temperate", "forested"]

# Geography System - Regions
[[regions]]
id = "string"                         # Unique region identifier, e.g. "north_america"
name = "string"                       # Display name, e.g. "North America"
type = "enum[continent,country,province,city]"  # Region type

[regions.geography]
area = "integer"                      # Area in km², e.g. 24709000
population = "integer"                # Population, e.g. 579000000
biomes = "array[string]"              # Dominant biomes, e.g. ["temperate_forest", "desert"]

[regions.politics]
government_type = "string"            # Government type, e.g. "democracy"
stability = "integer"                 # Political stability 0-100, e.g. 75
alien_presence = "integer"            # Alien activity level 0-100, e.g. 20

[regions.economy]
gdp = "integer"                       # GDP in millions, e.g. 21400000
resources = "array[string]"           # Key resources, e.g. ["technology", "manufacturing"]
trade_routes = "array[string]"        # Connected regions, e.g. ["europe", "asia"]

[regions.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["continent", "developed"]

# Geography System - Countries
[[countries]]
id = "string"                         # Unique country identifier, e.g. "usa"
name = "string"                       # Display name, e.g. "United States"
region = "string"                     # Parent region, e.g. "north_america"

[countries.stats]
population = "integer"                # Population, e.g. 331000000
area = "integer"                      # Area in km², e.g. 9833517
gdp_per_capita = "integer"            # GDP per capita, e.g. 70000

[countries.politics]
government = "string"                 # Government type, e.g. "federal_republic"
stability = "integer"                 # Stability rating 0-100, e.g. 80
funding_willingness = "integer"       # Funding cooperation 0-100, e.g. 90

[countries.relations]
initial_standing = "integer"          # Starting diplomatic standing, e.g. 50
max_standing = "integer"              # Maximum standing, e.g. 100
cooperation_bonus = "float"           # Cooperation multiplier, e.g. 1.2

[countries.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["superpower", "democracy"]

# Geography System - Provinces
[[provinces]]
id = "string"                         # Unique province identifier, e.g. "california"
name = "string"                       # Display name, e.g. "California"
country = "string"                    # Parent country, e.g. "usa"

[provinces.geography]
area = "integer"                      # Area in km², e.g. 423967
population = "integer"                # Population, e.g. 39500000
biome = "string"                      # Primary biome, e.g. "mediterranean"

[provinces.economy]
wealth = "integer"                    # Wealth rating 0-100, e.g. 95
resources = "array[string]"           # Local resources, e.g. ["technology", "entertainment"]
industries = "array[string]"          # Key industries, e.g. ["silicon_valley", "hollywood"]

[provinces.military]
bases = "array[string]"               # Military bases, e.g. ["naval_base"]
airports = "array[string]"            # Airports, e.g. ["lax", "sfo"]

[provinces.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["coastal", "wealthy"]

# Geography System - Portals
[[portals]]
id = "string"                         # Unique portal identifier, e.g. "portal_alpha"
name = "string"                       # Display name, e.g. "Portal Alpha"
province = "string"                   # Location province, e.g. "california"

[portals.properties]
size = "enum[small,medium,large,colossal]"  # Portal size
activity_level = "integer"            # Activity level 0-100, e.g. 75
stability = "integer"                 # Stability 0-100, e.g. 30

[portals.threat_assessment]
difficulty = "integer"                # Mission difficulty 1-5, e.g. 4
alien_types = "array[string]"         # Common alien types, e.g. ["sectoid", "muton"]
estimated_forces = "integer"          # Estimated enemy forces, e.g. 12

[portals.discovery]
discovered = "boolean"                # Whether discovered, e.g. false
discovery_date = "string"             # Discovery date, e.g. "2024-01-15"
investigation_status = "enum[unknown,investigating,active,contained]"  # Investigation status

[portals.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["active", "high_threat"]

# Lore System - Factions
[[factions]]
id = "string"                         # Unique faction identifier, e.g. "sectoid_empire"
name = "string"                       # Display name, e.g. "Sectoid Empire"
type = "enum[alien,human,neutral]"    # Faction type

[factions.properties]
aggression = "integer"                # Aggression level 0-100, e.g. 80
technology = "integer"                # Technology level 0-100, e.g. 60
population = "integer"                # Population size, e.g. 1000000

[factions.relations]
human_stance = "enum[hostile,neutral,cooperative]"  # Stance toward humans
other_factions = "table[string]integer"  # Relations with other factions

[factions.abilities]
special_abilities = "array[string]"    # Special faction abilities, e.g. ["mind_control"]
weaknesses = "array[string]"          # Faction weaknesses, e.g. ["psionic_vulnerability"]

[factions.metadata]
origin = "string"                     # Faction origin, e.g. "alien_homeworld"
tags = "array[string]"                # Categorization tags, e.g. ["alien", "psionic"]

# Lore System - Races
[[race]]
id = "string"                         # Unique race identifier, e.g. "sectoid"
name = "string"                       # Display name, e.g. "Sectoid"
faction = "string"                    # Parent faction, e.g. "sectoid_empire"

[race.stats]
health = "integer"                    # Base health, e.g. 4
aim = "integer"                       # Base aim, e.g. 65
will = "integer"                      # Base will, e.g. 40
mobility = "integer"                  # Base mobility, e.g. 12

[race.abilities]
innate = "array[string]"              # Innate abilities, e.g. ["mind_control"]
learnable = "array[string]"           # Learnable abilities, e.g. ["psionic_blast"]

[race.appearance]
size = "string"                       # Size category, e.g. "small"
color = "string"                      # Primary color, e.g. "gray"
features = "array[string]"            # Distinctive features, e.g. ["large_head", "black_eyes"]

[race.metadata]
tier = "integer"                      # Race tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["alien", "psionic"]

# Lore System - Campaigns
[[campaigns]]
id = "string"                         # Unique campaign identifier, e.g. "invasion_2024"
name = "string"                       # Display name, e.g. "Alien Invasion 2024"
description = "string"                # Campaign description

[campaigns.parameters]
start_date = "string"                 # Campaign start date, e.g. "2024-01-01"
duration = "integer"                  # Expected duration (months), e.g. 12
difficulty = "enum[easy,normal,hard,legendary]"  # Campaign difficulty

[campaigns.objectives]
primary = "array[string]"             # Primary objectives, e.g. ["destroy_portals"]
secondary = "array[string]"           # Secondary objectives, e.g. ["research_aliens"]

[campaigns.progression]
phases = "array[string]"              # Campaign phases, e.g. ["infiltration", "invasion", "climax"]
milestones = "array[string]"          # Key milestones, e.g. ["first_contact", "portal_discovery"]

[campaigns.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["invasion", "alien"]

# Lore System - Events
[[events]]
id = "string"                         # Unique event identifier, e.g. "first_contact"
name = "string"                       # Display name, e.g. "First Contact"
type = "enum[discovery,incident,battle,diplomatic]"  # Event type

[events.parameters]
date = "string"                       # Event date, e.g. "2024-01-15"
location = "string"                   # Event location, e.g. "california"
severity = "integer"                  # Event severity 1-5, e.g. 4

[events.effects]
global_impact = "table[string]integer" # Global effects, e.g. {panic = 20, funding = 15}
local_impact = "table[string]integer" # Local effects, e.g. {stability = -10}

[events.consequences]
immediate = "array[string]"           # Immediate consequences, e.g. ["portal_discovery"]
long_term = "array[string]"           # Long-term consequences, e.g. ["increased_funding"]

[events.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["discovery", "high_impact"]

# Lore System - Missions
[[missions]]
id = "string"                         # Unique mission identifier, e.g. "portal_assault"
name = "string"                       # Display name, e.g. "Portal Assault"
type = "enum[assault,defense,rescue,investigation,sabotage]"  # Mission type

[missions.parameters]
difficulty = "integer"                # Mission difficulty 1-5, e.g. 3
duration = "integer"                  # Expected duration (hours), e.g. 4
max_squad_size = "integer"            # Maximum squad size, e.g. 6

[missions.objectives]
primary = "string"                    # Primary objective, e.g. "destroy_portal"
secondary = "array[string]"           # Secondary objectives, e.g. ["rescue_civilians"]

[missions.rewards]
experience = "integer"                # XP reward, e.g. 150
credits = "integer"                   # Credit reward, e.g. 8000
research = "array[string]"            # Research unlocks, e.g. ["portal_tech"]

[missions.requirements]
min_rank = "integer"                  # Minimum soldier rank, e.g. 2
equipment = "array[string]"           # Required equipment, e.g. ["heavy_weapons"]

[missions.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["combat", "portal"]

# Organization System - Policies
[[policies]]
id = "string"                         # Unique policy identifier, e.g. "aggressive_recruitment"
name = "string"                       # Display name, e.g. "Aggressive Recruitment"
category = "enum[operations,recruitment,research,funding,security]"  # Policy category

[policies.effects]
recruitment_bonus = "integer"         # Recruitment rate bonus (percentage), e.g. 25
research_speed = "integer"            # Research speed bonus (percentage), e.g. 0
funding_efficiency = "integer"        # Funding efficiency bonus (percentage), e.g. 0
security_level = "integer"            # Security level change, e.g. 1

[policies.requirements]
company_level = "integer"             # Required company level, e.g. 2
reputation_threshold = "integer"      # Required reputation, e.g. 50

[policies.tradeoffs]
negative_effects = "array[string]"    # Negative consequences, e.g. ["higher_casualties"]
opportunity_cost = "integer"          # Resource cost, e.g. 1000

[policies.metadata]
tier = "integer"                      # Policy tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["recruitment", "aggressive"]

# Organization System - Fame Levels
[[fame_levels]]
id = "string"                         # Unique fame level identifier, e.g. "legendary"
name = "string"                       # Display name, e.g. "Legendary"
threshold = "integer"                 # Fame threshold required, e.g. 10000

[fame_levels.bonuses]
recruitment_modifier = "integer"      # Recruitment rate modifier (percentage), e.g. 50
funding_modifier = "integer"          # Funding availability modifier (percentage), e.g. 30
detection_modifier = "integer"        # Detection risk modifier (percentage), e.g. -40

[fame_levels.perks]
unlocks = "array[string]"             # Unlocked content, e.g. ["elite_recruits"]
bonuses = "array[string]"             # Special bonuses, e.g. ["international_support"]

[fame_levels.metadata]
tier = "integer"                      # Fame tier, e.g. 5
tags = "array[string]"                # Categorization tags, e.g. ["reputation", "elite"]

# Organization System - Karma Levels
[[karma_levels]]
id = "string"                         # Unique karma level identifier, e.g. "paragon"
name = "string"                       # Display name, e.g. "Paragon"
threshold = "integer"                 # Karma threshold required, e.g. 5000

[karma_levels.bonuses]
supplier_discount = "integer"         # Supplier discount (percentage), e.g. 20
research_bonus = "integer"            # Research speed bonus (percentage), e.g. 15
mission_success = "integer"           # Mission success modifier (percentage), e.g. 10

[karma_levels.unlocks]
suppliers = "array[string]"           # Unlocked suppliers, e.g. ["ethical_arms_dealer"]
research = "array[string]"            # Unlocked research, e.g. ["advanced_ethics"]
missions = "array[string]"            # Unlocked missions, e.g. ["humanitarian_aid"]

[karma_levels.metadata]
tier = "integer"                      # Karma tier, e.g. 5
tags = "array[string]"                # Categorization tags, e.g. ["morality", "positive"]

# Organization System - Company Levels
[[company_levels]]
id = "string"                         # Unique company level identifier, e.g. "ca"
name = "string"                       # Display name, e.g. "Corporate Alliance"
threshold = "integer"                 # Experience threshold, e.g. 10000

[company_levels.unlocks]
facilities = "array[string]"          # Unlocked facilities, e.g. ["advanced_lab"]
research = "array[string]"            # Unlocked research, e.g. ["quantum_computing"]
effects = "array[string]"             # Global effects, e.g. ["increased_funding"]

[company_levels.bonuses]
facility_slots = "integer"            # Additional facility slots, e.g. 2
research_slots = "integer"            # Additional research slots, e.g. 1
command_capacity = "integer"          # Additional command capacity, e.g. 5

[company_levels.metadata]
tier = "integer"                      # Company tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["corporate", "expansion"]

# Pedia System - Categories
[[pedia_category]]
id = "string"                         # Unique category identifier, e.g. "unit"
name = "string"                       # Display name, e.g. "Units"
description = "string"                # Category description
icon = "string"                       # Category icon, e.g. "unit_icon"

[pedia_category.properties]
unlock_condition = "string"           # How to unlock, e.g. "research_completed"
sort_order = "integer"                # Display sort order, e.g. 1

[pedia_category.metadata]
tags = "array[string]"                # Categorization tags, e.g. ["encyclopedia", "units"]

# Pedia System - Entries
[[pedia_entry]]
id = "string"                         # Unique entry identifier, e.g. "sectoid_warrior"
name = "string"                       # Display name, e.g. "Sectoid Warrior"
category = "string"                   # Parent category, e.g. "unit"

[pedia_entry.content]
description = "string"                # Entry description
stats = "table"                       # Relevant stats, e.g. {health = 4, aim = 65}
abilities = "array[string]"           # Associated abilities, e.g. ["mind_control"]

[pedia_entry.unlock]
condition = "string"                  # Unlock condition, e.g. "encounter_sectoid"
tags = "array[string]"                # Related tags, e.g. ["alien", "psionic"]

[pedia_entry.references]
related_entries = "array[string]"      # Related entries, e.g. ["sectoid_empire"]
prerequisites = "array[string]"       # Required entries, e.g. ["alien_life"]

[pedia_entry.metadata]
rarity = "enum[common,uncommon,rare,epic,legendary]"  # Entry rarity
tags = "array[string]"                # Categorization tags, e.g. ["alien", "combat"]

# =============================================================================
# MODDING API
# =============================================================================

# =============================================================================
# MODDING API
# =============================================================================

[world_config]
id = "string"                         # World identifier, e.g. "earth"
name = "string"                       # Display name, e.g. "Earth"
type = "enum[planet,moon,station]"    # World type

[world_config.geography]
provinces = "integer"                 # Number of provinces, e.g. 50
regions = "integer"                   # Number of regions, e.g. 12
continents = "integer"                # Number of continents, e.g. 7

[world_config.time]
start_year = "integer"                # Starting year, e.g. 1999
start_month = "integer"               # Starting month, e.g. 12
start_day = "integer"                 # Starting day, e.g. 1
time_acceleration = "array[integer]"  # Time speed multipliers, e.g. [1, 5, 30]

[world.missions]
spawn_rate = "float"                  # Base mission spawn rate, e.g. 0.8
max_active_missions = "integer"       # Maximum concurrent missions, e.g. 12
expiration_hours = "integer"          # Mission expiration time, e.g. 72

# Province Definitions
[[provinces]]
id = "string"                         # Unique province identifier, e.g. "new_york"
name = "string"                       # Display name, e.g. "New York"
region = "string"                     # Parent region, e.g. "northeast"

[provinces.geography]
coordinates.x = "integer"             # Map X coordinate, e.g. 150
coordinates.y = "integer"             # Map Y coordinate, e.g. 200
area = "integer"                      # Area in km², e.g. 50000
population = "integer"                # Population, e.g. 8500000
biome = "string"                      # Primary biome, e.g. "urban"

[provinces.economy]
funding_base = "integer"              # Base monthly funding, e.g. 50000
funding_multiplier = "float"          # Funding modifier, e.g. 1.2
resources = "table[string]integer"    # Available resources, e.g. {alloys = 10, elerium = 2}

[provinces.strategic]
radar_coverage = "float"              # Initial radar coverage, e.g. 0.0
alien_activity = "float"              # Base alien activity, e.g. 0.1
portal_risk = "float"                 # Portal spawn chance, e.g. 0.05

[provinces.metadata]
country = "string"                    # Country affiliation, e.g. "usa"
tags = "array[string]"                # Categorization tags, e.g. ["urban", "coastal", "high_population"]

# =============================================================================
# BATTLESCAPE API
# =============================================================================

# Battlefields
[[battlefields]]
id = "string"                         # Unique battlefield identifier, e.g. "urban_streets_battlefield"
name = "string"                       # Display name, e.g. "Urban Streets Battlefield"
biome = "string"                      # Associated biome, e.g. "urban"

[battlefields.grid]
width = "integer"                     # Battle grid width (tiles), e.g. 80
height = "integer"                    # Battle grid height (tiles), e.g. 60
tile_size = "integer"                 # Tile size (pixels), e.g. 20

[battlefields.terrain]
map_blocks = "array[string]"          # Available map blocks, e.g. ["urban_street", "building"]
map_scripts = "array[string]"         # Available map scripts, e.g. ["city_layout", "district"]

[battlefields.deployment]
zones = "array[table]"                # Deployment zones, e.g. [{id = "zone_1", blocks = ["block_1", "block_2"]}]
spawn_points = "array[table]"         # Spawn points, e.g. [{x = 25, y = 15, faction = "player"}]

[battlefields.objectives]
primary = "string"                    # Primary objective, e.g. "eliminate_all_enemies"
secondary = "array[string]"           # Secondary objectives, e.g. ["protect_civilians"]

[battlefields.metadata]
difficulty = "enum[easy,medium,hard]" # Difficulty level
tags = "array[string]"                # Categorization tags, e.g. ["urban", "outdoor", "daytime"]

# Map Blocks
[[map_blocks]]
id = "string"                         # Unique block identifier, e.g. "urban_street_block"
name = "string"                       # Display name, e.g. "Urban Street Block"
size = "string"                       # Block dimensions, e.g. "15x15"

[map_blocks.tiles]
grid = "array[string]"                # 15x15 character grid, e.g. ["...............", "...###..."]
tileset = "string"                    # Associated tileset, e.g. "urban_tileset"

[map_blocks.seams]
north = "string"                      # North seam type, e.g. "road"
south = "string"                      # South seam type, e.g. "building"
east = "string"                       # East seam type, e.g. "alley"
west = "string"                       # West seam type, e.g. "wall"

[map_blocks.anchors]
deployment = "array[table]"           # Deployment anchors, e.g. [{x = 7, y = 7, type = "player"}]
objectives = "array[table]"           # Objective anchors, e.g. [{x = 5, y = 10, type = "console"}]
spawns = "array[table]"               # Spawn anchors, e.g. [{x = 12, y = 3, faction = "enemy"}]

[map_blocks.metadata]
biome = "string"                      # Compatible biome, e.g. "urban"
weight = "integer"                    # Selection weight, e.g. 10
tags = "array[string]"                # Categorization tags, e.g. ["street", "urban"]

# Map Tiles
[[map_tiles]]
character = "string"                  # Single character identifier, e.g. "."
name = "string"                       # Display name, e.g. "open_ground"
category = "string"                   # Tile category, e.g. "terrain"

[map_tiles.properties]
traversable = "boolean"               # Allows movement, e.g. true
cover_value = "integer"               # Cover provided (0-4), e.g. 0
blocking = "boolean"                  # Blocks line of sight, e.g. false
destructible = "boolean"              # Can be destroyed, e.g. false
flammable = "boolean"                 # Can catch fire, e.g. false

[map_tiles.graphics]
tileset = "string"                    # Tileset identifier, e.g. "terrain"
position = "string"                   # Position key in tileset, e.g. "00"
variants = "array[string]"            # Visual variants, e.g. ["00", "01", "02"]

[map_tiles.metadata]
material = "string"                   # Material type, e.g. "ground"
weight = "integer"                    # Selection weight, e.g. 5
tags = "array[string]"                # Categorization tags, e.g. ["ground", "basic"]

# Map Scripts
[[map_scripts]]
id = "string"                         # Unique script identifier, e.g. "city_layout"
name = "string"                       # Display name, e.g. "City Layout Script"
type = "string"                       # Script type, e.g. "grid_assembly"

[map_scripts.parameters]
min_blocks = "integer"                # Minimum block count, e.g. 16
max_blocks = "integer"                # Maximum block count, e.g. 36
grid_width = "integer"                # Target grid width, e.g. 4
grid_height = "integer"               # Target grid height, e.g. 4

[map_scripts.rules]
block_filters = "table"               # Block selection filters, e.g. {biome = "urban", tags = ["street"]}
placement_logic = "string"            # Placement algorithm, e.g. "seam_matching"
validation_checks = "array[string]"   # Validation requirements, e.g. ["connectivity", "objectives"]

[map_scripts.metadata]
biome = "string"                      # Target biome, e.g. "urban"
complexity = "enum[simple,medium,complex]" # Complexity level
tags = "array[string]"                # Categorization tags, e.g. ["urban", "outdoor"]

# Map Grids
[[map_grids]]
id = "string"                         # Unique grid identifier, e.g. "generated_city_grid"
script_used = "string"                # Generation script, e.g. "city_layout"
width = "integer"                     # Grid width (blocks), e.g. 5
height = "integer"                    # Grid height (blocks), e.g. 5

[map_grids.blocks]
grid = "array[array[string]]"         # 2D block array, e.g. [["street_01", "building_02"], ["alley_01", "park_01"]]

[map_grids.ai_priorities]
player_ally = "array[array[integer]]" # AI priority grid for allies, e.g. [[75, 60], [45, 80]]
enemy_force = "array[array[integer]]" # AI priority grid for enemies, e.g. [[45, 75], [80, 60]]
neutral = "array[array[integer]]"     # AI priority grid for neutrals, e.g. [[20, 30], [25, 35]]

[map_grids.metadata]
biome = "string"                      # Grid biome, e.g. "urban"
generation_seed = "integer"           # Random seed used, e.g. 12345
connectivity_score = "integer"        # Connectivity rating (0-100), e.g. 85

# Unit Distribution
[[unit_distributions]]
id = "string"                         # Unique distribution identifier, e.g. "balanced_deployment"
mission_id = "string"                 # Associated mission, e.g. "recon_operation"

[unit_distributions.factions]
player = "table"                      # Player faction config, e.g. {units = 8, power = 75}
enemy = "table"                       # Enemy faction config, e.g. {units = 12, power = 85}
allied = "table"                      # Allied faction config, e.g. {units = 4, power = 60}
neutral = "table"                     # Neutral faction config, e.g. {units = 2, power = 30}

[unit_distributions.rules]
spacing_min = "integer"               # Minimum unit spacing, e.g. 3
terrain_restrictions = "array[string]" # Forbidden terrain, e.g. ["impassable"]
cover_distribution = "string"         # Cover balance approach, e.g. "balanced"

[unit_distributions.results]
assignments = "array[table]"           # Unit assignments, e.g. [{unit_id = "soldier_1", block_id = "building_a", x = 25, y = 15}]

[unit_distributions.metadata]
algorithm = "string"                  # Distribution algorithm, e.g. "priority_weighted"
balance_score = "integer"             # Balance rating (0-100), e.g. 82
processing_time = "float"             # Generation time, e.g. 0.145

# Deployment Zones
[[deployment_zones]]
id = "string"                         # Unique zone identifier, e.g. "primary_deployment"
name = "string"                       # Display name, e.g. "Main Entrance Zone"
type = "enum[primary,secondary,reserve]" # Zone type

[deployment_zones.area]
blocks = "array[string]"              # Constituent blocks, e.g. ["building_entrance", "courtyard"]
bounds = "table"                      # Coordinate bounds, e.g. {x1 = 20, y1 = 10, x2 = 35, y2 = 25}

[deployment_zones.capacity]
max_units = "integer"                 # Maximum units, e.g. 6
unit_types = "array[string]"          # Allowed unit types, e.g. ["infantry", "heavy"]

[deployment_zones.tactical]
cover_rating = "integer"              # Cover quality (1-10), e.g. 8
threat_level = "integer"              # Threat exposure (1-10), e.g. 3
movement_freedom = "integer"          # Mobility rating (1-10), e.g. 7

[deployment_zones.metadata]
priority = "integer"                  # Selection priority, e.g. 1
default_unlocked = "boolean"          # Available by default, e.g. true

# Objects
[[objects]]
id = "string"                         # Unique object identifier, e.g. "wooden_crate"
name = "string"                       # Display name, e.g. "Wooden Crate"
category = "enum[cover,interactive,environmental]" # Object category

[objects.properties]
size = "table"                        # Object dimensions, e.g. {width = 1, height = 1}
blocking = "boolean"                  # Blocks movement, e.g. false
destructible = "boolean"              # Can be destroyed, e.g. true
interactive = "boolean"               # Can be interacted with, e.g. true

[objects.combat]
cover_value = "integer"               # Cover provided (0-4), e.g. 2
destruction_threshold = "integer"     # Health to destroy, e.g. 25

[objects.interaction]
action_type = "string"                # Interaction type, e.g. "search"
ap_cost = "integer"                   # Action point cost, e.g. 2
requirements = "table"                # Special requirements, e.g. {skill = "none", tool = "none"}

[objects.visual]
sprite = "string"                     # Sprite path, e.g. "objects/crate_wooden.png"
destruction_states = "array[string]"  # Damage sprites, e.g. ["intact", "damaged", "destroyed"]

[objects.metadata]
material = "string"                   # Material type, e.g. "wood"
value = "integer"                     # Salvage value, e.g. 10
flammability = "integer"              # Fire risk (1-5), e.g. 3

# Tilesets
[[tilesets]]
id = "string"                         # Unique tileset identifier, e.g. "terrain"
name = "string"                       # Display name, e.g. "Terrain Tileset"
image = "string"                      # Image file path, e.g. "assets/battle/tilesets/terrain.png"
tile_width = "integer"                # Tile width in pixels, e.g. 20
tile_height = "integer"               # Tile height in pixels, e.g. 20

[tilesets.categories]
ground = "table"                      # Ground tile definitions
walls = "table"                       # Wall tile definitions
objects = "table"                     # Object tile definitions

[tilesets.categories.ground.tiles]
"00" = "string"                       # Position key to tile name, e.g. "grass_basic"
"01" = "string"                       # e.g. "dirt_basic"

[tilesets.categories.walls.tiles]
"10" = "string"                       # e.g. "wall_concrete"
"11" = "string"                       # e.g. "wall_brick"

[tilesets.categories.objects.tiles]
"20" = "string"                       # e.g. "tree_oak"
"30" = "string"                       # e.g. "crate_wooden"

# Unit Actions
[[actions]]
id = "string"                         # Unique action identifier, e.g. "move"
name = "string"                       # Display name, e.g. "Move"
type = "enum[movement,attack,utility]" # Action type

[actions.parameters]
ap_cost = "integer"                   # Action point cost, e.g. 2
range = "integer"                     # Movement range (tiles), e.g. 6
diagonal_cost = "float"               # Diagonal movement cost, e.g. 1.4

[actions.effects]
movement = "boolean"                  # Allows movement, e.g. true
stance_change = "boolean"             # Changes stance, e.g. false
interrupt_overwatch = "boolean"       # Interrupts overwatch, e.g. false

[actions.requirements]
min_stamina = "integer"               # Minimum stamina, e.g. 10
equipment = "array[string]"           # Required equipment, e.g. []

[actions.metadata]
category = "string"                   # Action category, e.g. "movement"
tags = "array[string]"                # Categorization tags, e.g. ["movement", "basic"]

# =============================================================================
# ECONOMY API
# =============================================================================

# Manufacturing Recipes
[[recipes]]
id = "string"                         # Unique recipe identifier, e.g. "rifle_recipe"
name = "string"                       # Display name, e.g. "Assault Rifle"
category = "string"                   # Recipe category, e.g. "weapons"

[recipes.inputs]
credits = "integer"                   # Credit cost, e.g. 1500
materials = "table[string]integer"    # Material requirements, e.g. {alloys = 5, polymers = 3}
man_hours = "integer"                 # Man-hours required, e.g. 8

[recipes.outputs]
item = "string"                       # Produced item, e.g. "rifle"
quantity = "integer"                  # Production quantity, e.g. 1
quality = "string"                    # Item quality, e.g. "standard"

[recipes.requirements]
research = "array[string]"            # Required research, e.g. ["rifle_tech"]
facilities = "array[string]"          # Required facilities, e.g. ["workshop"]
skill_level = "integer"               # Required skill level, e.g. 2

[recipes.production]
time_hours = "integer"                # Production time, e.g. 24
batch_size = "integer"                # Maximum batch size, e.g. 1
priority = "enum[low,normal,high,urgent]"  # Default priority

[recipes.metadata]
tier = "integer"                      # Technology tier, e.g. 1
tags = "array[string]"                # Categorization tags, e.g. ["weapons", "kinetic", "military"]

# Research Tree
[research_tree]
id = "string"                         # Tree identifier, e.g. "main_tech_tree"
name = "string"                       # Display name, e.g. "Main Technology Tree"

[research_tree.categories]
weapons = "string"                    # Category display name, e.g. "Weapon Technologies"
armor = "string"                      # Category display name, e.g. "Armor Technologies"
craft = "string"                      # Category display name, e.g. "Aircraft Technologies"
base = "string"                       # Category display name, e.g. "Base Facilities"

# Research Dependencies
[[research_tree.entries]]
id = "string"                         # Research ID, e.g. "basic_ballistics"
category = "string"                   # Research category, e.g. "unit_items"
prerequisites = "array[string]"       # Prerequisites, e.g. []

# =============================================================================
# ASSET MANAGEMENT API
# =============================================================================

[assets]

# Texture Assets
[assets.textures]
ui_elements = "string"                # UI texture atlas path, e.g. "ui/ui_elements.png"
unit_sprites = "string"               # Unit sprite sheet path, e.g. "units/units.png"
terrain_tiles = "string"              # Terrain tileset path, e.g. "terrain/terrain.png"

# Audio Assets
[assets.audio]
sound_effects = "table[string]string" # Sound effect paths, e.g. {shoot = "sfx/shoot.ogg"}
music = "table[string]string"         # Music paths, e.g. {main_theme = "music/main_theme.ogg"}

# Font Assets
[assets.fonts]
ui_font = "string"                    # UI font path, e.g. "fonts/ui_font.ttf"
title_font = "string"                 # Title font path, e.g. "fonts/title_font.ttf"

# Shader Assets
[assets.shaders]
post_processing = "string"            # Post-processing shader, e.g. "shaders/post.frag"
lighting = "string"                   # Lighting shader, e.g. "shaders/lighting.frag"

# Asset Metadata
[assets.metadata]
version = "string"                    # Asset version, e.g. "1.0.0"
compression = "enum[none,lz4,zlib]"  # Texture compression
filtering = "enum[nearest,linear]"    # Texture filtering, e.g. "nearest" for pixel art

# Sprite Sheet Definitions
[[spritesheets]]
id = "string"                         # Sprite sheet identifier, e.g. "ui_elements"
path = "string"                       # File path, e.g. "ui/ui_elements.png"
grid_size = "integer"                 # Grid unit size, e.g. 20

# Sprite Definitions
[spritesheets.sprites]
button_normal.x = "integer"           # Sprite X coordinate, e.g. 0
button_normal.y = "integer"           # Sprite Y coordinate, e.g. 0
button_normal.width = "integer"       # Sprite width, e.g. 20
button_normal.height = "integer"      # Sprite height, e.g. 20
button_hover.x = "integer"            # Sprite X coordinate, e.g. 20
button_hover.y = "integer"            # Sprite Y coordinate, e.g. 0
button_hover.width = "integer"        # Sprite width, e.g. 20
button_hover.height = "integer"       # Sprite height, e.g. 20
button_pressed.x = "integer"          # Sprite X coordinate, e.g. 40
button_pressed.y = "integer"          # Sprite Y coordinate, e.g. 0
button_pressed.width = "integer"      # Sprite width, e.g. 20
button_pressed.height = "integer"     # Sprite height, e.g. 20

# =============================================================================
# SERVICE CONFIGURATION API
# =============================================================================

[services]

# Core Services
[services.core]
event_bus.enabled = "boolean"         # Event bus enabled, e.g. true
event_bus.priority = "integer"        # Event bus priority, e.g. 1
telemetry.enabled = "boolean"         # Telemetry enabled, e.g. true
telemetry.priority = "integer"        # Telemetry priority, e.g. 2
logger.enabled = "boolean"            # Logger enabled, e.g. true
logger.priority = "integer"           # Logger priority, e.g. 3
logger.level = "string"               # Logger level, e.g. "info"
rng.enabled = "boolean"               # RNG enabled, e.g. true
rng.priority = "integer"              # RNG priority, e.g. 4
asset_cache.enabled = "boolean"       # Asset cache enabled, e.g. true
asset_cache.priority = "integer"      # Asset cache priority, e.g. 5
audio.enabled = "boolean"             # Audio service enabled, e.g. true
audio.priority = "integer"            # Audio service priority, e.g. 6

# Game Services
[services.game]
data_registry.enabled = "boolean"     # Data registry enabled, e.g. true
data_registry.priority = "integer"    # Data registry priority, e.g. 10
mod_loader.enabled = "boolean"        # Mod loader enabled, e.g. true
mod_loader.priority = "integer"       # Mod loader priority, e.g. 11
save_service.enabled = "boolean"      # Save service enabled, e.g. true
save_service.priority = "integer"     # Save service priority, e.g. 12
turn_manager.enabled = "boolean"      # Turn manager enabled, e.g. true
turn_manager.priority = "integer"     # Turn manager priority, e.g. 13

[services.data_registry]
catalogs = "table"                     # Data catalogs, e.g. {units = {...}, items = {...}}
source_tracking = "boolean"            # Track mod sources, e.g. true
validation = "boolean"                 # Validate data on registration, e.g. true

[services.data_registry.catalogs_available]
units = "string"                       # Unit catalog name, e.g. "units"
items = "string"                       # Item catalog name, e.g. "items"
weapons = "string"                     # Weapon catalog name, e.g. "weapons"
armor = "string"                       # Armor catalog name, e.g. "armor"
missions = "string"                    # Mission catalog name, e.g. "missions"
facilities = "string"                  # Facility catalog name, e.g. "facilities"
research = "string"                    # Research catalog name, e.g. "research"

# UI Services
[services.ui]
scene_manager.enabled = "boolean"     # Scene manager enabled, e.g. true
scene_manager.priority = "integer"    # Scene manager priority, e.g. 20
gui_renderer.enabled = "boolean"      # GUI renderer enabled, e.g. true
gui_renderer.priority = "integer"     # GUI renderer priority, e.g. 21
input_handler.enabled = "boolean"     # Input handler enabled, e.g. true
input_handler.priority = "integer"    # Input handler priority, e.g. 22

# Service Dependencies
[services.dependencies]
data_registry = "array[string]"        # Dependencies, e.g. ["logger", "telemetry"]
mod_loader = "array[string]"           # Dependencies, e.g. ["data_registry", "logger"]
save_service = "array[string]"         # Dependencies, e.g. ["logger", "telemetry"]

# =============================================================================
# STATE MANAGEMENT API
# =============================================================================

[states]
stack = "table"                        # State stack instance managing game states
current = "string"                     # Current active state name, e.g. "main_menu"

[states.available]
main_menu = "string"                   # Main menu state, e.g. "main_menu"
geoscape = "string"                    # Geoscape state, e.g. "geoscape"
basescape = "string"                   # Base management state, e.g. "basescape"
battlescape = "string"                 # Tactical combat state, e.g. "battlescape"
interception = "string"                # Interception state, e.g. "interception"
briefing = "string"                    # Mission briefing state, e.g. "briefing"
debriefing = "string"                  # Mission debriefing state, e.g. "debriefing"
load = "string"                        # Load game state, e.g. "load"
options = "string"                     # Options menu state, e.g. "options"
credits = "string"                     # Credits state, e.g. "credits"
manufacturing = "string"               # Manufacturing state, e.g. "manufacturing"
research = "string"                    # Research state, e.g. "research"
new_game = "string"                    # New game state, e.g. "new_game"
test = "string"                        # Test state, e.g. "test"

[states.stack_operations]
push = "function"                      # Push new state onto stack, e.g. push("geoscape", data)
pop = "function"                       # Pop current state from stack
clear = "function"                     # Clear all states from stack
peek = "function"                      # Get current state without removing it

# =============================================================================
# EVENT SYSTEM API
# =============================================================================

[event_system]

# Core Events
[event_system.core]
game_initialized.priority = "integer" # Game initialized priority, e.g. 1
game_initialized.async = "boolean"    # Game initialized async, e.g. false
game_shutdown.priority = "integer"    # Game shutdown priority, e.g. 100
game_shutdown.async = "boolean"       # Game shutdown async, e.g. false
mod_loaded.priority = "integer"       # Mod loaded priority, e.g. 10
mod_loaded.async = "boolean"          # Mod loaded async, e.g. true

# Game State Events
[event_system.game]
difficulty_changed.priority = "integer" # Difficulty changed priority, e.g. 20
difficulty_changed.async = "boolean"  # Difficulty changed async, e.g. false
campaign_started.priority = "integer" # Campaign started priority, e.g. 21
campaign_started.async = "boolean"    # Campaign started async, e.g. false
campaign_ended.priority = "integer"   # Campaign ended priority, e.g. 22
campaign_ended.async = "boolean"      # Campaign ended async, e.g. false

# Battlescape Events
[event_system.battlescape]
mission_started.priority = "integer"  # Mission started priority, e.g. 30
mission_started.async = "boolean"     # Mission started async, e.g. false
turn_started.priority = "integer"     # Turn started priority, e.g. 31
turn_started.async = "boolean"        # Turn started async, e.g. false
unit_action.priority = "integer"      # Unit action priority, e.g. 32
unit_action.async = "boolean"         # Unit action async, e.g. false
mission_ended.priority = "integer"    # Mission ended priority, e.g. 33
mission_ended.async = "boolean"       # Mission ended async, e.g. false

# Geoscape Events
[event_system.geoscape]
time_advanced.priority = "integer"    # Time advanced priority, e.g. 40
time_advanced.async = "boolean"       # Time advanced async, e.g. true
mission_spawned.priority = "integer"  # Mission spawned priority, e.g. 41
mission_spawned.async = "boolean"     # Mission spawned async, e.g. true
province_changed.priority = "integer" # Province changed priority, e.g. 42
province_changed.async = "boolean"    # Province changed async, e.g. true

# Event Handlers
[event_system.handlers]
mod_event_handlers = "string"          # Mod event handler pattern, e.g. "mods/*/scripts/events.lua"
core_event_handlers = "string"         # Core event handler path, e.g. "src/events/"

# =============================================================================
# LOCALIZATION API
# =============================================================================

# Supported Languages
[[languages]]
code = "string"                       # Language code, e.g. "en"
name = "string"                       # Display name, e.g. "English"
native_name = "string"                # Native name, e.g. "English"
fallback = "string"                   # Fallback language, e.g. ""

# Localization Settings
[localization]
default_language = "string"           # Default language, e.g. "en"
text_direction = "enum[ltr,rtl]"      # Text direction
font_fallbacks = "array[string]"      # Font fallbacks, e.g. ["ui_font", "fallback_font"]

# Translation Strings
[localization.ui_strings]
main_menu = "string"                  # UI strings, e.g. "Main Menu"
new_game = "string"                   # e.g. "New Game"
load_game = "string"                  # e.g. "Load Game"
options = "string"                    # e.g. "Options"
quit = "string"                       # e.g. "Quit"

[localization.game_terms]
soldier = "string"                    # Game strings, e.g. "Soldier"
rifle = "string"                      # e.g. "Assault Rifle"

[localization.status_messages]
loading = "string"                    # Status messages, e.g. "Loading..."
saving = "string"                     # e.g. "Saving..."
error = "string"                      # e.g. "Error"

[localization.tooltip_text]
rifle_damage = "string"               # Tooltips, e.g. "Deals {damage} kinetic damage"
soldier_health = "string"             # e.g. "Health: {current}/{max}"

# =============================================================================
# VALIDATION SCHEMAS
# =============================================================================

[schemas]

# Unit Validation Schema
[schemas.unit]
required_fields = "array[string]"     # Required fields, e.g. ["id", "name", "class", "stats"]

[schemas.unit.field_types]
id = "string"                         # Field type for id, e.g. "string"
name = "string"                       # Field type for name, e.g. "string"
class = "string"                      # Field type for class, e.g. "string"

[schemas.unit.stats]
required_fields = "array[string]"     # Required stat fields, e.g. ["health", "stamina", "accuracy"]

[schemas.unit.stats.field_types]
health = "integer"                    # Field type for health, e.g. "integer"
stamina = "integer"                   # Field type for stamina, e.g. "integer"
accuracy = "integer"                  # Field type for accuracy, e.g. "integer"

range_checks = "table[string]{min: number, max: number}"  # Range validation, e.g. {health = {min = 1, max = 1000}}

# Item Validation Schema
[schemas.item]
required_fields = "array[string]"     # Required fields, e.g. ["id", "name", "type"]

[schemas.item.field_types]
id = "string"                         # Field type for id, e.g. "string"
name = "string"                       # Field type for name, e.g. "string"
type = "string"                       # Field type for type, e.g. "string"

enum_checks = "table[string]array[string]"  # Enum validation, e.g. {type = ["weapon", "armor"]}

# Mission Validation Schema
[schemas.mission]
required_fields = "array[string]"     # Required fields, e.g. ["id", "name", "type", "difficulty"]

[schemas.mission.field_types]
id = "string"                         # Field type for id, e.g. "string"
name = "string"                       # Field type for name, e.g. "string"
type = "string"                       # Field type for type, e.g. "string"
difficulty = "string"                 # Field type for difficulty, e.g. "string"

enum_checks = "table[string]array[string]"  # Enum validation, e.g. {difficulty = ["easy", "medium", "hard"]}

# Mod Validation Schema
[schemas.mod]
required_fields = "array[string]"     # Required fields, e.g. ["id", "name", "version"]

[schemas.mod.field_types]
id = "string"                         # Field type for id, e.g. "string"
name = "string"                       # Field type for name, e.g. "string"
version = "string"                    # Field type for version, e.g. "string"

pattern_checks = "table[string]string" # Pattern validation, e.g. {version = "^\\d+\\.\\d+\\.\\d+$"}

# =============================================================================
# GRID AND VISUAL STANDARDS
# =============================================================================

[grid]
unit_size = "integer"                 # Base grid unit (pixels), e.g. 20
scale_factor = "float"                # Display scale factor, e.g. 1.0

[grid.resolution]
width = "integer"                     # Internal width, e.g. 800
height = "integer"                    # Internal height, e.g. 600

[alignment]
ui_elements = "enum[grid,pixel]"      # UI element alignment, e.g. "grid"
text = "enum[baseline,center,left,right]"  # Text alignment, e.g. "baseline"
icons = "enum[center,top-left,bottom-right]"  # Icon alignment, e.g. "center"

[spacing]
element_margin = "integer"            # Grid units between elements, e.g. 1
section_padding = "integer"           # Grid units section padding, e.g. 2
dialog_border = "integer"             # Dialog border width, e.g. 1

[colors]
primary = "string"                    # Primary UI color, e.g. "#4A90E2"
secondary = "string"                  # Secondary UI color, e.g. "#7ED321"
accent = "string"                     # Accent color, e.g. "#F5A623"
error = "string"                      # Error color, e.g. "#D0021B"
warning = "string"                    # Warning color, e.g. "#F8E71C"
success = "string"                    # Success color, e.g. "#7ED321"

[typography]
ui_font_size = "integer"              # Base UI font size, e.g. 16
title_font_size = "integer"           # Title font size, e.g. 24
small_font_size = "integer"           # Small text font size, e.g. 12
line_height = "float"                 # Line height multiplier, e.g. 1.2

# =============================================================================
# ASSET STANDARDS
# =============================================================================

[utilities.toml]
loader.enabled = "boolean"            # TOML loader enabled, e.g. true
loader.strict_mode = "boolean"        # TOML loader strict mode, e.g. true
supported_version = "string"            # TOML specification version, e.g. "1.0"
encoding = "string"                     # File encoding, e.g. "UTF-8"
error_handling = "enum[strict,lax,silent]"  # Parse error handling, e.g. "strict"

[utilities.toml.features]
arrays = "boolean"                      # Array support, e.g. true
tables = "boolean"                      # Table support, e.g. true
inline_tables = "boolean"               # Inline table support, e.g. true
array_tables = "boolean"                # Array of tables support, e.g. true
comments = "boolean"                    # Comment support, e.g. true
strings = "boolean"                     # String types support, e.g. true

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================

[rendering]
target_fps = "integer"                # Target frame rate, e.g. 60
vsync = "boolean"                     # Vertical sync, e.g. true
max_draw_calls = "integer"            # Maximum draw calls per frame, e.g. 1000
texture_memory_limit = "integer"      # MB texture memory limit, e.g. 256

[systems]
max_particles = "integer"             # Maximum particle effects, e.g. 1000
max_entities = "integer"              # Maximum entities, e.g. 500
max_lights = "integer"                # Maximum dynamic lights, e.g. 8

[memory]
gc_threshold = "integer"              # MB garbage collection threshold, e.g. 100
texture_cache_size = "integer"        # MB texture cache, e.g. 50
audio_cache_size = "integer"          # MB audio cache, e.g. 20

[threading]
worker_threads = "integer"            # Background worker threads, e.g. 2
max_concurrent_loads = "integer"      # Maximum concurrent asset loads, e.g. 4

[profiling]
enabled = "boolean"                   # Enable performance profiling, e.g. false
log_threshold = "float"               # Frame time threshold (ms), e.g. 16.67
profile_targets = "array[string]"     # Profile targets, e.g. ["rendering", "logic", "loading"]

# =============================================================================
# DEBUG AND DEVELOPMENT API
# =============================================================================

[development.debug]
enabled = "boolean"                   # Enable debug features, e.g. true
console = "boolean"                   # Show debug console, e.g. true
logging.level = "string"              # Logging level, e.g. "info"
logging.file = "string"               # Logging file, e.g. "logs/debug.log"

[development]
show_fps = "boolean"                  # Show FPS counter, e.g. true
show_grid = "boolean"                 # Show UI grid overlay, e.g. false
show_collision = "boolean"            # Show collision boxes, e.g. false
wireframe_mode = "boolean"            # Wireframe rendering, e.g. false

[development.profiling]
enabled = "boolean"                   # Enable profiler, e.g. false
detailed = "boolean"                  # Detailed profiling, e.g. false
output_file = "string"                # Profile output file, e.g. "logs/profile.json"

[testing]
mock_services = "boolean"             # Use mock services, e.g. false
fast_forward = "boolean"              # Fast-forward time, e.g. false
infinite_resources = "boolean"        # Unlimited resources, e.g. false

[cheats]
enabled = "boolean"                   # Enable cheat codes, e.g. false
unlock_all = "boolean"                # Unlock all content, e.g. false
god_mode = "boolean"                  # Invincible units, e.g. false

# =============================================================================
# ERROR HANDLING AND LOGGING
# =============================================================================

[errors]

[levels]
fatal.code = "integer"                # Fatal error code, e.g. 1
fatal.terminate = "boolean"           # Fatal error terminates, e.g. true
error.code = "integer"                # Error code, e.g. 2
error.terminate = "boolean"           # Error terminates, e.g. false
warning.code = "integer"              # Warning code, e.g. 3
warning.terminate = "boolean"         # Warning terminates, e.g. false
info.code = "integer"                 # Info code, e.g. 4
info.terminate = "boolean"            # Info terminates, e.g. false
debug.code = "integer"                # Debug code, e.g. 5
debug.terminate = "boolean"           # Debug terminates, e.g. false

[categories]
mod_loading = "string"                # Mod loading errors, e.g. "mod_system"
data_parsing = "string"               # Data parsing errors, e.g. "data_loader"
asset_loading = "string"              # Asset loading errors, e.g. "asset_manager"
game_logic = "string"                 # Game logic errors, e.g. "game_core"
ui_rendering = "string"               # UI rendering errors, e.g. "ui_system"

[recovery]
mod_failure = "enum[disable_mod,ignore,abort]"      # Mod failure recovery, e.g. "disable_mod"
data_failure = "enum[use_defaults,ignore,abort]"    # Data failure recovery, e.g. "use_defaults"
asset_failure = "enum[use_placeholders,ignore,abort]" # Asset failure recovery, e.g. "use_placeholders"

[logging]
format = "string"                     # Log format, e.g. "{timestamp} [{level}] {category}: {message}"
timestamp_format = "string"           # Timestamp format, e.g. "%Y-%m-%d %H:%M:%S"
max_file_size = "integer"             # MB per log file, e.g. 10
max_files = "integer"                 # Maximum log files, e.g. 5

# =============================================================================
# SAVE/LOAD API
# =============================================================================

[save_format]
version = "string"                    # Save format version, e.g. "1.0"
compression = "enum[none,lz4,zlib]"  # Compression algorithm
encryption = "enum[none,aes]"         # Encryption method

[sections]
metadata.required = "boolean"         # Metadata required, e.g. true
metadata.compressed = "boolean"       # Metadata compressed, e.g. false
game_state.required = "boolean"       # Game state required, e.g. true
game_state.compressed = "boolean"     # Game state compressed, e.g. true
campaign_data.required = "boolean"    # Campaign data required, e.g. true
campaign_data.compressed = "boolean"  # Campaign data compressed, e.g. true
mod_data.required = "boolean"         # Mod data required, e.g. false
mod_data.compressed = "boolean"       # Mod data compressed, e.g. true
user_settings.required = "boolean"    # User settings required, e.g. false
user_settings.compressed = "boolean"  # User settings compressed, e.g. false

[metadata]
required_fields = "array[string]"     # Required metadata fields, e.g. ["version", "timestamp", "campaign_id"]

[metadata.field_types]
version = "string"                    # Field type for version, e.g. "string"
timestamp = "string"                  # Field type for timestamp, e.g. "string"
campaign_id = "string"                # Field type for campaign_id, e.g. "string"

[validation]
max_save_size = "integer"             # MB maximum save size, e.g. 50
checksum = "enum[crc32,md5,sha256]"   # Integrity check method
backup_copies = "integer"             # Number of backup saves, e.g. 3

# =============================================================================
# NETWORK AND MULTIPLAYER API (FUTURE)
# =============================================================================

[network]
enabled = "boolean"                   # Enable networking, e.g. false
max_players = "integer"               # Maximum players, e.g. 1 (single-player only)
protocol_version = "string"           # Network protocol version, e.g. "1.0"

[connection]
timeout = "integer"                   # Connection timeout (seconds), e.g. 30
retry_attempts = "integer"            # Connection retry attempts, e.g. 3
bandwidth_limit = "integer"           # KB/s bandwidth limit, e.g. 100

[sync]
tick_rate = "integer"                 # Network tick rate (Hz), e.g. 20
interpolation = "boolean"             # Client-side interpolation, e.g. true
prediction = "boolean"                # Client-side prediction, e.g. true
compression = "enum[none,lz4,zlib]"  # Network compression
