#--------------------------------------------------------------
#  BIS API.yml â€” schema + API reference
#--------------------------------------------------------------
#
# ðŸ“‹ SCHEMA FILE: Complete YAML structure with field descriptions and examples
# ðŸ“– DOCUMENTATION: See BIS API.md for comprehensive guides and best practices
#
# ðŸ”— Quick References:
# - Business context: BIS API.md#business-context--architecture
# - Best practices: BIS API.md#best-practices
# - AI usage guide: BIS API.md#usage-guide-for-ai-agents
# - Job templates: BIS API.md#building-jobs-from-descriptions
#
# ðŸŽ¯ Purpose: Authoritative schema for BIS data processing workflows
# ðŸ‘¥ Audience: Developers, analysts, AI agents building BIS jobs
#
# âš¡ Key Features:
# - Normalized YAML with anchors (&API_*) for reusability
# - Type-tokenized fields (string, integer, bool, list, <str>)
# - Business-context comments for each field
# - AI-friendly structure for automated processing
#
# ðŸš€ Usage:
# 1. Use as schema reference for job validation
# 2. Copy anchors for new job development
# 3. Reference BIS API.md for implementation details
#
#--------------------------------------------------------------
#
#--------------------------------------------------------------
 
#--------------------------------------------------------------
# SECTION META
#--------------------------------------------------------------
# Purpose:
# - Metadata for this schema (versioning, owner, id).
# - Used for traceability and schema evolution.
# Where used:
# - Top-level of generated spec files; workspace/*.yml
# Python implementation:
# - engine/src/high/spec_builder.py, engine/src/high/workspace.py
# Validation hints:
# - Update when changing schema semantics; used for traceability.
# - Fields:
#   - schema_version: string
#   - updated: string (ISO date)
#   - owner: string
#   - id: string
#--------------------------------------------------------------
meta:
  schema_version: string                         # Schema version (1.0)
  updated: string                                # Last updated date (ISO) (2025-08-29)
  owner: string                                  # Schema owner (BIS Team)
  id: string                                     # Schema unique id (BIS-API2)

#--------------------------------------------------------------
#   COLUMN_FORMATTING
#--------------------------------------------------------------
# Purpose:
#   Report-specific column formatting using workspace templates for single Excel file.
# Business Context:
#   Defines how specific columns should be formatted in individual reports. Uses templates defined at workspace level
#   but applies them to specific report columns. Controls labels, widths, formats, and conditional rules per column.
# Where used:
#   workspace/<TENANT>/formats.yml, Excel renderer, individual report formatting
# Python implementation:
#   engine/src/excl/excel_table.py, engine/src/low/styler.py
# Validation hints:
#   Each key is a column name; values are formatting presets. Use for report-specific column customization.
#--------------------------------------------------------------
column_formatting:
  <str>:
    - label: string                              # Display label override for header cell (Incident ID)
      label_alt: string                          # Alternate label for double headers (ID (alt))
      template: string                           # Reference to columns_class template (default_col)
      width: integer                             # Column width override (24)
      format: string                             # Reference to formats_class format (number_fmt)
      rules: list                                # List of rule names from rules_class (["highlight_negative"])
      rules_filter_sql: list                     # SQL predicates for conditional formatting (["value<0"])
      skip_sheet: string                         # Sheet label to skip this config (Sheet2)
      formats: list                              # Future: Dynamic format switching (["fmt1", "fmt2"])
      formats_filter_sql: list                   # Future: SQL predicates for dynamic formats (["value>100"])
      hyperlink:
        text: string                             # Hyperlink text (ID)
        url: string                              # Hyperlink url (internal:'Sheet'!A1)
      compare:
        - field: string                          # Field for comparison (score)
          maximum: integer                       # Maximum value for compare (100)
          field_max: string                      # Field for maximum comparison (max_score)
          field_min: string                      # Field for minimum comparison (min_score)
          minimum: integer                       # Minimum value for compare (0)
          criteria: string                       # Criteria for compare (>90)
          filter_sheet: list                     # List of sheets for compare (["Sheet1"])

# -------------------------------------------------------------
#    RULES_CLASS |    &API_WORKSPACE_RULES
# -------------------------------------------------------------
# Purpose:
#   Declarative rules for Excel conditional formatting, mapped to XlsxWriter's conditional_format API.
#   Enables reusable, named rules for highlighting, data bars, icon sets, etc.
# Where used:
#   workspace/<TENANT>/formats.yml under workspace_formats.rules_class
#   Referenced by: workspace_formats.columns_class.<col_template>.rules, column_formatting[].rules, stylers[].tables.rules
# Python implementation:
#    engine/src/excl/excel_table.py |    TExcelTable._apply_rules_to_range, etc.
#    engine/src/low/styler.py |    TStyler, sheet/table-level rules
# Validation hints:
#   type: one of cell, formula, text, date, top, bottom, duplicate, unique, color_scale, data_bar, icon_set
#   For type="formula": formula must start with "=" and use valid A1 references
#   For "between"/"not_between": provide value+second_value or a 2-item values list
#   One of format or format_inline is required for visual rules (except some icon_set uses)
#   multi_range: space-separated A1 ranges or null
#   For data_bar: show_value translates to XlsxWriter bar_only inverse; colors must be hex
#   priority: lower value = earlier evaluation; stop_if_true halts subsequent rules on overlap
# -------------------------------------------------------------
rules_class: &API_WORKSPACE_RULES
  - name: string                                 # Unique rule identifier (highlight_negative)
    active: bool                                 # Whether to evaluate/apply the rule (true)
    sheet: string                                # Optional sheet label to pin the rule (Summary)
    range: string                                # A1 range for cell-scoped rules (A2:A100)
    apply_to: string                             # Scope of rule: cells, rows, columns, or header ("cells")
    type: string                                 # Rule type (cell, formula, text, ...) (cell)
    operator: string                             # Comparison operator for cell-based rules (<)
    value: string                                # Primary value for comparison or rule parameter (0)
    second_value: string                         # Upper bound for between/not_between rules (100)
    values: list                                 # Value list for between, color_scale, thresholds ([0, 100])
    formula: string                              # Excel-style formula for type="formula" rules (=A2<0)
    text:
      match_type: string                         # Text match type (contains)
      value: string                              # Text value (error)
    date_criteria:
      when: string                               # Date criteria (before)
      operator: string                           # Date operator (<)
    top_bottom:
      mode: string                               # Top/bottom mode (top)
      rank: integer                              # Rank for top/bottom (10)
      percent: bool                              # Percent flag for top/bottom (true)
    duplicate: bool                              # Duplicate flag (false)
    stop_if_true: bool                           # Stop evaluating lower-priority rules on overlap (false)
    priority: integer                            # Rule evaluation order; lower numbers run first (1)
    multi_range: string                          # Multi-range A1 references (A2:A10 B2:B10)
    format: string                               # Reference to a named format in formats_class (number_format)
    format_inline:
      font_color: string                         # Inline font color (#FF0000)
      bg_color: string                           # Inline background color (#FFFF00)
      bold: bool                                 # Inline bold (true)
    color_scale:
      colors:
        - pos: integer                           # Color scale position (1)
          color: string                          # Color scale color (#FF0000)
          type: string                           # Color scale type (min)
    data_bar:
      min_type: string                           # Data bar min type (min)
      min_value: integer                         # Data bar min value (0)
      max_type: string                           # Data bar max type (max)
      max_value: integer                         # Data bar max value (100)
      color: string                              # Data bar color (#00FF00)
      show_value: bool                           # Data bar show value (true)
      negative_fill_color: string                # Data bar negative fill color (#FF0000)
      bar_border_color: string                   # Data bar border color (#000000)
      bar_negative_border_color: string          # Data bar negative border color (#FF0000)
    icon_set:
      style: string                              # Icon set style (3_traffic_lights)
      reverse: bool                              # Icon set reverse (false)
      thresholds:
        - type: string                           # Icon set threshold type (number)
          value: integer                         # Icon set threshold value (50)


#--------------------------------------------------------------
#    FORMATS_CLASS |    &API_WORKSPACE_FORMAT
#--------------------------------------------------------------
# Purpose:
#   Workspace-level templates for Excel formats and conditional rules using xlsxwriter module.
# Business Context:
#   Defines reusable formatting templates for single customer workspace. Controls fonts, colors, borders, and conditional
#   formatting rules. Used by xlsxwriter library for consistent Excel output across all reports for that customer.
# Where used:
#   workspace.format_report, stylers, column_formatting
# Python implementation:
#   engine/src/excl/excel_format.py, engine/src/high/workspace.py
# Validation hints:
#   Each key is a format name; values are format presets. Use for customer-specific formatting standards.
#--------------------------------------------------------------
formats_class: &API_WORKSPACE_FORMAT
  font_name: string                              # Font family for cell text (Arial)
  font_size: integer                             # Font size in points (11)
  bold: bool                                     # Bold text flag (true)
  italic: bool                                   # Italic text flag (false)
  underline: string                              # Underline style (false, true, ...) (single)
  font_color: string                             # Font color hex or name (#FF0000)
  align: string                                  # Horizontal alignment (center)
  valign: string                                 # Vertical alignment (top)
  text_wrap: bool                                # Enable/disable text wrapping (true)
  rotation: integer                              # Text rotation (0)
  indent: integer                                # Indent level (0)
  border: integer                                # Border style (1)
  border_color: string                           # Border color (#000000)
  border_left: integer                           # Left border style (1)
  border_right: integer                          # Right border style (1)
  border_top: integer                            # Top border style (1)
  border_bottom: integer                         # Bottom border style (1)
  border_diagonal: integer                       # Diagonal border style (0)
  bg_color: string                               # Cell background color (#F0F0F0)
  gradient:
    colors: list                                 # Gradient colors (["#FFFFFF", "#F0F0F0"])
    positions: list                              # Gradient positions ([0, 1])
  num_format: string                             # Excel number/date format string (#,##0.00)
  date_format: string                            # Excel date format string (yyyy-mm-dd)
  locked: bool                                   # Sheet protection lock flag for the cell (false)
  hidden: bool                                   # Hide cell (false)
  scale_with_doc: bool                           # Scale with document (true)
  align_text_with_merge: bool                    # Align text with merge (false)

#--------------------------------------------------------------
#    WORKSPACE_FORMATS |    &API_WORKSPACE_FORMATS
#--------------------------------------------------------------
# Purpose:
#   Global workspace-level color and format definitions for Excel/reporting. Used in top-level workspace formats and report templates.
# Where used:
#   Top-level workspace formats and report templates
# Python implementation:
#   engine/src/high/workspace.py, engine/src/low/styler.py
# Validation hints:
#   colors: Named color tokens used across formats/rules
#   formats_class: Named reusable formats
#   rules_class: Named reusable conditional rules
#   columns_class: Column templates referencing formats/rules
#--------------------------------------------------------------
workspace_formats: &API_WORKSPACE_FORMATS
  colors:
    <str>: string                                # Named color tokens used across formats/rules (primary: #FF0000)
  formats_class:
    <str>:
      font_name: string                          # Font family for cell text (Arial)
      font_size: integer                         # Font size in points (11)
      bold: bool                                 # Bold text flag (true)
      italic: bool                               # Italic text flag (false)
      underline: string                          # Underline style (false, true, ...) (single)
      font_color: string                         # Font color hex or name (#FF0000)
      align: string                              # Horizontal alignment (center)
      valign: string                             # Vertical alignment (top)
      text_wrap: bool                            # Enable/disable text wrapping (true)
      rotation: integer                          # Text rotation (0)
      indent: integer                            # Indent level (0)
      border: integer                            # Border style (1)
      bg_color: string                           # Cell background color (#F0F0F0)
      num_format: string                         # Excel number/date format string (#,##0.00)
      locked: bool                               # Sheet protection lock flag for the cell (false)
  rules_class:
    <str>:
      name: string                               # Rule name (negative)
      active: bool                               # Rule active flag (true)
      range: string                              # Target range (A1:A10)
      type: string                               # Rule type (cell)
      operator: string                           # Rule operator (<)
      value: string                              # Rule value (0)
  columns_class:
    <str>:
      width: integer                             # Column width (20)
      format: string                             # Format name (header_fmt)
      rules: list                                # List of rule names (["negative"])

#--------------------------------------------------------------
#    TABLE |    &API_TABLE
#--------------------------------------------------------------
# Purpose:
#   Basic SQL block defining tables in datalake used in many places, with limitations. Canonical table metadata for ETL/reporting.
# Business Context:
#   Core component for data processing - defines how data tables are structured and accessed. Used extensively across pipelines,
#   snapshots, and indicators. Has limitations in complex transformations - use data_model for advanced ETL.
# Where used:
#   pipelines, snapshots, indicators, data_model transformations
# Python implementation:
#   engine/src/low/table.py, engine/src/low/snapshot.py, engine/src/high/indicator.py
# Validation hints:
#   Each table must have a unique schema_table and description. Keep SQL simple due to limitations.
#--------------------------------------------------------------
table: &API_TABLE
  active: bool                                   # Whether to process this table config (true)
  schema_table: string                           # DuckDB view name and Parquet filename base (SLA.TABLE)
  description: string                            # Human-friendly description (MTD snapshot table)
  replace_table:
    <str>: string                                # Post-select value replacements (status: OK)
  replace_table_sql:
    <str>: string                                # SQL-based value replacements (status: OK)
  replace_na:
    <str>: string                                # NA value replacements (col1: N/A)
  replace_na_all: string                         # Replace all NA with this value (N/A)
  replace_with_na:
    <str>: string                                # Replace value with NA (col1: '')
  sql_ref: bool                                  # Use sql_ref_file for SQL definitions (false)
  csv_file: string                               # Path to CSV input (input/data.csv)
  sql_file: string                               # Path to SQL file relative to the .yml (queries/mytable.sql)
  sql_code: string                               # Direct DuckDB SQL SELECT (SELECT * FROM ...)
  union_details:
    columns: list                                # Columns for UNION (["col1", "col2"])
    tables:
      - table: string                            # Table name for UNION (T1)
        columns: list                            # Columns for this table (["col1", "col2"])
        filters: string                          # Filters for this table (status='OK')
  sql_code_replace_params:
    <str>: string                                # SQL code replace params (param1: value)
  sql_template: string                           # Reference to a registered SQL template (default_template)
  sql_params:
    <str>: string                                # SQL template params (param1: value)
  totals:
    columns: bool                                # Append summary columns (true)
    rows: bool                                   # Append summary rows (false)
  min_rows: integer                              # Ensure minimum rows for presentation (1)
  py_file:
    file: string                                 # Path to Python script returning a DataFrame (scripts/etl.py)
    function: string                             # Python function name (load_data)
    params:
      <str>: string                              # Python function params (param1: value)
  copy_to: string                                # Post-processing copy of produced Parquet (archive/backup.parquet)
  move_to: string                                # Post-processing move of produced Parquet (final/output.parquet)
  use_unnest: bool                               # Use UNNEST for array columns (false)

#--------------------------------------------------------------
#    SNAPSHOTS |    &API_SNAPSHOT
#--------------------------------------------------------------
# Purpose:
#   Expanded table tracking numeric analytics, KPIs with date/owner/KPI/value columns for SLA/KPI/metrics.
# Business Context:
#   Core numeric tracking component with built-in trend analysis. Tracks problems by numbers only using core columns
#   (date, owner, KPI name, value). Can calculate number of actions on the list. Essential for KPI dashboards and reporting.
# Where used:
#   indicators -> snapshots; workspace snapshots; KPI tracking and trend analysis
# Python implementation:
#    engine/src/low/snapshot.py |    TSnapshot
#    engine/src/high/indicator.py |    indicators[].snapshots
# Validation hints:
#   Each snapshot must have a unique name and reference a table config. Use for numeric KPI tracking.
#--------------------------------------------------------------
snapshots: &API_SNAPSHOT
  - name: string                                 # Snapshot identifier for logs/history (SLAINT014)
    active: bool                                 # Enable/disable snapshot processing (true)
    rank: integer                                # Processing order relative to other snapshots (1)
    description: string                          # Description of the snapshot (MTD snapshot)
    table: *API_TABLE                            # Nested table config (see &API_TABLE) (see table

#--------------------------------------------------------------
#    TRENDS |    &API_TREND
#--------------------------------------------------------------
# Purpose:
#   Persistent expanded table for historical data that grows over time - only component that adds data instead of overwriting.
# Business Context:
#   Unique persistent storage for trend analysis. Unlike other components that get overwritten, trends accumulate data
#   for specific owner/date/metric ID combinations. Essential for historical KPI analysis and long-term reporting.
# Where used:
#   indicators -> trends; report_specs -> trends; historical KPI analysis
# Python implementation:
#    engine/src/low/trend.py |    TTrend
#    engine/src/low/snapshot.py |    companion TTrend
#    engine/src/high/indicator.py |    trend operations
# Validation hints:
#   Each trend must have a unique name, schema_trend, and schema_table. Use for persistent historical data.
#--------------------------------------------------------------
trends: &API_TREND
  - name: string                                 # Trend identifier (MTD_TREND)
    active: bool                                 # Enable/disable trend processing (true)
    rank: integer                                # Processing order (1)
    description: string                          # Description of the trend (MTD trend)
    schema_trend: string                         # Output storage (SCHEMA.TABLE) for trend hist. (SLA.TREND)
    schema_table: string                         # Input table/view for current data (SLA.TABLE)
    unique_cols: list                            # Columns for deduplication (["ID"])
    filter: string                               # SQL filter for trend input (status='OK')
    period: string                               # Aggregation window (monthly)

#--------------------------------------------------------------
#    CHART_PARAMS_1 |    &API_CHART_PARAMS_1
#--------------------------------------------------------------
# Purpose:
#   Primary chart parameter blueprint for Excel chart generation.
# Where used:
#   charts -> params for standard chart configurations
# Python implementation:
#   engine/src/excl/excel_chart.py, engine/src/high/indicator.py
# Validation hints:
#   Each chart_params block should define legend, options, series, type, axes, and title.
#--------------------------------------------------------------
chart_params_1: &API_CHART_PARAMS_1
  legend:
    position: string                             # Legend position (top)
    font:
      name: string                               # Font name for legend text (Arial)
      size: integer                              # Font size for legend text (10)
      bold: bool                                 # Bold legend font (false)
      italic: bool                               # Italic legend font (false)
    layout:
      x: float                                   # Relative X layout when overlay used (0.5)
      y: float                                   # Relative Y layout (0.5)
    delete_series: list                          # Optional: delete series by 0-based index after building ([])
  options:
    x_scale: float                               # Image scaling when inserted (1.0)
    y_scale: float                               # Image scaling when inserted (1.0)
    x_offset: integer                            # X offset (0)
    y_offset: integer                            # Y offset (0)
    print_obj: bool                              # Print object (true)
    show_blanks: string                          # Show blanks as zero, gap, or span ("zero")
    show_hidden: bool                            # Show hidden cells (false)
    show_na: bool                                # Show NA values (true)
  series:
    - values: string                             # A1 range for Y values (=Sheet1!$B$2:$B$10)
      categories: string                         # A1 range for categories/X values (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Series 1)
      data_labels:
        value: bool                              # Show value labels (false)
        category: bool                           # Show category labels (false)
        series_name: bool                        # Show series name labels (false)
        percentage: bool                         # Show percentage labels (false)
        position: string                         # Label position (center)
        font:
          name: string                           # Label font name (Arial)
          size: integer                          # Label font size (9)
          color: string                          # Label font color (#000000)
      line:
        color: string                            # Line color (#000000)
        width: float                             # Line width (1.0)
        dash_type: string                        # Line dash type (solid)
        transparency: integer                    # Line transparency (0)
      fill:
        color: string                            # Fill color (#FFFFFF)
        transparency: integer                    # Fill transparency (0)
        gradient:
          colors: list                           # Gradient colors ([#FFFFFF, #000000])
          positions: list                        # Gradient positions ([0, 1])
      marker:
        type: string                             # Marker type (circle)
        size: integer                            # Marker size (5)
        border:
          color: string                          # Marker border color (#000000)
          width: integer                         # Marker border width (1)
        fill:
          color: string                          # Marker fill color (#FFFFFF)
      filter: string                             # Optional semantic filter (engine may ignore)
      filter_sql: string                         # DuckDB filter applied on source_table before range calc (status='OK')
      invert_if_negative: bool                   # Invert if negative (false)
      overlap: integer                           # Series overlap (0)
      gap: integer                               # Gap between series (150)
  type: string                                   # Chart type (column)
  subtype: string                                # Chart subtype (clustered)
  style: integer                                 # Chart style (1)
  chart_area:
    border:
      none: bool                                 # No border (false)
      color: string                              # Border color (#000000)
      width: integer                             # Border width (1)
      dash_type: string                          # Border dash type (solid)
    fill:
      color: string                              # Fill color (#FFFFFF)
      transparency: integer                      # Fill transparency (0)
      gradient:
        colors: list                             # Gradient colors ([#FFFFFF, #F0F0F0])
        positions: list                          # Gradient positions ([0, 1])
  plot_area:
    border:
      color: string                              # Border color (#000000)
      width: float                               # Border width (1.0)
      dash_type: string                          # Border dash type (solid)
    fill:
      color: string                              # Fill color (#FFFFFF)
      transparency: integer                      # Fill transparency (0)
      pattern:
        pattern: string                          # Pattern type (solid)
        fg_color: string                         # Foreground color (#000000)
        bg_color: string                         # Background color (#FFFFFF)
  title:
    name: string                                 # Chart title text (My Chart)
    overlay: bool                                # If true, title overlays chart area (false)
    layout:
      x: float                                   # Title X position (0.5)
      y: float                                   # Title Y position (0.0)
    name_font:
      name: string                               # Title font name (Arial)
      size: integer                              # Title font size (12)
      bold: bool                                 # Title font bold (true)
      italic: bool                               # Title font italic (false)
      color: string                              # Title font color (#000000)
  axis_x:
    name: string                                 # X axis name (Categories)
    name_font:
      name: string                               # X axis name font (Arial)
      size: integer                              # X axis name font size (10)
      bold: bool                                 # X axis name bold (false)
    num_font:
      name: string                               # X axis number font (Arial)
      size: integer                              # X axis number font size (9)
    major_gridlines:
      visible: bool                              # Show major gridlines (false)
      line:
        color: string                            # Gridline color (#D9D9D9)
        width: float                             # Gridline width (0.75)
        dash_type: string                        # Gridline dash type (solid)
    minor_gridlines:
      visible: bool                              # Show minor gridlines (false)
    crossing: string                             # Axis crossing point (auto)
    position: string                             # Axis position (bottom)
    min: string                                  # Minimum value (auto)
    max: string                                  # Maximum value (auto)
    major_unit: integer                          # Major unit (auto)
    minor_unit: float                            # Minor unit (auto)
    log_base: integer                            # Log base (10)
    reverse: bool                                # Reverse axis (false)
    date_axis: bool                              # Date axis (false)
    num_format: string                           # Number format (General)
    label_position: string                       # Label position (next_to_axis)
    text_axis: bool                              # Text axis (false)
  axis_y:
    name: string                                 # Y axis name (Values)
    name_font:
      name: string                               # Y axis name font (Arial)
      size: integer                              # Y axis name font size (10)
      bold: bool                                 # Y axis name bold (false)
    num_font:
      name: string                               # Y axis number font (Arial)
      size: integer                              # Y axis number font size (9)
    major_gridlines:
      visible: bool                              # Show major gridlines (true)
      line:
        color: string                            # Gridline color (#D9D9D9)
        width: float                             # Gridline width (0.75)
    crossing: integer                            # Axis crossing value (0)
    position: string                             # Axis position (left)
    min: integer                                 # Minimum value (auto)
    max: string                                  # Maximum value (auto)
    major_unit: integer                          # Major unit (auto)
    minor_unit: integer                          # Minor unit (auto)
    display_units: string                        # Display units (none)
    num_format: string                           # Number format (General)
    major_unit_type: string                      # Major unit type (auto)
  trendline:
    type: string                                 # Trendline type (linear)
    name: string                                 # Trendline name (Trendline)
    order: integer                               # Polynomial order (2)
    period: integer                               # Moving average period (2)
    forward: float                               # Forward periods (0)
    backward: float                              # Backward periods (0)
    intercept: integer                           # Intercept value (auto)
    display_equation: bool                       # Display equation (false)
    display_r_squared: bool                      # Display R-squared (false)
    line:
      color: string                              # Trendline color (#000000)
      width: float                               # Trendline width (1.0)
      dash_type: string                          # Trendline dash type (solid)
  up_down_bars:
    up:
      line:
        color: string                            # Up bar line color (#000000)
      fill:
        color: string                            # Up bar fill color (#00FF00)
    down:
      line:
        color: string                            # Down bar line color (#000000)
      fill:
        color: string                            # Down bar fill color (#FF0000)
  error_bars:
    type: string                                 # Error bar type (both)
    direction: string                            # Error bar direction (y)
    value: integer                               # Error bar value (1)
    line:
      color: string                              # Error bar line color (#000000)
      width: integer                             # Error bar line width (1)
    end_style: integer                           # Error bar end style (1)
  data_table:
    show_keys: bool                              # Show data table keys (false)
    horizontal_borders: bool                     # Show horizontal borders (true)
    vertical_borders: bool                       # Show vertical borders (true)
    outline_borders: bool                        # Show outline borders (true)
    font:
      name: string                               # Data table font name (Arial)
      size: integer                              # Data table font size (9)
  primary_axes: bool                             # Use primary axes (true)
  primary_major_gridlines: bool                  # Show primary major gridlines (true)
  primary_minor_gridlines: bool                  # Show primary minor gridlines (false)

#--------------------------------------------------------------
#    CHART_PARAMS_2 |    &API_CHART_PARAMS_2
#--------------------------------------------------------------
# Purpose:
#   Alternate chart params for mixed charts (multi-series config).
# Where used:
#   charts -> params for mixed/multi-series charts
# Python implementation:
#   engine/src/excl/excel_chart.py
# Validation hints:
#   Use for charts that require multi-series configuration with Y2 axis.
#--------------------------------------------------------------
chart_params_2: &API_CHART_PARAMS_2
  type: string                                   # Base chart type (column)
  series:
    - values: string                             # A1 ranges for series values (=Sheet1!$B$2:$B$10)
      categories: string                         # A1 ranges for categories (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Series 1)
      fill:
        color: string                            # Fill color (#FF0000)
    - values: string                             # A1 ranges for series values (=Sheet1!$C$2:$C$10)
      categories: string                         # A1 ranges for categories (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Series 2)
      fill:
        color: string                            # Fill color (#00FF00)
    - values: string                             # A1 ranges for series values (=Sheet1!$D$2:$D$10)
      categories: string                         # A1 ranges for categories (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Series 3)
      line:
        color: string                            # Line color (#0000FF)
        width: float                             # Line width (2.0)
      marker:
        type: string                             # Marker type (circle)
        size: integer                            # Marker size (6)
      y2_axis: bool                              # Use secondary Y axis (true)
      chart_type: string                         # Per-series chart type override (line)
  axis_y:
    name: string                                 # Primary Y axis name (Values)
    num_format: string                           # Primary Y axis number format (General)
  axis_y2:
    name: string                                 # Secondary Y axis name (Secondary Values)
    num_format: string                           # Secondary Y axis number format (General)
    position: string                             # Secondary Y axis position (right)
    crossing: string                             # Secondary Y axis crossing (auto)
  title:
    name: string                                 # Chart title (Mixed Chart)

#--------------------------------------------------------------
#    CHART_PARAMS_PIE |    &API_CHART_PARAMS_PIE
#--------------------------------------------------------------
# Purpose:
#   Pie-chart specific parameter set.
# Where used:
#   charts -> params for pie charts
# Python implementation:
#   engine/src/excl/excel_chart.py
# Validation hints:
#   Use to define rotation, data labels and leader lines.
#--------------------------------------------------------------
chart_params_pie: &API_CHART_PARAMS_PIE
  type: string                                   # Chart type (pie)
  rotation: integer                              # Rotation angle in degrees (0)
  series:
    - values: string                             # A1 range for values (=Sheet1!$B$2:$B$10)
      categories: string                         # A1 range for categories (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Pie Data)
      points: list                               # Per-slice formatting options ([])
      data_labels:
        value: bool                              # Show value labels (true)
        category: bool                           # Show category labels (true)
        percentage: bool                         # Show percentage labels (true)
        position: string                         # Label position (best_fit)
        leader_lines: bool                       # Show leader lines (false)
        font:
          name: string                           # Label font name (Arial)
          size: integer                          # Label font size (9)
  title:
    name: string                                 # Chart title (Pie Chart)
    name_font:
      name: string                               # Title font name (Arial)
      size: integer                              # Title font size (12)
      bold: bool                                 # Title font bold (true)

#--------------------------------------------------------------
#    CHART_PARAMS_SCATTER |    &API_CHART_PARAMS_SCATTER
#--------------------------------------------------------------
# Purpose:
#   Scatter/scatter-trend chart param blueprint.
# Where used:
#   charts -> params for scatter charts
# Python implementation:
#   engine/src/excl/excel_chart.py
# Validation hints:
#   Use to define marker styles and optional trendline settings.
#--------------------------------------------------------------
chart_params_scatter: &API_CHART_PARAMS_SCATTER
  type: string                                   # Chart type (scatter)
  series:
    - values: string                             # Y values A1 range (=Sheet1!$B$2:$B$10)
      categories: string                         # X values A1 range (=Sheet1!$A$2:$A$10)
      name: string                               # Series name (Data Points)
      marker:
        type: string                             # Marker type (circle)
        size: integer                            # Marker size (5)
        fill:
          color: string                          # Marker fill color (#FF0000)
      trendline:
        type: string                             # Trendline type (linear)
        display_equation: bool                   # Display equation (false)
        display_r_squared: bool                  # Display R-squared (false)
        line:
          color: string                          # Trendline color (#000000)
          width: integer                         # Trendline width (2)
          dash_type: string                      # Trendline dash type (solid)
  axis_x:
    name: string                                 # X axis name (X Values)
    num_format: string                           # X axis number format (General)
  axis_y:
    name: string                                 # Y axis name (Y Values)
    num_format: string                           # Y axis number format (General)
  title:
    name: string                                 # Chart title (Scatter Plot)

#--------------------------------------------------------------
#    CHARTS |    &API_CHART
#--------------------------------------------------------------
# Purpose:
#   Blueprint for chart definitions (placement, size, params).
# Where used:
#   indicators -> charts; report template specs
# Python implementation:
#   engine/src/excl/excel_chart.py, engine/src/high/indicator.py
# Validation hints:
#   Each chart must have a unique name, source_table, and params.
#--------------------------------------------------------------

charts: &API_CHART
  - name: string                                 # Unique chart blueprint name within indicator (KPI_Chart)
    description: string                          # Short description (Monthly KPI visualization)
    source_table: string                         # DuckDB view providing chart data (SLA.TABLE)
    period: list                                 # DuckDB filter expressions used to restrict source_table before ranges (["2025-08"])
    cell: string                                 # Excel cell anchor for insertion (A1)
    size:
      width: integer                             # Chart width in pixels (600)
      height: integer                            # Chart height in pixels (400)
    params: *API_CHART_PARAMS_1                  # Reference chart params anchor (see chart_params_1)
  - name: string                                 # Unique chart blueprint name (Pie_Chart)
    description: string                          # Short description (Category distribution)
    source_table: string                         # DuckDB view providing chart data (SLA.TABLE)
    period: list                                 # DuckDB filter expressions (["2025-08"])
    cell: string                                 # Excel cell anchor for insertion (B1)
    size:
      width: integer                             # Chart width in pixels (500)
      height: integer                            # Chart height in pixels (350)
    params: *API_CHART_PARAMS_PIE                # Reference chart params anchor (see chart_params_pie)
  - name: string                                 # Unique chart blueprint name (Mixed_Chart)
    description: string                          # Description of the chart (Mixed series visualization)
    source_table: string                         # DuckDB view providing data (SLA.TABLE)
    period: list                                 # Periods covered by the chart (["2025-08"])
    cell: string                                 # Excel cell anchor for chart (D2)
    size:                                        # Chart size (width, height)
      width: integer                             # Chart width in pixels (600)
      height: integer                            # Chart height in pixels (400)
    params: *API_CHART_PARAMS_2                  # Chart parameters (see chart_params_2)

  - name: string                                 # Unique chart blueprint name (Scatter_Chart)
    description: string                          # Description of the chart (Correlation analysis)
    source_table: string                         # DuckDB view providing data (SLA.TABLE)
    period: list                                 # Periods covered by the chart (["2025-08"])
    cell: string                                 # Excel cell anchor for chart (E2)
    size:                                        # Chart size (width, height)
      width: integer                             # Chart width in pixels (600)
      height: integer                            # Chart height in pixels (400)
    params: *API_CHART_PARAMS_SCATTER            # Chart parameters (see chart_params_scatter)

#--------------------------------------------------------------
#    TABLES |    &API_TABLE_STYLER
#--------------------------------------------------------------
# Purpose:
#   Table presentation metadata (caption, header formats, sizes) for Excel rendering.
# Where used:
#   stylers -> tables; indicators -> report_specs -> tables
# Python implementation:
#   engine/src/excl/excel_table.py, engine/src/excl/excel_widget.py
# Validation hints:
#   Each table must specify cell, source_table, and caption.
# External API reference:
# - XlsxWriter documentation: https://xlsxwriter.readthedocs.io/format.html
# - See also: https://xlsxwriter.readthedocs.io/worksheet.html#add_table
#--------------------------------------------------------------
tables: &API_TABLE_STYLER
  cell: string                                   # Excel cell anchor for table (A1)
  source_table: string                           # DuckDB view name for table data (SLA.TABLE)
  format_source_table: string                    # Format source table (optional) (FMT.TABLE)
  caption: string                                # Table caption (Incidents)
  caption_format: string                         # Format for caption (header_fmt)
  caption_height: integer                        # Height of caption row (24)
  caption_url: string                            # URL for caption hyperlink (http://...)
  header_format: string                          # Format for header row (header_fmt)
  row_height: integer                            # Row height (18)
  header_height: integer                         # Header row height (20)
  flat_pivots: bool                              # Flatten pivot tables (false)
  skip_columns: list                             # Columns to exclude (["ID"])
  highlight_rows:                                # Row highlight config
    format: string                               # Highlight format (red)
    condition: string                            # Highlight condition (value>0)
  double_header_separator: string                # Separator for double headers (/)
  double_header_formats: list                    # Formats for double headers (["fmt1"])
  footer:                                        # Footer config (size, format)
    size: integer                                # Footer size (rows) (2)
    format: string                               # Footer format (footer_fmt)

#--------------------------------------------------------------
#    STYLERS |    &API_STYLER
#--------------------------------------------------------------
# Purpose:
#   Component handling Excel report formatting, positioning tables/charts in sheets using external library API.
# Business Context:
#   Critical for report generation - defines exactly where and how data appears in Excel files. Controls table positioning,
#   chart placement, formatting, and overall sheet layout. Uses xlsxwriter library extensively for professional outputs.
# Where used:
#   indicators -> stylers; workspace format templates; Excel report generation
# Python implementation:
#   engine/src/excl/excel_style.py, engine/src/excl/excel_widget.py
# Validation hints:
#   Each styler must have a unique name and params.label. Use for precise Excel formatting control.
#--------------------------------------------------------------
stylers: &API_STYLER
  - name: string                                 # Unique styler identifier (MainSheet)
    active: bool                                 # Enable/disable styler (true)
    params:                                      # Sheet-level styling params
      label: string                              # Sheet label (Sheet)
      column_widths:
        <str>: integer                           # Column width overrides ({A: 20})
      description: string                        # Sheet description (Main sheet)
      caption: string                            # Sheet caption (Incidents)
      auto_size_cols: bool                       # Auto-size columns (true)
      logo: bool                                 # Show logo (true)
      show_gridlines: bool                       # Show gridlines (true)
      autofilter: bool                           # Enable autofilter (true)
      hide_zero: bool                            # Hide zero values (false)
      wrap: bool                                 # Enable text wrap (true)
      tab_color: string                          # Tab color (#FF0000)
      minimize_cols: list                        # Columns to minimize (["ID"])
      format_case_labels: string                 # Case format for labels (upper)
      cell_freeze: string                        # Cell to freeze panes (A2)
      sheet_category: string                     # Sheet category label (Summary)
      logo_data:
        title_width: integer                     # Logo title width (120)
        cells:
          title: string                          # Logo title cell (A1)
          report_window: string                  # Report window cell (B1)
          report_snapshot: string                # Report snapshot cell (C1)
        formats:
          title: string                          # Format for title (header_fmt)
          report_window: string                  # Format for report window (window_fmt)
          report_snapshot: string                # Format for report snapshot (snapshot_fmt)
          column_widths:
            <str>: integer                       # Column widths for logo area ({A: 20})
        logo_location:
          kyndryl: list                          # Kyndryl logo locations (["A1"])
          customer: list                         # Customer logo locations (["B1"])
    insert_image:
      <str>: list                                # Images to insert (["logo.png"])
    insert_text:
      cells: string                              # Target cells for text (A2)
      text: string                               # Text to insert (Note)
      format: string                             # Format for inserted text (note_fmt)
      sql_code: string                           # SQL code for dynamic text (SELECT ...)
    tables: *API_TABLE_STYLER                    # Table placements (see &API_TABLE_STYLER)
    charts:
      - source_chart: string                     # Chart placements (KPI Chart)

#--------------------------------------------------------------
#    ACTIONS |    &API_ACTION
#--------------------------------------------------------------
# Purpose:
#   Expanded table with engine-forced columns defining actions to fix issues/prevent symptoms and improve metrics.
# Business Context:
#   Operational component for remediation - defines specific actions sent to owners via separate channels to address
#   data issues or prevent problems. Actions are tied to symptoms and help improve KPI accuracy and reliability.
# Where used:
#   indicators -> actions; practices -> actions lists; sent to owners for remediation
# Python implementation:
#   engine/src/low/action.py, engine/src/high/indicator.py
# Validation hints:
#   Each action must have a unique name and reference a table config. Use for automated remediation workflows.
#--------------------------------------------------------------
actions: &API_ACTION
  - name: string                                 # Unique action identifier (Remediate)
    active: bool                                 # Enable/disable action (true)
    rank: integer                                # Processing order (1)
    description: string                          # Description of the action (Auto-remediate)
    table: *API_TABLE                            # Table config (see &API_TABLE)

#--------------------------------------------------------------
#    SYMPTOMS |    &API_SYMPTOM
#--------------------------------------------------------------
# Purpose:
#   Expanded table used for many calculations, core component tracking data issues that might impact metrics.
# Business Context:
#   Critical for data quality monitoring - identifies problems in data that could affect KPI accuracy. Used extensively
#   in calculations across indicators. Symptoms help diagnose why metrics might be incorrect or incomplete.
# Where used:
#   indicators -> symptoms; practices -> symptom mappings; calculations throughout the engine
# Python implementation:
#   engine/src/low/symptom.py, engine/src/high/indicator.py
# Validation hints:
#   Each symptom must have a unique name and reference a table config. Use for data quality checks.
#--------------------------------------------------------------
symptoms: &API_SYMPTOM
  - name: string                                 # Unique symptom identifier (SLA_BREACH)
    active: bool                                 # Enable/disable symptom (true)
    rank: integer                                # Processing order (1)
    description: string                          # Description of the symptom (Breach detected)
    table: *API_TABLE                            # Table config (see &API_TABLE)

#--------------------------------------------------------------
#    MACROS |    &API_MACRO
#--------------------------------------------------------------
# Purpose:
#   Named SQL or transformation snippets for reuse.
# Where used:
#   pipelines, practices, indicators using macros
# Python implementation:
#   engine/src/high/spec_builder.py, engine/src/tool/
# Validation hints:
#   Each macro must have a unique name and sql_code.
#--------------------------------------------------------------
macros: &API_MACRO
  <str>:
    active: bool                                 # Enable/disable macro (true)
    sql_code: string                             # DuckDB SQL macro definition (CREATE MACRO...)
    test_case: list                              # Test SQL queries for macro validation (["SELECT ..."])

#--------------------------------------------------------------
#    PRACTICES |    &API_PRACTICE
#--------------------------------------------------------------
# Purpose:
#   Group of indicators in same area (e.g., backups) with basic orchestration layer.
# Business Context:
#   Organizes related indicators by business area or function. Provides basic grouping and orchestration for indicators
#   that serve similar purposes. Acts as a logical container for related KPIs and their supporting components.
# Where used:
#   workspace/<tenant>/*.yml -> practices entries; indicator organization
# Python implementation:
#   engine/src/high/practice.py, engine/src/high/indicator.py
# Validation hints:
#   Each practice must have a unique name and list of indicators/macros. Use for business area organization.
#--------------------------------------------------------------
practices: &API_PRACTICE
  - active: bool                                 # Enable/disable practice (true)
    name: string                                 # Practice identifier (SLA)
    workspace: string                            # Target workspace name (HELABA)
    macros:
      <str>:
        active: bool                             # Enable/disable macro (true)
        sql_code: string                         # Macro SQL code (SELECT ...)
    indicator_order: list                        # Ordered list of indicator names (["KPI1"])

#--------------------------------------------------------------
#    SCHEDULER |    &API_SCHEDULER
#--------------------------------------------------------------
# Purpose:
#   Defines WHEN pipelines should be triggered for execution.
# Business Context:
#   Controls the timing and conditions for pipeline execution. Defines schedules, frequencies, and triggers that determine
#   when data processing workflows should run. Critical for automated, timely report generation.
# Where used:
#   workspace/<tenant>/*.yml -> schedulers entries; execution timing control
# Python implementation:
#   engine/src/model/pipeline.py, engine/src/high/scheduler.py
# Validation hints:
#   Each scheduler must have a unique key and pipeline reference. Use for automated execution scheduling.
#--------------------------------------------------------------
scheduler: &API_SCHEDULER
  <str>:
    run_limit: integer                           # Max runs per day (3)
    debug: bool                                  # Force evaluation true for debugging (false)
    condition:
      hours: list                                # Scheduling hours (["08:00"])
      day_of_week: list                          # Scheduling days of week (["Mon"])
      day_of_month: list                         # Scheduling days of month ([1])
    pipeline: string                             # Pipeline to trigger ("main_pipeline")

#--------------------------------------------------------------
#    DATA_MODEL |    &API_DATA_MODEL
#--------------------------------------------------------------
# Purpose:
#   Configuration for workspace data extraction, loading, transformation in datalake before running indicators.
# Business Context:
#   Defines how raw data gets into the system and gets transformed for analysis. Maps external data sources to internal
#   formats, handles ETL processes, and prepares data for indicator calculations. Foundation for all data processing.
# Where used:
#   workspace/<tenant>/data_model or data_custom; data ingestion and transformation
# Python implementation:
#   engine/src/high/data_model.py, engine/src/exts/
# Validation hints:
#   Each use_case and transformator must be uniquely named. Use for data pipeline configuration.
#--------------------------------------------------------------
data_model: &API_DATA_MODEL
  use_cases:                                     # Named groups of schemas/tables for ETL (e.g., "SLA": ["T1"])
    <str>:
      <str>: list                                # List of tables for use case (e.g., "T1")
  extract_tools: list                            # Allowed extractors (SCIENCELOGIC, SNOW, etc.) ["SNOW"]
  transformator:                                 # Per-table transform settings (see transform)
    <str>:
      <str>:
        active: bool                             # Enable/disable transform (true)
        increment: bool                          # Incremental load flag (true)
        filename_raw: bool                       # Use raw filename (false)
        filename_stage: bool                     # Use stage filename (false)
        filename_prefix: string                  # Prefix for filenames ("prefix_")
        clear_null: string                       # Value to clear nulls ("N/A")
        description: string                      # Description of transform ("Transform step")
        skip_rows: integer                       # Rows to skip (1)
        extractor:
          urls: list                             # List of URLs for extraction ("http://...")
          params:
            <str>: string                        # Extractor parameters ("param1")
          zip:
            password: string                     # Zip password ("pass")
        prod_latests: bool                       # Use latest prod file (true)
        prod_file: string                        # Prod file path ("prod.csv")
        options:
          header: bool                           # Header present (true)
          delimiter: string                      # CSV delimiter (",")
        convert_type:
          <str>: string                          # Type conversion mapping ("int")
        convert_type_raw:
          <str>: string                          # Raw type conversion mapping ("str")
        format: string                           # Format name ("default_fmt")
        sheet_name: string                       # Excel sheet name ("Sheet1")
        raw_filename: string                     # Raw filename ("raw.csv")
        custom_filename: string                  # Custom filename ("custom.csv")
        new_excel_loader: bool                   # Use new Excel loader (false)
        stage_timestamp: bool                    # Add stage timestamp (true)
        raw_name_extract:
          column: string                         # Column for raw name extraction ("col1")
          pattern: string                        # Pattern for raw name extraction ("pattern")
        unique_cols: string                      # Unique columns ("ID")
        sorting_cols: string                     # Sorting columns ("date")
        distinct_sort_col: string                # Distinct sort column ("ID")
        filter_limit: string                     # Filter limit ("100")
        replace_sql:
          <str>: string                          # SQL replacement mapping ("replace1")

#--------------------------------------------------------------
#    PIPELINES |    &API_PIPELINE
#--------------------------------------------------------------
# Purpose:
#   Orchestrator within workspace running tasks in order for single customer.
# Business Context:
#   Defines the execution flow and order of operations for a customer workspace. Controls which practices and functions
#   run, in what sequence, and with what parameters. The orchestration engine that makes everything work together.
# Where used:
#   workspace/<tenant>/*.yml -> pipelines mapping; execution orchestration
# Python implementation:
#   engine/src/model/pipeline.py, engine/src/high/workspace.py
# Validation hints:
#   Each pipeline must have a unique name and functions/practices mapping. Use for workflow orchestration.
#--------------------------------------------------------------
pipelines: &API_PIPELINE
  <str>:                                         # Pipeline definition (e.g., {practices: ["SLA"]})
    practices: list                              # Practices included in pipeline ("SLA")
    functions:                                   # Engine functions and their params (e.g., {start_ELT_config: {...}})
      start_ELT_config:
        <str>: string                            # ELT config parameters ("param1")
      run_extract_science_logic:
        api_files: list                          # API files for ScienceLogic extraction ("api1.yml")
        use_case: string                         # Use case for extraction ("UC1")
        debug: bool                              # Debug flag (false)
      run_extract_snow:
        api_files: list                          # API files for SNOW extraction ("api2.yml")
        use_case: string                         # Use case for extraction ("UC2")
        debug: bool                              # Debug flag (false)
      run_extract_commvault:
        <str>: string                            # Commvault extraction params ("param2")
      run_extract_ais:
        <str>: string                            # AIS extraction params ("param3")
      run_elt_raw_stage_transform:
        age_filter: integer                      # Age filter for raw-stage transform (30)
        use_case: string                         # Use case for transform ("UC3")
      run_elt_stage_prod_load:
        age_filter: integer                      # Age filter for stage-prod load (30)
        remove_prod: bool                        # Remove prod flag (false)
        use_case: string                         # Use case for prod load ("UC4")

#--------------------------------------------------------------
#    WORKSPACES |    &API_WORKSPACE
#--------------------------------------------------------------
# Purpose:
#   Tenant configuration orchestrating content, formats, indicators for single customer.
# Business Context:
#   Customer-specific container that brings together all components for a single tenant. Defines data sources, formatting
#   standards, available indicators, and processing pipelines. Isolates customer configurations and provides consistent
#   formatting across all their reports.
# Where used:
#   workspace/<tenant>/*.yml and workspace/workspaces.yml; customer-specific configuration
# Python implementation:
#   engine/src/high/workspace.py, engine/src/model/world.py
# Validation hints:
#   For Excel formatting, see XlsxWriter docs: https://xlsxwriter.readthedocs.io/format.html. Keep tenant configs isolated.
#--------------------------------------------------------------
workspaces: &API_WORKSPACE
  - data_sources: list                           # PROD folders included when loading workspace ("PROD1")
    data_custom:                                 # Custom data configs (see data_custom)
      <str>:
        <str>:
          sql_code: string                       # SQL code for custom data ("SELECT ...")
          schema_table: string                   # Schema table for custom data ("CUSTOM.TABLE")
          description: string                    # Description for custom data ("Custom data")
    practices: list                              # Practices included in workspace ("SLA")
    holidays:
      country_code: string                       # Holiday country code ("DE")
      subcountry_code: string                    # Holiday subcountry code ("HE")
    macros: *API_MACRO                           # Macro definitions (see &API_MACRO) [(see macros)]
    pipelines: *API_PIPELINE                     # Pipeline definitions (see &API_PIPELINE) [(see pipelines)]
    data_model: *API_DATA_MODEL                  # Data model config (see &API_DATA_MODEL) [(see data_model)]
    schedulers: *API_SCHEDULER                   # Scheduler configs (see &API_SCHEDULER) [(see schedulers)]
    format_report:
      font_name: string                          # Default report font name ("Arial")
      font_size: integer                         # Default report font size (11)
      font_size_small: integer                   # Small font size (9)
      font_size_large: integer                   # Large font size (14)
      report_icon: string                        # Report icon ("icon.png")
      row_height: integer                        # Default row height (18)
      header_height: integer                     # Default header height (20)

#--------------------------------------------------------------
#    INDICATORS |    &API_INDICATOR
#--------------------------------------------------------------
# Purpose:
#   End-to-end data processing method containing snapshots/symptoms/actions/trends + Excel export via styler.
# Business Context:
#   Complete workflow component that orchestrates all other elements. Defines how data flows from raw sources through
#   calculations to final Excel reports. Contains all the logic for processing KPIs, identifying issues, and generating
#   formatted outputs. The primary deliverable of the BIS system.
# Where used:
#   indicators in workspace/<tenant> spec files; main output of BIS processing
# Python implementation:
#    engine/src/high/indicator.py |    TIndicator
#    engine/src/high/report_metadata.py |    TReportMeta
#    engine/src/high/spec_builder.py |    IndicatorSpecBuilder
# Validation hints:
#   Each indicator must have a unique name, practice, and report_specs. Use as primary workflow definition.
#--------------------------------------------------------------
indicators:
  - active: bool                                 # Enable/disable indicator (true)
    name: string                                 # Indicator identifier ("KPI1")
    author: string                               # Author of the indicator ("analyst")
    status: string                               # Status of the indicator ("active")
    status_sql: string                           # SQL status ("completed")
    status_job: string                           # Job status ("running")
    status_test: string                          # Test status ("passed")
    status_spec: string                          # Spec status ("valid")
    frequency: string                            # Frequency of reporting ("monthly")
    remarks: string                              # Additional remarks ("")
    category: string                             # Category label ("SLA")
    version: string                              # Version string ("1.0")
    version_update: string                       # Version update info ("")
    version_history:
      <str>: string                              # Version history entry ("v1.0: initial")
    description: string                          # Description of the indicator ("MTD KPI")
    roi_area: string                             # ROI area ("")
    report_specs:
      tables: list                               # Report tables (see report_specs)
      summary: string                            # Report summary ("Summary text")
      trends: list                               # Report trends (see trends)
    logos:
      kyndryl: list                              # Kyndryl logos ("logo.png")
      customer: list                             # Customer logos ("logo2.png")
    practice: string                             # Practice this indicator belongs to ("SLA")
    format_ref_file: string                      # Path to indicator-level formats.yml ("formats.yml")
    report_template: string                      # Excel template file ("template.xlsx")
    report_template_changes:
      <str>:
        - cells: string                          # Cell reference ("A1")
          text: string                           # Cell text ("value")
          sql_code: string                       # SQL code for cell ("SELECT ...")
          hyperlink:
            link: string                        # Hyperlink URL ("http://...")
            text: string                        # Hyperlink text ("Link")
    report_properties:
      standard:
        title: string                            # Report title ("KPI Report")
        category: string                         # Report category ("SLA")
        status: string                           # Report status ("Active")
        comments: string                         # Report comments ("")
        subject: string                          # Report subject ("Monthly KPI")
        tags: string                             # Report tags ("KPI,SLA")
        author: string                           # Report author ("Analyst")
        manager: string                          # Report manager ("Manager")
      custom:
        <str>: string                            # Custom property ("value")
      custom_sql:
        <str>: string                            # Custom SQL property ("SELECT ...")
    delivery:
      descriptions: list                         # Delivery descriptions ("desc")
      attachments: list                          # Delivery attachments ("file.xlsx")
      unique_column: string                      # Unique column for delivery ("ID")
      owners:
        cc: list                                 # CC owners ("user@domain.com")
        to: list                                 # To owners ("user2@domain.com")
      method: string                             # Delivery method ("email")
      mails:
        cc: list                                 # CC mails ("user@domain.com")
        to: list                                 # To mails ("user2@domain.com")
      screens:
        <str>: string                            # Delivery screens ("screen1")
      tables:
        <str>: string                            # Delivery tables ("table1")
    report_period: list                          # Report period ("2025-08")
    report_period_format: string                 # Report period format ("yyyy-mm")
    report_period_file: list                     # Report period file ("file1")
    report_period_file_format: string            # Report period file format ("xlsx")
    report_title:
      period: string                             # Report title period ("August")
      snapshot: string                           # Report title snapshot ("MTD")
    report_period_type: string                   # Report period type ("monthly")
    snapshot_formula: string                     # Snapshot formula ("")
    snapshot_file_formula: string                # Snapshot file formula ("")
    snapshot_format: string                      # Snapshot format ("")
    snapshot_file_format: string                 # Snapshot file format ("")
    report_auto_open: bool                       # Auto open report (true)
    parameters:
      <str>:
        start_date: string                       # Parameter start date ("2025-08-01")
        end_date: string                         # Parameter end date ("2025-08-31")
    file: string                                 # File path ("output.xlsx")
    title: string                                # Indicator title ("KPI1 Report")
    sql_ref_file: string                         # SQL reference file ("ref.sql")
    sql_ref_file_replace_params:
      <str>: string                              # SQL replace parameter ("value")
    md_ref_file: string                          # Markdown reference file ("ref.md")
    summary_update:
      label: string                              # Summary update label ("")
      description: string                        # Summary update description ("")
      skip_sheets: list                          # Sheets to skip in summary ("")
      position: integer                          # Summary position (1)
      wrap: bool                                 # Wrap text (true)
      row_height: integer                        # Row height (15)
      cell: string                               # Cell reference ("A1")
      standard: bool                             # Standard format (true)
      headers:
        <str>: string                            # Header mapping ("value")
    skip_summary: bool                           # Skip summary (false)
    summary: list                                # Summary list ("Summary")
    sheets_order_label: list                     # Sheets order label ("Sheet1")
    sheets_order: list                           # Sheets order ("Sheet1")
    symptoms_order: list                         # Symptoms order ("Symptom1")
    sheets: list                                 # Sheets ("Sheet1")
    symptoms: *API_SYMPTOM                       # Symptoms (see &API_SYMPTOM) [ (see symptoms)
    actions: *API_ACTION                         # Actions (see &API_ACTION) [ (see actions)
    snapshots: *API_SNAPSHOT                     # Snapshots (see &API_SNAPSHOT) [ (see snapshots)
    trends: *API_TREND                           # Trends (see &API_TREND) [ (see trends)
    charts: *API_CHART                           # Charts (see &API_CHART) [ (see charts)
    stylers: *API_STYLER                         # Stylers (see &API_STYLER) [ (see stylers)
    macros: *API_MACRO                           # Macros (see &API_MACRO) [ (see macros)
# Use-case: define publishable outputs (Excel reports) for a tenant.

# -----------------------------------------------------------  
#   SCIENCELOGIC_API
# ----------------------------------------------------------- 
# Purpose:
# - Extractor configuration for ScienceLogic connector.
# Where used:
# - workspace/<tenant>/sciencelogic or connector configs
# Python implementation:
#  - engine/src/exts/sciencelogic/api_sciencelogic.py |    Api_Sciencelogic
#  - engine/src/model/data_model.py |    TDataModel.extract_sciencelogic
#  - engine/src/model/pipeline.py |    TPipeline.run_extract_science_logic
# Validation hints:
# - Each use_case and data_to_collect must be uniquely named.
# ----------------------------------------------------------- 
sciencelogic_api:
  file_format: string                            # File format for extraction ("csv")
  schema_name: string                            # Target schema name ("SCIENCELOGIC")
  xlsx_file_format_copy: bool                    # Copy xlsx file format (true)
  params:
    <str>: string                                # Extraction parameters ("val")
  varchar_columns: list                          # Varchar columns ("col1")
  columns_with_number: list                      # Columns with number ("col2")
  columns_with_date: list                        # Columns with date ("col3")
  columns_to_convert_to_boolean: list            # Columns to convert to boolean ("col4")
  columns_to_convert_to_double: list             # Columns to convert to double ("col5")
  time_stamp: bool                               # Add timestamp (true)
  device_group_to_extract_ids_from: string       # Device group to extract IDs from ("group1")
  use_cases:
    <str>: list                                  # Use case mappings ("T1")
  data_to_collect:
    <str>:
      url: string                                # Data collection URL ("http://...")
      folder_name: string                        # Data collection folder ("folder")
      file_name: string                          # Data collection file name ("file.csv")

# -----------------------------------------------------------  
#   SNOW_API
# ----------------------------------------------------------- 
# Purpose:
# - Extractor configuration for ServiceNow connector.
# Where used:
# - workspace/<tenant>/snow configs and use_cases
# Python implementation:
#  - engine/src/exts/snow/api_snow.py |    Api_SNOW
#  - engine/src/model/data_model.py |    TDataModel.extract_snow
#  - engine/src/model/pipeline.py |    TPipeline.run_extract_snow
# Validation hints:
# - Each use_case and data_to_collect must be uniquely named.
# ----------------------------------------------------------- 
snow_api:
  file_format: string                            # File format for extraction ("xlsx")
  time_stamp: bool                               # Add timestamp to files (true)
  advanced_search: bool                          # Enable advanced search (false)
  advanced_search_column_list: list              # Advanced search columns ("col1")
  columns_to_convert_to_datetime: list           # Columns to convert to datetime ("created")
  replace_all_empty_fields_with_null: bool       # Replace all empty fields with null (true)
  columns_to_convert_to_boolean: list            # Columns to convert to boolean ("col2")
  checking_sla_time_in_our_teams: bool           # Check SLA time in our teams (true)
  production_version_of_file_without_sys_id_columns: bool # Prod version without sys_id columns (false)
  columns_to_convert_to_text: list               # Columns to convert to text ("col3")
  columns_to_convert_to_number: list             # Columns to convert to number ("col4")
  schema_name: string                            # Target schema name ("SNOW")
  xlsx_file_format_copy: bool                    # Copy xlsx file format (true)
  use_cases:
    <str>: list                                  # Use case mappings ("T1")
  data_to_collect:
    <str>:
      url: string                                # Data collection URL ("http://...")
      folder_name: string                        # Data collection folder ("folder")
      file_name: string                          # Data collection file name ("file.xlsx")
      advanced_search: bool                      # Enable advanced search (false)
      production_version_of_file_without_sys_id_columns: bool # Prod version without sys_id columns (false)
      advanced_search_column_list: list          # Advanced search columns ("col1")
      columns_to_convert_to_number: list         # Columns to convert to number ("col4")




