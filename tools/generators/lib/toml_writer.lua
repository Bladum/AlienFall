-- TOMLWriter: Write generated data to TOML files
-- Formats and writes Lua tables to TOML format

local TOMLWriter = {}

---Serialize a value to TOML format
---@param value any The value to serialize
---@return string toml_value TOML formatted string
local function serializeValue(value)
  if type(value) == "string" then
    -- Escape quotes and special characters
    local escaped = value:gsub('\\', '\\\\'):gsub('"', '\\"'):gsub('\n', '\\n')
    return '"' .. escaped .. '"'
  elseif type(value) == "number" then
    return tostring(value)
  elseif type(value) == "boolean" then
    return value and "true" or "false"
  elseif type(value) == "table" then
    -- Check if it's an array or object
    local maxIndex = 0
    for k in pairs(value) do
      if type(k) == "number" and k > maxIndex then
        maxIndex = k
      end
    end

    -- If all keys are sequential numbers starting from 1, it's an array
    if maxIndex > 0 and maxIndex == #value then
      -- Array
      local items = {}
      for i = 1, #value do
        table.insert(items, serializeValue(value[i]))
      end
      return "[" .. table.concat(items, ", ") .. "]"
    else
      -- Inline table/object - we'll handle this differently
      return "{}"  -- Will be handled by parent
    end
  else
    return "null"
  end
end

---Write a complete entity to TOML format
---@param entity table The entity data
---@param entityType string The entity type (units, items, etc)
---@return table tomlLines Array of TOML lines
local function serializeEntity(entity, entityType)
  local lines = {}

  -- Start table entry
  table.insert(lines, "[[" .. entityType .. "]]")

  -- Write fields
  for key, value in pairs(entity) do
    if key ~= "_meta" and key ~= "_type" then
      if type(value) == "table" and not (value[1]) then
        -- Nested table - write as subtable
        table.insert(lines, "")
        table.insert(lines, "[" .. entityType .. "." .. key .. "]")

        for subKey, subValue in pairs(value) do
          table.insert(lines, subKey .. " = " .. serializeValue(subValue))
        end
      else
        -- Simple value
        table.insert(lines, key .. " = " .. serializeValue(value))
      end
    end
  end

  return lines
end

---Write TOML content to file
---@param content string TOML content
---@param filePath string Path to write to
---@return boolean success
---@return string|nil error
function TOMLWriter.writeFile(content, filePath)
  -- Create directory if needed
  local dirPath = filePath:match("(.+)/[^/]+$") or filePath:match("(.+)\\[^\\]+$")

  if dirPath then
    -- Try to create directory
    local success = os.execute('powershell -Command "New-Item -ItemType Directory -Force -Path ' .. dirPath .. ' > $null"')
    if not success or success ~= 0 then
      -- Try with mkdir
      os.execute('mkdir "' .. dirPath .. '" 2>nul')
    end
  end

  -- Write file
  local file, err = io.open(filePath, "w")
  if not file then
    return false, err
  end

  file:write(content)
  file:close()

  return true, nil
end

---Generate TOML content for entities
---@param entities table Array of entities
---@param entityType string The entity type name
---@return string tomlContent
function TOMLWriter.generate(entities, entityType)
  local lines = {}

  -- Header comment
  table.insert(lines, "# Auto-generated " .. entityType .. " definitions")
  table.insert(lines, "# Generated by mock data generator")
  table.insert(lines, "")

  -- Write each entity
  for _, entity in ipairs(entities) do
    local entityLines = serializeEntity(entity, entityType)
    for _, line in ipairs(entityLines) do
      table.insert(lines, line)
    end
    table.insert(lines, "")
  end

  return table.concat(lines, "\n")
end

---Write entities to TOML file
---@param entities table Array of entity tables
---@param entityType string Entity type (for section header)
---@param outputPath string Full path to write to
---@return boolean success
function TOMLWriter.write(entities, entityType, outputPath)
  local content = TOMLWriter.generate(entities, entityType)
  local success, err = TOMLWriter.writeFile(content, outputPath)

  if success then
    print("[TOMLWriter] Wrote " .. #entities .. " " .. entityType .. " to: " .. outputPath)
  else
    print("[TOMLWriter] ERROR writing to " .. outputPath .. ": " .. (err or "unknown"))
  end

  return success
end

---Write minimal test TOML example
---@param entity table Single entity
---@param entityType string Entity type
---@return string tomlContent
function TOMLWriter.generateExample(entity, entityType)
  local lines = {}

  table.insert(lines, "# Example " .. entityType .. " configuration")
  table.insert(lines, "")

  local entityLines = serializeEntity(entity, entityType)
  for _, line in ipairs(entityLines) do
    table.insert(lines, line)
  end

  return table.concat(lines, "\n")
end

return TOMLWriter
