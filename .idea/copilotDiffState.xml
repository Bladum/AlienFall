<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/design/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/design/README.md" />
              <option name="updatedContent" value="# Game Design Documentation&#10;&#10;**Purpose:** Define game mechanics, balance parameters, and design decisions  &#10;**Audience:** Game designers, developers, AI agents, balance testers  &#10;**Status:** Active development  &#10;**Last Updated:** 2025-10-28&#10;&#10;---&#10;&#10;##  Table of Contents&#10;&#10;- [Overview](#overview)&#10;- [Folder Structure](#folder-structure)&#10;- [Key Features](#key-features)&#10;- [Content](#content)&#10;- [Input/Output](#inputoutput)&#10;- [Relations to Other Modules](#relations-to-other-modules)&#10;- [Format Standards](#format-standards)&#10;- [How to Use](#how-to-use)&#10;- [How to Contribute](#how-to-contribute)&#10;- [AI Agent Instructions](#ai-agent-instructions)&#10;- [Good Practices](#good-practices)&#10;- [Bad Practices](#bad-practices)&#10;- [Quick Reference](#quick-reference)&#10;&#10;---&#10;&#10;## Overview&#10;&#10;The `design/` folder contains **all game design documentation**, defining mechanics, rules, balance parameters, and design rationale. This is the **first step** in the development workflow: Design → API → Architecture → Engine → Mods → Tests.&#10;&#10;**Core Purpose:**&#10;- Define game mechanics and rules&#10;- Specify balance parameters and costs&#10;- Document design decisions and rationale&#10;- Identify implementation gaps&#10;- Provide consistent terminology (glossary)&#10;&#10;---&#10;&#10;## Folder Structure&#10;&#10;```&#10;design/&#10;├── README.md                          ← This file&#10;├── DESIGN_TEMPLATE.md                 ← Template for new designs&#10;├── GLOSSARY.md                        ← Game terminology reference&#10;│&#10;├── mechanics/                         ← System Design Specs (25 files)&#10;│   ├── README.md                     ← Mechanics overview&#10;│   ├── Overview.md                   ← High-level game design&#10;│   ├── Geoscape.md, Basescape.md, Battlescape.md&#10;│   ├── Units.md, Items.md, Crafts.md&#10;│   ├── Economy.md, Finance.md, Politics.md&#10;│   └── [other systems]&#10;│&#10;├── gaps/                              ← Design-to-Implementation Gap Analysis&#10;│   └── README.md&#10;│&#10;└── ideas/                             ← Future Ideas &amp; Concepts&#10;    └── [idea files]&#10;```&#10;&#10;---&#10;&#10;## Key Features&#10;&#10;- **Comprehensive Mechanics:** 25+ system designs covering all game aspects&#10;- **Balance Parameters:** Numbers, costs, probabilities, difficulty settings&#10;- **Design Rationale:** Why decisions were made&#10;- **Gap Analysis:** Tracks what's designed vs. implemented&#10;- **Consistent Terminology:** GLOSSARY.md for standard terms&#10;- **Template System:** DESIGN_TEMPLATE.md for new designs&#10;&#10;---&#10;&#10;## Content&#10;&#10;| Category | Files | Purpose |&#10;|----------|-------|---------|&#10;| **Game Layers** | 5 files | Geoscape, Basescape, Battlescape, Interception, 3D |&#10;| **Core Systems** | 7 files | Units, Items, Crafts, Economy, Finance, Politics, Countries |&#10;| **Supporting** | 8 files | AI, GUI, Lore, Analytics, Assets, Pilots, HexSystem |&#10;| **Meta Docs** | 4 files | Integration, Relations, Future, Glossary |&#10;&#10;---&#10;&#10;## Input/Output&#10;&#10;### Inputs&#10;- Game vision from project goals&#10;- Player feedback from playtesting&#10;- Technical constraints from engine&#10;- Reference games (X-COM)&#10;- Balance data from `logs/analytics/`&#10;&#10;### Outputs&#10;- Mechanic specs → `api/*.md`&#10;- System requirements → `architecture/**/*.md`&#10;- Implementation tasks → `engine/**/*.lua`&#10;- Content needs → `mods/core/rules/**/*.toml`&#10;- Test scenarios → `tests2/**/*_test.lua`&#10;&#10;---&#10;&#10;## Relations to Other Modules&#10;&#10;```&#10;design/mechanics/*.md → api/*.md → architecture/**/*.md → engine/**/*.lua → mods/ → tests2/&#10;```&#10;&#10;| Module | Relationship | Details |&#10;|--------|--------------|---------|&#10;| **api/** | Output | Design specs become API contracts |&#10;| **architecture/** | Output | Design requires technical architecture |&#10;| **engine/** | Output | Design is implemented in code |&#10;| **mods/** | Output | Design is configured in TOML |&#10;| **tests2/** | Output | Design defines test cases |&#10;| **logs/** | Input | Analytics inform balance decisions |&#10;&#10;---&#10;&#10;## Format Standards&#10;&#10;Use **[DESIGN_TEMPLATE.md](DESIGN_TEMPLATE.md)** for all new designs.&#10;&#10;Standard sections:&#10;- Overview&#10;- Core Mechanics&#10;- Rules &amp; Constraints&#10;- Balance Parameters (in tables)&#10;- User Interactions&#10;- Integration Points&#10;- Design Rationale&#10;- Examples&#10;- Future Enhancements&#10;- See Also (cross-references)&#10;&#10;---&#10;&#10;## How to Use&#10;&#10;### For Game Designers&#10;&#10;1. Copy template: `cp DESIGN_TEMPLATE.md mechanics/My_System.md`&#10;2. Fill all sections (Overview, Mechanics, Balance, Integration)&#10;3. Add new terms to GLOSSARY.md&#10;4. Cross-reference with related designs&#10;&#10;### For Developers&#10;&#10;1. Read design: `cat design/mechanics/[System].md`&#10;2. Understand mechanics, parameters, integration points&#10;3. Follow workflow: Design → API → Architecture → Engine → Mods → Tests&#10;4. Update gap analysis when implemented&#10;&#10;### For AI Agents&#10;&#10;See [AI Agent Instructions](#ai-agent-instructions) below.&#10;&#10;---&#10;&#10;## How to Contribute&#10;&#10;### Creating New Design&#10;&#10;1. Use template: `cp DESIGN_TEMPLATE.md mechanics/[System].md`&#10;2. Fill all sections (don't skip, mark &quot;TBD&quot; if unknown)&#10;3. Add new terms to GLOSSARY.md&#10;4. Update this README (folder structure, content tables)&#10;5. Cross-reference in related designs&#10;&#10;### Updating Existing Design&#10;&#10;1. Version properly (semantic versioning)&#10;2. Document what changed and why&#10;3. Update balance parameters with reasoning&#10;4. Keep terminology consistent with GLOSSARY.md&#10;5. Check downstream: API, architecture, engine, mods&#10;&#10;---&#10;&#10;## AI Agent Instructions&#10;&#10;### When to Read Design&#10;&#10;| Scenario | Action |&#10;|----------|--------|&#10;| Implementing new feature | Read design FIRST, then API/architecture |&#10;| Balancing game | Read balance parameters + analytics logs |&#10;| Understanding system | Read design overview and mechanics |&#10;| Creating content | Read design for parameters and constraints |&#10;&#10;### Design-First Workflow&#10;&#10;```&#10;User asks to implement feature&#10;    ↓&#10;1. Check if design exists: ls design/mechanics/*.md | grep -i [system]&#10;    ↓&#10;2a. If exists: Read thoroughly → Proceed to API&#10;2b. If missing: Create design FIRST → Get review → Then API&#10;    ↓&#10;3. Follow: Design → API → Architecture → Engine → Mods → Tests&#10;    ↓&#10;4. Update gap analysis when implemented&#10;```&#10;&#10;### Reading Balance Parameters&#10;&#10;```markdown&#10;| Stat | Base Value | Range | Notes |&#10;|------|------------|-------|-------|&#10;| Health | 100 | 50-150 | Rookie to Elite |&#10;&#10;AI Action:&#10;1. Extract: health=100&#10;2. Note range: 50-150&#10;3. Understand context: &quot;Rookie to Elite&quot; means progression&#10;4. Apply to implementation&#10;```&#10;&#10;---&#10;&#10;## Good Practices&#10;&#10;### ✅ Documentation&#10;- Use DESIGN_TEMPLATE.md&#10;- Fill all sections&#10;- Document rationale (why, not just what)&#10;- Keep balance parameters in tables&#10;- Version properly&#10;&#10;### ✅ Balance Parameters&#10;- Provide concrete numbers&#10;- Document why each value chosen&#10;- Include min/max constraints&#10;- Reference analytics data&#10;- Mark experimental values&#10;&#10;---&#10;&#10;## Bad Practices&#10;&#10;### ❌ Documentation&#10;- Don't skip template sections&#10;- Don't forget to version changes&#10;- Don't mix design with implementation details&#10;- Don't create designs after code is written&#10;- Don't use inconsistent terminology&#10;&#10;### ❌ Balance Parameters&#10;- Don't use vague terms (&quot;high&quot;, &quot;low&quot;)&#10;- Don't skip rationale&#10;- Don't ignore analytics data&#10;- Don't hard-code numbers in multiple places&#10;- Don't balance in isolation&#10;&#10;---&#10;&#10;## Quick Reference&#10;&#10;### Essential Files&#10;&#10;| File | Purpose |&#10;|------|---------|&#10;| `DESIGN_TEMPLATE.md` | Template for new designs |&#10;| `GLOSSARY.md` | Game terminology |&#10;| `mechanics/Overview.md` | High-level game design |&#10;| `mechanics/Integration.md` | System connections |&#10;| `gaps/README.md` | Implementation tracking |&#10;&#10;### Most Common Designs&#10;&#10;| System | File |&#10;|--------|------|&#10;| Units | `mechanics/Units.md` |&#10;| Items | `mechanics/Items.md` |&#10;| Battlescape | `mechanics/Battlescape.md` |&#10;| Geoscape | `mechanics/Geoscape.md` |&#10;| Economy | `mechanics/Economy.md` |&#10;&#10;### Quick Commands&#10;&#10;```bash&#10;# Find design&#10;ls design/mechanics/*.md | grep -i [system]&#10;&#10;# Create new design&#10;cp design/DESIGN_TEMPLATE.md design/mechanics/[New_System].md&#10;&#10;# Check term&#10;grep -i &quot;term&quot; design/GLOSSARY.md&#10;```&#10;&#10;### Related Documentation&#10;&#10;- **API:** [api/README.md](../api/README.md) - Contracts from designs&#10;- **Architecture:** [architecture/README.md](../architecture/README.md) - Technical implementation&#10;- **Engine:** Implementation of designs&#10;- **Mods:** [mods/README.md](../mods/README.md) - Content based on designs&#10;- **Tests:** [tests2/README.md](../tests2/README.md) - Verification&#10;&#10;---&#10;&#10;**Last Updated:** 2025-10-28  &#10;**Questions:** See [DESIGN_TEMPLATE.md](DESIGN_TEMPLATE.md) or ask in Discord&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>