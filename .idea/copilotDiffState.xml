<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/engine/localization/language_loader.lua">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/engine/localization/language_loader.lua" />
              <option name="originalContent" value="---Language Loader - Load and switch game languages&#10;---&#10;---Manages language files, translations, and language switching.&#10;---Supports multiple languages and character encodings.&#10;---&#10;---@module language_loader&#10;---@author AlienFall Development Team&#10;---@license Open Source&#10;&#10;local LanguageLoader = {}&#10;LanguageLoader.__index = LanguageLoader&#10;&#10;function LanguageLoader.new()&#10;    local self = setmetatable({}, LanguageLoader)&#10;&#10;    self.languages = {&#10;        &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;de&quot;, &quot;ja&quot;, &quot;zh&quot;, &quot;ru&quot;, &quot;pt&quot;, &quot;it&quot;, &quot;ko&quot;&#10;    }&#10;    self.currentLanguage = &quot;en&quot;&#10;    self.translations = {}&#10;&#10;    print(&quot;[LanguageLoader] Language loader initialized&quot;)&#10;    return self&#10;end&#10;&#10;---Load a language file&#10;---&#10;---@param languageCode string Language code (e.g., &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;)&#10;---@return boolean Success or failure&#10;function LanguageLoader:loadLanguage(languageCode)&#10;    local path = &quot;localization/languages/&quot; .. languageCode .. &quot;.toml&quot;&#10;&#10;    if love.filesystem.getInfo(path) then&#10;        print(&quot;[LanguageLoader] Loading language: &quot; .. languageCode)&#10;        self.currentLanguage = languageCode&#10;        -- TODO: Parse TOML file and load translations&#10;        return true&#10;    else&#10;        print(&quot;[LanguageLoader] ERROR: Language file not found: &quot; .. path)&#10;        return false&#10;    end&#10;end&#10;&#10;---Get available languages&#10;---&#10;---@return table Array of language codes&#10;function LanguageLoader:getAvailableLanguages()&#10;    return self.languages&#10;end&#10;&#10;---Get current language&#10;---&#10;---@return string Current language code&#10;function LanguageLoader:getCurrentLanguage()&#10;    return self.currentLanguage&#10;end&#10;&#10;---Switch to a language&#10;---&#10;---@param languageCode string Language code to switch to&#10;---@return boolean Success or failure&#10;function LanguageLoader:switchLanguage(languageCode)&#10;    if table.concat(self.languages, &quot;,&quot;):find(languageCode) then&#10;        return self:loadLanguage(languageCode)&#10;    else&#10;        print(&quot;[LanguageLoader] ERROR: Unsupported language: &quot; .. languageCode)&#10;        return false&#10;    end&#10;end&#10;&#10;return LanguageLoader&#10;&#10;" />
              <option name="updatedContent" value="---Language Loader - Load and switch game languages&#10;---&#10;---Manages language files, translations, and language switching.&#10;---Supports multiple languages and character encodings.&#10;---&#10;---@module language_loader&#10;---@author AlienFall Development Team&#10;---@license Open Source&#10;&#10;local LanguageLoader = {}&#10;LanguageLoader.__index = LanguageLoader&#10;&#10;function LanguageLoader.new()&#10;    local self = setmetatable({}, LanguageLoader)&#10;&#10;    self.languages = {&#10;        &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;de&quot;, &quot;ja&quot;, &quot;zh&quot;, &quot;ru&quot;, &quot;pt&quot;, &quot;it&quot;, &quot;ko&quot;&#10;    }&#10;    self.currentLanguage = &quot;en&quot;&#10;    self.translations = {}&#10;&#10;    print(&quot;[LanguageLoader] Language loader initialized&quot;)&#10;    return self&#10;end&#10;&#10;---Load a language file&#10;---&#10;---@param languageCode string Language code (e.g., &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;)&#10;---@return boolean Success or failure&#10;function LanguageLoader:loadLanguage(languageCode)&#10;    local path = &quot;localization/languages/&quot; .. languageCode .. &quot;.toml&quot;&#10;&#10;    if love.filesystem.getInfo(path) then&#10;        print(&quot;[LanguageLoader] Loading language: &quot; .. languageCode)&#10;        &#10;        -- Load TOML parser&#10;        local TOML = require(&quot;engine.utils.toml&quot;)&#10;        &#10;        -- Parse TOML file and load translations&#10;        local success, translations = pcall(function()&#10;            return TOML.load(path)&#10;        end)&#10;        &#10;        if success and translations then&#10;            self.translations[languageCode] = translations&#10;            self.currentLanguage = languageCode&#10;            print(string.format(&quot;[LanguageLoader] Successfully loaded %d translation keys for %s&quot;, &#10;                self:_countKeys(translations), languageCode))&#10;            return true&#10;        else&#10;            print(&quot;[LanguageLoader] ERROR: Failed to parse TOML file: &quot; .. path)&#10;            if translations then&#10;                print(&quot;[LanguageLoader] Parse error: &quot; .. tostring(translations))&#10;            end&#10;            return false&#10;        end&#10;    else&#10;        print(&quot;[LanguageLoader] ERROR: Language file not found: &quot; .. path)&#10;        return false&#10;    end&#10;end&#10;&#10;---Count total translation keys (internal helper)&#10;---&#10;---@param tbl table Table to count keys from&#10;---@param count number? Running count (for recursion)&#10;---@return number Total key count&#10;function LanguageLoader:_countKeys(tbl, count)&#10;    count = count or 0&#10;    for k, v in pairs(tbl) do&#10;        if type(v) == &quot;table&quot; then&#10;            count = self:_countKeys(v, count)&#10;        else&#10;            count = count + 1&#10;        end&#10;    end&#10;    return count&#10;end&#10;&#10;---Get available languages&#10;---&#10;---@return table Array of language codes&#10;function LanguageLoader:getAvailableLanguages()&#10;    return self.languages&#10;end&#10;&#10;---Get current language&#10;---&#10;---@return string Current language code&#10;function LanguageLoader:getCurrentLanguage()&#10;    return self.currentLanguage&#10;end&#10;&#10;---Switch to a language&#10;---&#10;---@param languageCode string Language code to switch to&#10;---@return boolean Success or failure&#10;function LanguageLoader:switchLanguage(languageCode)&#10;    if table.concat(self.languages, &quot;,&quot;):find(languageCode) then&#10;        return self:loadLanguage(languageCode)&#10;    else&#10;        print(&quot;[LanguageLoader] ERROR: Unsupported language: &quot; .. languageCode)&#10;        return false&#10;    end&#10;end&#10;&#10;---Get translation by key&#10;---&#10;---@param key string Translation key (e.g., &quot;ui.buttons.ok&quot; or &quot;game.messages.error&quot;)&#10;---@param languageCode string? Language code (defaults to current language)&#10;---@return string? Translation string or nil if not found&#10;function LanguageLoader:getTranslation(key, languageCode)&#10;    languageCode = languageCode or self.currentLanguage&#10;    &#10;    local translations = self.translations[languageCode]&#10;    if not translations then&#10;        print(string.format(&quot;[LanguageLoader] WARNING: No translations loaded for language: %s&quot;, languageCode))&#10;        return nil&#10;    end&#10;    &#10;    -- Split key by dots for nested access&#10;    local parts = {}&#10;    for part in key:gmatch(&quot;[^%.]+&quot;) do&#10;        table.insert(parts, part)&#10;    end&#10;    &#10;    -- Navigate nested table&#10;    local value = translations&#10;    for _, part in ipairs(parts) do&#10;        if type(value) ~= &quot;table&quot; then&#10;            return nil&#10;        end&#10;        value = value[part]&#10;        if not value then&#10;            return nil&#10;        end&#10;    end&#10;    &#10;    return value&#10;end&#10;&#10;---Check if translation exists&#10;---&#10;---@param key string Translation key&#10;---@param languageCode string? Language code (defaults to current language)&#10;---@return boolean True if translation exists&#10;function LanguageLoader:hasTranslation(key, languageCode)&#10;    return self:getTranslation(key, languageCode) ~= nil&#10;end&#10;&#10;return LanguageLoader&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>