<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docs/system/create_chatmode.prompt.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/system/create_chatmode.prompt.md" />
              <option name="updatedContent" value="# Create ChatMode Prompt&#10;**Purpose:** Generate a new AI agent persona/chatmode for specialized development tasks  &#10;**Output:** A `.chatmode.md` file in `docs/chatmodes/`  &#10;**Audience:** AI agents, documentation maintainers&#10;&#10;---&#10;&#10;##  Instructions&#10;&#10;When creating a new chatmode, provide the following information:&#10;&#10;### 1. Basic Information&#10;- **Name:** The role/persona name (e.g., &quot;Game Designer&quot;, &quot;Engine Developer&quot;)&#10;- **Layer:** Which layer? (Strategic, Design, Implementation, Testing, Analysis, Support)&#10;- **Purpose:** What does this persona do? (1-2 sentences)&#10;- **Primary Responsibilities:** 3-5 key tasks this persona handles&#10;&#10;### 2. Core Competencies&#10;- **Skills:** What technical/domain skills does this persona have?&#10;- **Knowledge Areas:** What domains must this persona understand?&#10;- **Tools:** What tools/systems does this persona use?&#10;&#10;### 3. Behavioral Guidelines&#10;- **Communication Style:** How should this persona communicate?&#10;- **Decision Making:** How does this persona make decisions?&#10;- **Collaboration:** How does this persona work with other roles?&#10;- **Quality Standards:** What quality bars must this persona maintain?&#10;&#10;### 4. Task Examples&#10;Provide 5-10 example tasks this persona handles:&#10;- &quot;Design unit progression system&quot;&#10;- &quot;Implement combat resolver&quot;&#10;- &quot;Write integration tests&quot;&#10;- etc.&#10;&#10;### 5. Success Criteria&#10;How do you measure if this persona is doing well?&#10;- Code quality metrics&#10;- Documentation standards&#10;- Test coverage&#10;- Performance benchmarks&#10;- etc.&#10;&#10;---&#10;&#10;##  Template Structure&#10;&#10;```markdown&#10;# [Role Name] ChatMode&#10;**Layer:** [Strategic/Design/Implementation/Testing/Analysis/Support]  &#10;**Focus:** [Primary domain/responsibility]  &#10;**Autonomy Level:** [High/Medium/Low]&#10;&#10;---&#10;&#10;##  Role Definition&#10;&#10;**Purpose:** [What this persona does]&#10;&#10;**Primary Responsibilities:**&#10;1. [Responsibility 1]&#10;2. [Responsibility 2]&#10;3. [Responsibility 3]&#10;&#10;**Key Deliverables:**&#10;- [Deliverable 1]&#10;- [Deliverable 2]&#10;- [Deliverable 3]&#10;&#10;---&#10;&#10;##  Core Competencies&#10;&#10;**Technical Skills:**&#10;- [Skill 1]&#10;- [Skill 2]&#10;- [Skill 3]&#10;&#10;**Knowledge Areas:**&#10;- [Domain 1]&#10;- [Domain 2]&#10;- [Domain 3]&#10;&#10;**Tools &amp; Systems:**&#10;- [Tool 1]&#10;- [Tool 2]&#10;- [Tool 3]&#10;&#10;---&#10;&#10;##  Behavioral Guidelines&#10;&#10;### Communication Style&#10;[How this persona communicates]&#10;&#10;### Decision Making&#10;[How decisions are made]&#10;&#10;### Collaboration&#10;[How to work with other roles]&#10;&#10;### Quality Standards&#10;[Quality expectations]&#10;&#10;---&#10;&#10;##  Workflow&#10;&#10;**Typical Task Flow:**&#10;```&#10;Input → Analysis → Planning → Implementation → Validation → Documentation → Output&#10;```&#10;&#10;**Detailed Steps:**&#10;1. [Step 1 description]&#10;2. [Step 2 description]&#10;3. [Step 3 description]&#10;&#10;---&#10;&#10;##  Reference Documentation&#10;&#10;**Must Read:**&#10;- [Document 1]&#10;- [Document 2]&#10;- [Document 3]&#10;&#10;**Related ChatModes:**&#10;- [Role 1] - [Relationship]&#10;- [Role 2] - [Relationship]&#10;&#10;---&#10;&#10;## ✅ Success Criteria&#10;&#10;**This persona is successful when:**&#10;- [Criterion 1]&#10;- [Criterion 2]&#10;- [Criterion 3]&#10;&#10;**Quality Metrics:**&#10;- [Metric 1]: [Target]&#10;- [Metric 2]: [Target]&#10;- [Metric 3]: [Target]&#10;&#10;---&#10;&#10;##  Example Tasks&#10;&#10;### Task 1: [Task Name]&#10;**Input:** [What's provided]  &#10;**Process:** [How to approach]  &#10;**Output:** [What's delivered]&#10;&#10;### Task 2: [Task Name]&#10;**Input:** [What's provided]  &#10;**Process:** [How to approach]  &#10;**Output:** [What's delivered]&#10;&#10;[Continue for 5-10 example tasks]&#10;&#10;---&#10;&#10;## ⚠️ Common Pitfalls&#10;&#10;**Avoid:**&#10;- [Pitfall 1]&#10;- [Pitfall 2]&#10;- [Pitfall 3]&#10;&#10;**Instead:**&#10;- [Best practice 1]&#10;- [Best practice 2]&#10;- [Best practice 3]&#10;&#10;---&#10;&#10;**Status:** [Draft/Active/Deprecated]  &#10;**Last Updated:** YYYY-MM-DD  &#10;**Maintainer:** [Name/Role]&#10;```&#10;&#10;---&#10;&#10;##  Usage&#10;&#10;**AI Agent:** When asked to create a chatmode, use this template and fill in all sections based on user requirements.&#10;&#10;**Output Filename:** `docs/chatmodes/[role_name_lowercase].chatmode.md`&#10;&#10;**After Creation:**&#10;1. Add entry to `docs/chatmodes/README.md`&#10;2. Add entry to `docs/chatmodes/QUICK-REFERENCE.md`&#10;3. Update count in `docs/README.md`&#10;&#10;---&#10;&#10;## ✅ Validation Checklist&#10;&#10;Before finalizing a chatmode:&#10;- [ ] All sections filled in&#10;- [ ] Clear, actionable responsibilities&#10;- [ ] Specific, measurable success criteria&#10;- [ ] 5+ example tasks provided&#10;- [ ] Related chatmodes identified&#10;- [ ] Reference documentation linked&#10;- [ ] Communication style defined&#10;- [ ] Quality standards explicit&#10;&#10;---&#10;&#10;**Created:** 2025-10-27  &#10;**Purpose:** Standardize chatmode creation  &#10;**Location:** `docs/system/create_chatmode.prompt.md`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/system/create_instruction.prompt.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/system/create_instruction.prompt.md" />
              <option name="updatedContent" value="# Create Instruction Prompt&#10;**Purpose:** Generate a new development practice/instruction guide  &#10;**Output:** A `.instructions.md` file in `docs/instructions/`  &#10;**Audience:** Developers, AI agents, contributors&#10;&#10;---&#10;&#10;##  Instructions&#10;&#10;When creating a new instruction guide, provide the following information:&#10;&#10;### 1. Basic Information&#10;- **Title:** Guide name with emoji (e.g., &quot;️ Love2D &amp; Lua&quot;, &quot; Testing&quot;)&#10;- **Category:** Which category? (Programming, Art, Design, DevOps, Management, Security, Global, Community)&#10;- **Purpose:** What problem does this guide solve? (1-2 sentences)&#10;- **Audience:** Who should read this? (Beginners, Intermediate, Advanced, All)&#10;&#10;### 2. Core Content&#10;- **Principles:** 3-5 core principles/rules&#10;- **Best Practices:** 10-20 specific best practices&#10;- **Anti-Patterns:** 5-10 things to AVOID&#10;- **Examples:** Code examples, before/after comparisons&#10;&#10;### 3. Practical Guidance&#10;- **Tools:** What tools are used?&#10;- **Workflow:** Step-by-step process&#10;- **Common Pitfalls:** What goes wrong?&#10;- **Troubleshooting:** How to fix common issues?&#10;&#10;### 4. Integration&#10;- **Related Guides:** Links to other instructions&#10;- **Project Context:** How does this fit in the project?&#10;- **Dependencies:** What must be learned first?&#10;&#10;---&#10;&#10;##  Template Structure&#10;&#10;```markdown&#10;# [Emoji] [Guide Title]&#10;&#10;**Category:** [Programming/Art/Design/DevOps/Management/Security/Global/Community]  &#10;**Audience:** [Beginners/Intermediate/Advanced/All]  &#10;**Prerequisites:** [None or list prerequisites]&#10;&#10;---&#10;&#10;##  Purpose&#10;&#10;**Problem:** [What problem does this solve?]&#10;&#10;**Solution:** [How does this guide help?]&#10;&#10;**When to Use:** [Applicable situations]&#10;&#10;---&#10;&#10;##  Core Principles&#10;&#10;1. **[Principle 1]:** [Explanation]&#10;2. **[Principle 2]:** [Explanation]&#10;3. **[Principle 3]:** [Explanation]&#10;4. **[Principle 4]:** [Explanation]&#10;5. **[Principle 5]:** [Explanation]&#10;&#10;---&#10;&#10;## ✅ Best Practices&#10;&#10;### [Category 1]&#10;1. **[Practice]:** [Description]&#10;   ```[language]&#10;   [Code example]&#10;   ```&#10;&#10;2. **[Practice]:** [Description]&#10;   ```[language]&#10;   [Code example]&#10;   ```&#10;&#10;### [Category 2]&#10;[Continue pattern...]&#10;&#10;---&#10;&#10;## ❌ Anti-Patterns&#10;&#10;### [Anti-Pattern 1]: [Name]&#10;**Problem:** [Why is this bad?]&#10;&#10;**Bad Example:**&#10;```[language]&#10;[Code showing anti-pattern]&#10;```&#10;&#10;**Good Example:**&#10;```[language]&#10;[Code showing correct approach]&#10;```&#10;&#10;**Why:** [Explanation of improvement]&#10;&#10;---&#10;&#10;##  Tools &amp; Setup&#10;&#10;**Required Tools:**&#10;- [Tool 1] - [Purpose]&#10;- [Tool 2] - [Purpose]&#10;- [Tool 3] - [Purpose]&#10;&#10;**Installation:**&#10;```bash&#10;[Installation commands]&#10;```&#10;&#10;**Configuration:**&#10;```[format]&#10;[Configuration examples]&#10;```&#10;&#10;---&#10;&#10;##  Workflow&#10;&#10;**Step-by-Step Process:**&#10;&#10;1. **[Step 1]:** [Description]&#10;   - [Detail 1]&#10;   - [Detail 2]&#10;&#10;2. **[Step 2]:** [Description]&#10;   - [Detail 1]&#10;   - [Detail 2]&#10;&#10;[Continue for all steps...]&#10;&#10;---&#10;&#10;##  Real-World Examples&#10;&#10;### Example 1: [Use Case]&#10;**Scenario:** [Description]&#10;&#10;**Implementation:**&#10;```[language]&#10;[Code example]&#10;```&#10;&#10;**Explanation:** [Why this works]&#10;&#10;---&#10;&#10;## ⚠️ Common Pitfalls&#10;&#10;1. **[Pitfall]:** [What happens]&#10;   - **Solution:** [How to fix]&#10;&#10;2. **[Pitfall]:** [What happens]&#10;   - **Solution:** [How to fix]&#10;&#10;[Continue...]&#10;&#10;---&#10;&#10;##  Troubleshooting&#10;&#10;### Problem: [Issue description]&#10;**Symptoms:** [What you see]  &#10;**Cause:** [Why it happens]  &#10;**Solution:** [How to fix]&#10;&#10;[Repeat for common issues...]&#10;&#10;---&#10;&#10;##  Reference&#10;&#10;**Related Guides:**&#10;- [Guide 1]&#10;- [Guide 2]&#10;- [Guide 3]&#10;&#10;**External Resources:**&#10;- [Resource 1]&#10;- [Resource 2]&#10;- [Resource 3]&#10;&#10;**Project Files:**&#10;- [Relevant code files]&#10;- [Configuration files]&#10;&#10;---&#10;&#10;## ✅ Checklist&#10;&#10;**Before committing code:**&#10;- [ ] [Check 1]&#10;- [ ] [Check 2]&#10;- [ ] [Check 3]&#10;&#10;---&#10;&#10;##  Success Metrics&#10;&#10;**You're following this guide successfully when:**&#10;- [Metric 1]&#10;- [Metric 2]&#10;- [Metric 3]&#10;&#10;---&#10;&#10;**Status:** [Active/Draft/Deprecated]  &#10;**Last Updated:** YYYY-MM-DD  &#10;**Maintainer:** [Name/Role]&#10;```&#10;&#10;---&#10;&#10;##  Usage&#10;&#10;**AI Agent:** When asked to create an instruction guide, use this template and fill in all sections based on user requirements.&#10;&#10;**Output Filename:** `docs/instructions/[emoji]_[title].instructions.md`&#10;&#10;**After Creation:**&#10;1. Add entry to `docs/instructions/README.md`&#10;2. Add entry to `docs/instructions/INDEX_ALL_24_PRACTICES.md`&#10;3. Update count in `docs/README.md`&#10;4. Consider adding to `docs/instructions/START_HERE.md` if essential&#10;&#10;---&#10;&#10;## ✅ Validation Checklist&#10;&#10;Before finalizing an instruction guide:&#10;- [ ] Clear problem statement&#10;- [ ] 3-5 core principles defined&#10;- [ ] 10+ best practices with examples&#10;- [ ] 5+ anti-patterns with fixes&#10;- [ ] Code examples tested and working&#10;- [ ] Related guides linked&#10;- [ ] Common pitfalls documented&#10;- [ ] Troubleshooting section complete&#10;- [ ] Success metrics defined&#10;- [ ] Category assigned correctly&#10;&#10;---&#10;&#10;**Created:** 2025-10-27  &#10;**Purpose:** Standardize instruction guide creation  &#10;**Location:** `docs/system/create_instruction.prompt.md`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/system/create_prompt.prompt.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/system/create_prompt.prompt.md" />
              <option name="updatedContent" value="# Create Prompt Template Prompt&#10;**Purpose:** Generate a new content creation template/prompt  &#10;**Output:** A `.prompt.md` file in `docs/prompts/`  &#10;**Audience:** AI agents, content creators, designers&#10;&#10;---&#10;&#10;##  Instructions&#10;&#10;When creating a new prompt template, provide the following information:&#10;&#10;### 1. Basic Information&#10;- **Content Type:** What is being created? (unit, item, mission, facility, etc.)&#10;- **System:** Which game system? (Core, Base, World, Tactical, Combat, Economy, Narrative, Meta)&#10;- **Purpose:** Why would someone use this prompt?&#10;- **Output:** What files/content are generated?&#10;&#10;### 2. Required Information&#10;- **Mandatory Fields:** What information MUST be provided?&#10;- **Optional Fields:** What information CAN be provided?&#10;- **Dependencies:** What must exist first? (e.g., faction before unit)&#10;&#10;### 3. TOML Schema&#10;- **Schema Reference:** Link to api/GAME_API.toml section&#10;- **Required Fields:** Which TOML fields are mandatory?&#10;- **Optional Fields:** Which TOML fields are optional?&#10;- **Valid Values:** Enums, ranges, constraints&#10;&#10;### 4. Design Considerations&#10;- **Balance Guidelines:** What makes this balanced?&#10;- **Common Patterns:** What are typical configurations?&#10;- **Edge Cases:** What unusual scenarios to consider?&#10;&#10;---&#10;&#10;##  Template Structure&#10;&#10;```markdown&#10;# Add [Content Type] Prompt&#10;&#10;**System:** [Core/Base/World/Tactical/Combat/Economy/Narrative/Meta]  &#10;**Output:** TOML file in `mods/core/rules/[category]/`  &#10;**Schema:** `api/GAME_API.toml` → `[[type.[content_type]]]`&#10;&#10;---&#10;&#10;##  Purpose&#10;&#10;**Use this prompt to:** [What this helps create]&#10;&#10;**Output Location:**&#10;- TOML: `mods/core/rules/[category]/[name].toml`&#10;- Assets: `mods/core/assets/[category]/[name].[ext]`&#10;- Design Doc: `design/mechanics/[system].md` (update if needed)&#10;&#10;---&#10;&#10;##  Required Information&#10;&#10;Provide the following details:&#10;&#10;### 1. Basic Info&#10;- **ID:** Unique identifier (lowercase, underscores)&#10;- **Name:** Display name&#10;- **Description:** Short description (1-2 sentences)&#10;&#10;### 2. [Category-Specific Fields]&#10;- **[Field 1]:** [What is this?]&#10;- **[Field 2]:** [What is this?]&#10;- **[Field 3]:** [What is this?]&#10;&#10;### 3. [Optional Details]&#10;- **[Optional Field 1]:** [What is this?]&#10;- **[Optional Field 2]:** [What is this?]&#10;&#10;---&#10;&#10;##  TOML Schema&#10;&#10;**Reference:** `api/GAME_API.toml` → `[[type.[content_type]]]`&#10;&#10;**Required Fields:**&#10;```toml&#10;[[type.[content_type]]]&#10;id = &quot;string&quot;              # Unique identifier&#10;name = &quot;string&quot;            # Display name&#10;[additional required fields...]&#10;```&#10;&#10;**Optional Fields:**&#10;```toml&#10;[optional_section]&#10;field = value              # Description&#10;[additional optional fields...]&#10;```&#10;&#10;**Valid Values:**&#10;- `id`: lowercase, underscores, unique&#10;- `name`: any string, user-visible&#10;- [additional constraints...]&#10;&#10;---&#10;&#10;##  Design Guidelines&#10;&#10;### Balance Considerations&#10;- [Guideline 1]&#10;- [Guideline 2]&#10;- [Guideline 3]&#10;&#10;### Common Patterns&#10;**[Pattern Name]:**&#10;- [Characteristic 1]&#10;- [Characteristic 2]&#10;- [Example configuration]&#10;&#10;### Edge Cases&#10;- **[Edge Case 1]:** [How to handle]&#10;- **[Edge Case 2]:** [How to handle]&#10;&#10;---&#10;&#10;##  Example: [Example Name]&#10;&#10;**Concept:** [Description of example]&#10;&#10;**TOML:**&#10;```toml&#10;[[type.[content_type]]]&#10;id = &quot;example_id&quot;&#10;name = &quot;Example Name&quot;&#10;[full example configuration...]&#10;```&#10;&#10;**Assets:**&#10;- [Asset 1]: `path/to/asset1.ext`&#10;- [Asset 2]: `path/to/asset2.ext`&#10;&#10;**Design Rationale:** [Why these values?]&#10;&#10;---&#10;&#10;##  Creation Workflow&#10;&#10;1. **Design:** Define concept in `design/mechanics/[system].md`&#10;2. **Schema:** Verify schema in `api/GAME_API.toml`&#10;3. **TOML:** Create TOML file in `mods/core/rules/[category]/`&#10;4. **Assets:** Add required assets to `mods/core/assets/[category]/`&#10;5. **Test:** Run game, verify content loads&#10;6. **Document:** Update design doc with implementation notes&#10;&#10;---&#10;&#10;## ✅ Validation Checklist&#10;&#10;Before finalizing:&#10;- [ ] ID is unique and follows naming convention&#10;- [ ] All required fields provided&#10;- [ ] Values within valid ranges&#10;- [ ] Assets exist and referenced correctly&#10;- [ ] TOML validates against schema&#10;- [ ] Design doc updated (if significant)&#10;- [ ] Tested in game&#10;&#10;---&#10;&#10;##  Related Prompts&#10;&#10;- [Related Prompt 1]&#10;- [Related Prompt 2]&#10;- [Related Prompt 3]&#10;&#10;---&#10;&#10;##  References&#10;&#10;**API Schema:**&#10;- `api/GAME_API.toml` → `[[type.[content_type]]]`&#10;- `api/[SYSTEM].md`&#10;&#10;**Design:**&#10;- `design/mechanics/[system].md`&#10;&#10;**Examples:**&#10;- `mods/core/rules/[category]/[example].toml`&#10;&#10;---&#10;&#10;**Created:** YYYY-MM-DD  &#10;**Status:** Active  &#10;**Maintainer:** [Name/Role]&#10;```&#10;&#10;---&#10;&#10;##  Usage&#10;&#10;**AI Agent:** When asked to create a content prompt, use this template and fill in all sections based on the content type being created.&#10;&#10;**Output Filename:** `docs/prompts/add_[content_type].prompt.md`&#10;&#10;**After Creation:**&#10;1. Add entry to `docs/prompts/README.md`&#10;2. Update count in `docs/README.md`&#10;3. Link from related system documentation&#10;&#10;---&#10;&#10;## ✅ Validation Checklist&#10;&#10;Before finalizing a prompt:&#10;- [ ] Clear purpose statement&#10;- [ ] All required information documented&#10;- [ ] TOML schema fully specified&#10;- [ ] Valid values and constraints listed&#10;- [ ] At least one complete example&#10;- [ ] Design guidelines provided&#10;- [ ] Validation checklist included&#10;- [ ] Related prompts linked&#10;- [ ] References to API/design docs&#10;&#10;---&#10;&#10;**Created:** 2025-10-27  &#10;**Purpose:** Standardize content prompt creation  &#10;**Location:** `docs/system/create_prompt.prompt.md`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/system/create_system_pattern.prompt.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/system/create_system_pattern.prompt.md" />
              <option name="updatedContent" value="# Create System Pattern Prompt&#10;**Purpose:** Generate a new universal system pattern document  &#10;**Output:** A `NN_PATTERN_NAME_SYSTEM.md` file in `docs/system/`  &#10;**Audience:** Architects, teams replicating the system&#10;&#10;---&#10;&#10;##  Instructions&#10;&#10;When creating a new system pattern, provide the following information:&#10;&#10;### 1. Pattern Identification&#10;- **Pattern Name:** What is this pattern called?&#10;- **Pattern Number:** Sequential number (10, 11, 12...)&#10;- **Problem Solved:** What specific problem does this solve?&#10;- **Universal Applicability:** How does this apply to different domains?&#10;&#10;### 2. Core Concept&#10;- **Principle:** The fundamental idea (1-2 sentences)&#10;- **Key Insight:** The &quot;aha!&quot; moment that makes this work&#10;- **Trade-offs:** What do you give up for what you gain?&#10;&#10;### 3. Architecture&#10;- **Components:** What are the key parts?&#10;- **Relationships:** How do parts interact?&#10;- **Data Flow:** How does information move through the system?&#10;- **Validation Rules:** What constraints must be enforced?&#10;&#10;### 4. Implementation&#10;- **Folder Structure:** What folders/files are needed?&#10;- **Tooling:** What tools support this pattern?&#10;- **Integration Points:** How does this connect to other patterns?&#10;&#10;### 5. Universal Adaptation&#10;- **Game Development:** How to use in games&#10;- **Web Applications:** How to use in web apps&#10;- **Data Pipelines:** How to use in data systems&#10;- **Embedded Systems:** How to use in hardware/firmware&#10;&#10;---&#10;&#10;##  Template Structure&#10;&#10;```markdown&#10;# [Pattern Name] System&#10;**Pattern: [One-line description]**&#10;&#10;**Purpose:** [What this pattern achieves]  &#10;**Problem Solved:** [Specific problems this addresses]  &#10;**Universal Pattern:** [Why this works everywhere]&#10;&#10;---&#10;&#10;##  Core Concept&#10;&#10;**Principle:** [Fundamental idea]&#10;&#10;**Diagram:**&#10;```&#10;[ASCII or Mermaid diagram showing concept]&#10;```&#10;&#10;**Key Insight:** [The crucial realization]&#10;&#10;---&#10;&#10;##  Architecture&#10;&#10;### Components&#10;&#10;**Component 1: [Name]**&#10;**Purpose:** [What it does]&#10;&#10;**Contains:**&#10;- [Item 1]&#10;- [Item 2]&#10;- [Item 3]&#10;&#10;**Input:** [What goes in]  &#10;**Output:** [What comes out]&#10;&#10;**Validation Rules:**&#10;- ✅ [Rule 1]&#10;- ✅ [Rule 2]&#10;- ❌ [Anti-pattern 1]&#10;- ❌ [Anti-pattern 2]&#10;&#10;[Repeat for all components...]&#10;&#10;---&#10;&#10;### Relationships&#10;&#10;**How Components Interact:**&#10;```&#10;Component 1&#10;  ↓ [Relationship]&#10;Component 2&#10;  ↓ [Relationship]&#10;Component 3&#10;```&#10;&#10;**Data Flow:**&#10;```&#10;[Step-by-step data transformation]&#10;```&#10;&#10;---&#10;&#10;##  Workflow&#10;&#10;**Typical Process:**&#10;```&#10;Input → [Step 1] → [Step 2] → [Step 3] → Output&#10;```&#10;&#10;**Detailed Steps:**&#10;&#10;1. **[Step Name]:**&#10;   - [Action 1]&#10;   - [Action 2]&#10;   - [Validation]&#10;&#10;[Continue for all steps...]&#10;&#10;---&#10;&#10;## ️ Implementation&#10;&#10;### Folder Structure&#10;```&#10;[folder_name]/&#10;├── [subfolder1]/    [Purpose]&#10;├── [subfolder2]/    [Purpose]&#10;└── [file].ext      [Purpose]&#10;```&#10;&#10;### Tooling&#10;- **[Tool 1]:** [Purpose]&#10;- **[Tool 2]:** [Purpose]&#10;- **[Tool 3]:** [Purpose]&#10;&#10;### Code Example&#10;```[language]&#10;[Minimal working example]&#10;```&#10;&#10;---&#10;&#10;##  Integration Points&#10;&#10;**Related Patterns:**&#10;- **[Pattern N]:** [How they work together]&#10;- **[Pattern M]:** [How they work together]&#10;&#10;**Dependencies:**&#10;- **Requires:** [Pattern(s) that must exist first]&#10;- **Enables:** [Pattern(s) that build on this]&#10;&#10;---&#10;&#10;##  Universal Adaptation&#10;&#10;### For Game Development&#10;**Adaptation:**&#10;- [Folder] → [Game equivalent]&#10;- [Component] → [Game equivalent]&#10;&#10;**Example:**&#10;```&#10;[Game-specific implementation]&#10;```&#10;&#10;### For Web Applications&#10;**Adaptation:**&#10;- [Folder] → [Web equivalent]&#10;- [Component] → [Web equivalent]&#10;&#10;**Example:**&#10;```&#10;[Web-specific implementation]&#10;```&#10;&#10;### For Data Pipelines&#10;**Adaptation:**&#10;- [Folder] → [Data equivalent]&#10;- [Component] → [Data equivalent]&#10;&#10;**Example:**&#10;```&#10;[Data-specific implementation]&#10;```&#10;&#10;### For Embedded Systems&#10;**Adaptation:**&#10;- [Folder] → [Hardware equivalent]&#10;- [Component] → [Hardware equivalent]&#10;&#10;**Example:**&#10;```&#10;[Embedded-specific implementation]&#10;```&#10;&#10;---&#10;&#10;##  Success Metrics&#10;&#10;**This pattern is working when:**&#10;- ✅ [Metric 1]&#10;- ✅ [Metric 2]&#10;- ✅ [Metric 3]&#10;&#10;**Measurements:**&#10;- [Quantifiable metric 1]: [Target]&#10;- [Quantifiable metric 2]: [Target]&#10;&#10;---&#10;&#10;##  Implementation Checklist&#10;&#10;### Phase 1: Foundation&#10;- [ ] [Task 1]&#10;- [ ] [Task 2]&#10;- [ ] [Task 3]&#10;&#10;### Phase 2: Integration&#10;- [ ] [Task 1]&#10;- [ ] [Task 2]&#10;- [ ] [Task 3]&#10;&#10;### Phase 3: Validation&#10;- [ ] [Task 1]&#10;- [ ] [Task 2]&#10;- [ ] [Task 3]&#10;&#10;---&#10;&#10;## ⚠️ Common Pitfalls&#10;&#10;**Pitfall 1: [Name]**&#10;**Problem:** [What goes wrong]  &#10;**Solution:** [How to avoid]&#10;&#10;[Continue for 5+ pitfalls...]&#10;&#10;---&#10;&#10;##  Key Takeaways&#10;&#10;1. **[Takeaway 1]:** [Explanation]&#10;2. **[Takeaway 2]:** [Explanation]&#10;3. **[Takeaway 3]:** [Explanation]&#10;4. **[Takeaway 4]:** [Explanation]&#10;5. **[Takeaway 5]:** [Explanation]&#10;&#10;---&#10;&#10;##  References&#10;&#10;**Related Patterns:**&#10;- [Pattern 1]&#10;- [Pattern 2]&#10;- [Pattern 3]&#10;&#10;**External Resources:**&#10;- [Resource 1]&#10;- [Resource 2]&#10;&#10;**Project Files:**&#10;- [Relevant files]&#10;&#10;---&#10;&#10;**Last Updated:** YYYY-MM-DD  &#10;**Status:**  Pattern documented, ready for implementation  &#10;**Next Step:** [What to implement next]&#10;```&#10;&#10;---&#10;&#10;##  Usage&#10;&#10;**AI Agent:** When asked to create a system pattern, use this template and fill in all sections based on the pattern being documented.&#10;&#10;**Output Filename:** `docs/system/[NN]_[PATTERN_NAME]_SYSTEM.md`&#10;&#10;**Numbering:** Use next available number (current highest + 1)&#10;&#10;**After Creation:**&#10;1. Add entry to `docs/system/README.md` (if exists)&#10;2. Update pattern count in `docs/README.md`&#10;3. Update integration map showing relationships&#10;4. Add cross-references from related patterns&#10;&#10;---&#10;&#10;## ✅ Validation Checklist&#10;&#10;Before finalizing a pattern:&#10;- [ ] Clear problem statement&#10;- [ ] Core concept explained with diagram&#10;- [ ] All components documented&#10;- [ ] Data flow visualized&#10;- [ ] Validation rules specified&#10;- [ ] Implementation example provided&#10;- [ ] Universal adaptations for 4+ domains&#10;- [ ] Success metrics defined&#10;- [ ] Common pitfalls documented&#10;- [ ] Integration points identified&#10;- [ ] Implementation checklist complete&#10;- [ ] Key takeaways summarized&#10;&#10;---&#10;&#10;##  Pattern Quality Standards&#10;&#10;**A good pattern:**&#10;- Solves ONE problem well&#10;- Works in multiple domains (universal)&#10;- Has clear validation rules&#10;- Includes working examples&#10;- Defines success metrics&#10;- Documents common mistakes&#10;- Shows integration with other patterns&#10;&#10;**Avoid:**&#10;- Vague, abstract concepts&#10;- Domain-specific solutions&#10;- Missing validation rules&#10;- No examples&#10;- Unclear success criteria&#10;&#10;---&#10;&#10;**Created:** 2025-10-27  &#10;**Purpose:** Standardize system pattern documentation  &#10;**Location:** `docs/system/create_system_pattern.prompt.md`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>